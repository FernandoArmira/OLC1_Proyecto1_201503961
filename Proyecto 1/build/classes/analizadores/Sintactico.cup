package analizadores;
import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

parser code
{:  

    public void Addvariable(String variable, String valor, String tipo){
        variables nuevov= new variables(variable, valor, tipo);
        proyecto.Interfaz.listavariables.add(nuevov);
    }

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String llaveiz, llaveder, puntocoma, pariz, parder, coma, igual, dpuntos, coriz, corder, dolar, definirglobales, generarreporteestadistico, compare, stringvar, doublevar, graficabarras, titulo, ejex, valores, titulox, tituloy, graficapie, graficalineas, archivo, puntajeespecifico, decimal, id, cadena;

// no terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, INSTRUCCION, BLOQUEGLOBALES, BLOQUEARCHIVOS, BLOQUEGBARRAS, BLOQUEGPIE, BLOQUEGLINEAS, CUERPOGLOBALES, VARSTRING, VARDOUBLE, CUERPOARCHIVOS;
//non terminal Nodo INICIO, EXPRESION, BLOQUE1, DEFCONJ, DEFEXPR, NOTACION, NOTACION2, BLOQUE2, BLOQUE3, DEFCADENA;

//precedence left or;
//precedence left conc;
//precedence left suma, mult, inter;

start with INICIO;

INICIO::= INSTRUCCION;

INSTRUCCION ::= INSTRUCCION BLOQUEGLOBALES
        | INSTRUCCION BLOQUEARCHIVOS
        | BLOQUEGLOBALES
        | BLOQUEARCHIVOS
        |error;

BLOQUEGLOBALES ::= definirglobales llaveiz CUERPOGLOBALES llaveder;

CUERPOGLOBALES ::= CUERPOGLOBALES VARSTRING
                | CUERPOGLOBALES VARDOUBLE
                | VARSTRING
                | VARDOUBLE;

VARSTRING ::= stringvar id:a igual cadena:b puntocoma {:System.out.println("--- Variable: " + a + " Valor: " + b);
Addvariable(a,b,"String");
:};

VARDOUBLE ::= doublevar id:a igual decimal:b puntocoma {:System.out.println("--- Variable: " + a + " Valor: " + b);
Addvariable(a,b,"Double");
:};

BLOQUEARCHIVOS ::= generarreporteestadistico llaveiz CUERPOARCHIVOS llaveder;

CUERPOARCHIVOS ::= compare pariz cadena:a coma cadena:b parder puntocoma{:System.out.println("--- Archivo A: " + a + " Archivo B: " + b);:};


/*
        
        | INSTRUCCION BLOQUEGBARRAS
        | INSTRUCCION BLOQUEGPIE
        | INSTRUCCION BLOQUEGLINEAS

        
        | BLOQUEGBARRAS
        | BLOQUEGPIE
        | BLOQUEGLINEAS


BLOQUE1::= DEFCONJ DEFEXPR;

DEFCONJ::= DEFCONJ conj dpuntos id resta flecha NOTACION puntocoma 
        |conj dpuntos id resta flecha NOTACION puntocoma
        |error;

NOTACION::= letra sconj letra
        |entero sconj entero
        |simbolo sconj simbolo
        |letra sconj entero
        |letra sconj simbolo
        |entero sconj letra
        |entero sconj simbolo
        |simbolo sconj entero
        |simbolo sconj letra
        |letra NOTACION2
        |entero NOTACION2
        |simbolo NOTACION2;

NOTACION2::= NOTACION2 coma letra
        | NOTACION2 coma entero
        | NOTACION2 coma simbolo
        | coma letra
        | coma entero
        | coma simbolo;

DEFEXPR::= DEFEXPR id resta flecha EXPRESION:valor {: //System.out.println("Valor " + valor.getValor());
            parser.Raiz = valor;
            graficarArbol(valor,"arbol" + Integer.toString(parser.contarbol));
            parser.contarbol++;
            //proyecto.Interfaz.list_of_names+=valor;
            :} puntocoma
           |id resta flecha EXPRESION:valor {: //System.out.println("Valor " + valor.getValor());
            parser.Raiz = valor;
            graficarArbol(valor,"arbol" + Integer.toString(parser.contarbol));
            parser.contarbol++;
            //proyecto.Interfaz.list_of_names+=valor;
            :} puntocoma
            |error;

EXPRESION ::= suma EXPRESION:a {://RESULT=a; 
            //System.out.println("Una o más veces " + a.getValor());
            Nodo nuevaSuma = new Nodo(null, a, "+", parser.contId, " ", " " , " " , " ", " ");
            parser.contId++;
            RESULT = nuevaSuma;
            if(nuevaSuma.getHder().getAN() == "AN"){
            nuevaSuma.setAN("AN");
            }else{
            nuevaSuma.setAN("N");
            }
            nuevaSuma.setFirst(nuevaSuma.getHder().getFirst());
            nuevaSuma.setLast(nuevaSuma.getHder().getLast());
            primeros = nuevaSuma.getFirst();
            ultimos = nuevaSuma.getLast();
            nuevaSuma.setFollow(nuevaSuma.getHder().getLast() + "-" + nuevaSuma.getHder().getFirst());
            siguientes(nuevaSuma.getHder().getLast(),nuevaSuma.getHder().getFirst());
            //siguientes.add(nuevaSuma.getFollow());
            //System.out.println("Follows: " + nuevaSuma.getFollow());
            :} // EXPRESION ::= EXPRESION signcon EXPRESION EXPRESION

            | mult EXPRESION:a {://RESULT=a; 
            //System.out.println("Cero o más veces " + a.getValor());
            Nodo nuevaMult = new Nodo(null, a, "*", parser.contId, " ", "A", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaMult;
            nuevaMult.setFirst(nuevaMult.getHder().getFirst());
            nuevaMult.setLast(nuevaMult.getHder().getLast());
            primeros = nuevaMult.getFirst();
            ultimos = nuevaMult.getLast();
            nuevaMult.setFollow(nuevaMult.getHder().getLast() + "-" + nuevaMult.getHder().getFirst());
            siguientes(nuevaMult.getHder().getLast(),nuevaMult.getHder().getFirst());
            //siguientes.add(nuevaMult.getFollow());
            //System.out.println("Follows: " + nuevaMult.getFollow());
            :}

            | conc EXPRESION:a EXPRESION:b {://RESULT= a + b;
            //System.out.println("Concatenacion " + a.getValor() + b.getValor());
            Nodo nuevaConc = new Nodo(a, b, ".", parser.contId, " ", " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaConc;
            //System.out.println("Concatenacion " + nuevaConc.getHder().getAN() + "-" + nuevaConc.getHizq().getAN());
            if(nuevaConc.getHder().getAN() == "A" && nuevaConc.getHizq().getAN() == "A"){
                nuevaConc.setAN("A");
            }else{
                nuevaConc.setAN("N");
            }
            if(nuevaConc.getHizq().getAN() == "A"){
                nuevaConc.setFirst(nuevaConc.getHizq().getFirst() + "," +  nuevaConc.getHder().getFirst());
                primeros = nuevaConc.getFirst();
            }else{
                nuevaConc.setFirst(nuevaConc.getHizq().getFirst());
                primeros = nuevaConc.getFirst();
            }
            //System.out.println("Anulabilidad " + nuevaConc.getHder().getAN());
            if(nuevaConc.getHder().getAN() == "A"){
                //System.out.println("Entrando a condicion si es anulable");
                nuevaConc.setLast(nuevaConc.getHizq().getLast() + "," +  nuevaConc.getHder().getLast());
                ultimos = nuevaConc.getLast();
                //System.out.println(nuevaConc.getLast());
            }else{
                nuevaConc.setLast(nuevaConc.getHder().getLast());
                ultimos = nuevaConc.getLast();
                //System.out.println(nuevaConc.getLast());
            }

            nuevaConc.setFollow(nuevaConc.getHizq().getLast() + "-" + nuevaConc.getHder().getFirst());
            siguientes(nuevaConc.getHizq().getLast(),nuevaConc.getHder().getFirst());
            //siguientes.add(nuevaConc.getFollow());
            //System.out.println("Follows: " + nuevaConc.getFollow());
            :} 

            | or EXPRESION:a EXPRESION:b {://RESULT=a + b; 
            //System.out.println("Or " + a.getValor() + b.getValor());
            Nodo nuevaOr = new Nodo(a, b, "\\|", parser.contId, " ", " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaOr;
            //System.out.println("Or " + nuevaOr.getHder().getAN() + "-" + nuevaOr.getHizq().getAN());
            if(nuevaOr.getHder().getAN() == "A" || nuevaOr.getHizq().getAN() == "A"){
            nuevaOr.setAN("A");
            }else{
            nuevaOr.setAN("N");
            }
            nuevaOr.setFirst(nuevaOr.getHizq().getFirst() + "," +  nuevaOr.getHder().getFirst());
            nuevaOr.setLast(nuevaOr.getHizq().getLast() + "," +  nuevaOr.getHder().getLast());
            primeros = nuevaOr.getFirst();
            ultimos = nuevaOr.getLast();
            :} 

            | inter EXPRESION:a {://RESULT=a; 
            //System.out.println("Cero o una vez " + a.getValor() );
            Nodo nuevaInter = new Nodo(null, a, "?", parser.contId, " ", "A", " "," ", " ");
            parser.contId++;
            RESULT = nuevaInter;
            nuevaInter.setFirst(nuevaInter.getHder().getFirst());
            nuevaInter.setLast(nuevaInter.getHder().getLast());
            primeros = nuevaInter.getFirst();
            ultimos = nuevaInter.getLast();
            :}  

            | llaveiz id:val {://RESULT=val;
            Nodo nuevoId = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contI+1), "N" , Integer.toString(parser.contI+1), Integer.toString(parser.contI+1), " ");
            hojas.add(Integer.toString(parser.contI + 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevoId;
            :} llaveder

            | cadena:val {://RESULT=val;
            Nodo nuevaCad = new Nodo(null, null, val.replace("\"", "").replace("-", "─"), parser.contId, Integer.toString(parser.contI+1), "N", Integer.toString(parser.contI+1), Integer.toString(parser.contI+1), " ");
            hojas.add(Integer.toString(parser.contI + 1) + "-" +  val.replace("\"", "").replace("-", "─"));
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCad;
            :}

            | comilla:val {://RESULT=val;
            Nodo nuevaCom1 = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contI+1), "N", Integer.toString(parser.contI+1), Integer.toString(parser.contI+1), " ");
            hojas.add(Integer.toString(parser.contI + 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCom1;
            :}

            | comilla2:val {://RESULT=val;
            Nodo nuevaCom2 = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contI+1), "N", Integer.toString(parser.contI+1), Integer.toString(parser.contI+1), " ");
            hojas.add(Integer.toString(parser.contI + 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCom2; 
            :}

            | salto:val {://RESULT=val;
            Nodo nuevoSal = new Nodo(null, null,"\\" + val, parser.contId, Integer.toString(parser.contI+1), "N", Integer.toString(parser.contI+1), Integer.toString(parser.contI+1), " ");
            hojas.add(Integer.toString(parser.contI + 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevoSal;
            :}

            |error; 

BLOQUE2::= BLOQUE2 porcentaje porcentaje
        | porcentaje porcentaje
        |error;

BLOQUE3::= DEFCADENA;

DEFCADENA::= DEFCADENA id dpuntos cadena puntocoma
        |id dpuntos cadena puntocoma
        |error;

*/

/*LID::= LID comaa nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:}
    | nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:};

INICIO::= EXPRESION:valor {:
    System.out.println(valor);
    //proyecto.Interfaz.list_of_names+=valor;
:};

EXPRESION ::= suma EXPRESION:a EXPRESION:b {:RESULT=a+b;:} // EXPRESION ::= EXPRESION signcon EXPRESION EXPRESION
            | resta EXPRESION:b EXPRESION:a  {:RESULT=a-b;:}
            | mult EXPRESION:a EXPRESION:b {:RESULT=a*b;
                //addNodo("mult",a,b)
            :} // mult EXPRESION:a EXPRESION:b
            | div EXPRESION:b EXPRESION:a {:RESULT=a/b;:}
            | entero:val {:RESULT=new Double(val);:}
            | decimal:val {:RESULT=new Double(val);:}
            // | asteris EXPRESION
            // | mas EXPRESION
            // | punto EXPRESION EXPRESION <=> EXPRESION punto EXPRESION
            ;
//2+2*2.5+10*2*/