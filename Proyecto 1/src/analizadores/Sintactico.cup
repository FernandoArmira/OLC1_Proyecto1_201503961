package analizadores;
import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import java.io.StringReader;
import java.io.FileReader;
import java.io.BufferedReader;


//Importaciones Jfreechart
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;

parser code
{:  
    public static String titulografica = "";
    public static String titulograficax = "";
    public static String titulograficay = "";
    public static String direccionA = "";
    public static String archivo = "";
    public static ArrayList<String> valoresx = new ArrayList();
    public static ArrayList<String> valoresy = new ArrayList();
    public static ArrayList<String> archivos = new ArrayList();
    public static int contgbarras = 1;
    public static int contgpie = 1;
    public static int contglineas = 1;
    
// Grafica de barras
    public static void gbarras(String titulo, String titulox, String tituloy, String nombre) throws IOException{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        //double [ ] edad = {0.8, 0.7, 0, 0, 0.6, 0.9};
        
        //String [ ] nombre = {"Fernando", "Marz", "Jade", "Juan", "Maria", "Pedro"};

        /*for(int i = 0; i < valoresx.size(); i++){
            System.out.println(valoresx.get(i) + " " + valoresy.get(i));
        }*/
        
        for(int i = 0; i < valoresx.size(); i++){
            dataset.setValue(Double.parseDouble(valoresy.get(i)), "", valoresx.get(i));
        }
        
        JFreeChart chart = ChartFactory.createBarChart(
                titulo, // Titulo
                titulox, // Titulo ejex
                tituloy, // Titulo ejey
                dataset, 
                PlotOrientation.VERTICAL,
                true, 
                false, 
                false
        );
        
        //Mostramos la grafica en pantalla
        /*ChartFrame frame = new ChartFrame("Ejemplo Grafica de Barras", chart);
        frame.pack();
        frame.setVisible(true);*/


        //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File BarChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( BarChart , chart , width , height );

        proyecto.Interfaz.barrasr.add(nombre + ".jpeg");

        valoresx.clear();
        valoresy.clear();

    }

// Grafica de pie
    public static void gpie(String titulo, String nombre) throws IOException{
        DefaultPieDataset pieDataset = new DefaultPieDataset();

        double valortotal = 0;
        for(int i = 0; i < valoresy.size(); i++){
            //System.out.println(valoresy.get(i));
            valortotal = valortotal + Double.parseDouble(valoresy.get(i));
        }
        
        System.out.println(valortotal);

        double nuevovalor = 0;
        for(int i = 0; i < valoresy.size(); i++){
            //System.out.println(valoresy.get(i));
            nuevovalor = Double.parseDouble(valoresy.get(i)) * 100 / valortotal;
            valoresy.set(i,String.valueOf(nuevovalor));
            //System.out.println(valoresy.get(i));
        }
        
        for(int i = 0; i < valoresx.size(); i++){
            pieDataset.setValue(valoresx.get(i), Double.parseDouble(valoresy.get(i)));
        }

        /*pieDataset.setValue("PSOE", new Integer(31));
        pieDataset.setValue("PP", new Integer(34));
        pieDataset.setValue("PODEMOS", new Integer(25));
        pieDataset.setValue("IU", new Integer(8));
        pieDataset.setValue("Otros", new Integer(3));*/
        
        JFreeChart chart = ChartFactory.createPieChart(
                titulo,
                pieDataset,
                true,
                true,
                false
        );

        //Mostramos la grafica en pantalla
        /*ChartFrame frame = new ChartFrame("Ejemplo Grafica Circular", chart);
        frame.pack();
        frame.setVisible(true);*/

         //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File PieChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( PieChart , chart , width , height );

        proyecto.Interfaz.pier.add(nombre + ".jpeg");

        valoresx.clear();
        valoresy.clear();

    }

// Grafica de lineas
    public static void glineas(String titulo, String nombre, String archivo) throws IOException{
        int indice = 0;
        int estado = 0;
        for(int i=0;i<proyecto.Interfaz.archivosproyecto.size();i++){
            if(archivo.equals(proyecto.Interfaz.archivosproyecto.get(i))){
                indice = i;
                estado = 1;
                i = proyecto.Interfaz.archivosproyecto.size();
            } else{
                String[] partes = proyecto.Interfaz.archivosproyecto.get(i).split("\\.");
                if(archivo.equals(partes[0])){     
                    indice = i;
                    estado = 1;
                    i = proyecto.Interfaz.archivosproyecto.size();
                }
            }
        }


        final XYSeries serie1 = new XYSeries("Fernando Alonso");
        if(estado == 1){
            
            serie1.add(1, proyecto.Interfaz.rvariables.get(indice));
            serie1.add(2, proyecto.Interfaz.rmetodos.get(indice));
            serie1.add(3, proyecto.Interfaz.rclases.get(indice));
            serie1.add(4, proyecto.Interfaz.rcomentarios.get(indice));
        }
	
		
	final XYSeries serie2 = new XYSeries("Jaime Alguersuari");

        if(estado == 1){
            
            serie2.add(1, proyecto.Interfaz.rvariablesB.get(indice));
            serie2.add(2, proyecto.Interfaz.rmetodosB.get(indice));
            serie2.add(3, proyecto.Interfaz.rclasesB.get(indice));
            serie2.add(4, proyecto.Interfaz.rcomentariosB.get(indice));
        }
	
		
	final XYSeriesCollection collection = new XYSeriesCollection();
	collection.addSeries(serie1);
	collection.addSeries(serie2);
        
        JFreeChart chart = 
        ChartFactory.createXYLineChart(titulo,  
        "1.variables  2.metodos  3.clases  4.comentarios","Numero",collection,PlotOrientation.VERTICAL,
        false,
        false, 
        true                // Show legend
        );
        
        //Mostramos la grafica en pantalla
        /*ChartFrame frame = new ChartFrame("Ejemplo Grafica Circular", chart);
        frame.pack();
        frame.setVisible(true);*/

        //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File XYChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( XYChart , chart , width , height );

        proyecto.Interfaz.lineasr.add(nombre + ".jpeg");

    } 

// Variables globales del lenguaje fca
    public void Addvariable(String variable, String valor, String tipo){
        variables nuevov= new variables(variable, valor, tipo);
        
        int estadovar = 0;
        //System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!111" + nuevov.variable);
        if(proyecto.Interfaz.listavariables.size() <= 0){
            proyecto.Interfaz.listavariables.add(nuevov);
        }else{
            for(int i=0;i<proyecto.Interfaz.listavariables.size();i++){
                if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(nuevov.variable)){
                    estadovar = 1;
                    i = proyecto.Interfaz.listavariables.size();
                }
            }

            if(estadovar == 0){
                proyecto.Interfaz.listavariables.add(nuevov);
            }

        }
        

        
    }

// Ejecutar analizadores para el lenguaje javascript
    public void ejecutar(String direccion){

        try {
            File archivo = null;
            FileReader fr = null;
            BufferedReader br = null;

            //archivo = new File ("C:\\Users\\Fernando Armira\\Documents\\pruebajs.txt");
            archivo = new File (direccion);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea = br.readLine();

            String texto = "";

            while(linea != null){
                texto = texto + linea + "\n";
                linea = br.readLine();     
            }

            analizadores2.parser sintactico;
            sintactico = new analizadores2.parser(new analizadores2.Lexico(new StringReader(texto)));
            sintactico.parse();            
        } catch (Exception e) {
        }

    }

    public void listar(String direccion){
        File carpeta = new File(direccion);
        String[] listado = carpeta.list();
        if (listado == null || listado.length == 0) {
            System.out.println("No hay elementos dentro de la carpeta actual");
        return;
        }
        else {
            for (int i=0; i< listado.length; i++) {
                System.out.println(listado[i]);
                samename(direccion, listado[i]);
            }
        }
    }

    public void samename(String direccion, String nombre){
        int estadovar = 0;
        //System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!111" + nuevov.variable);
        if(archivos.size() <= 0){
            archivos.add(nombre);
        }else{
            for(int i=0;i<archivos.size();i++){
                if(archivos.get(i).equals(nombre)){
                    System.out.println("Archivo con el mismo nombre: " + nombre);
                    //System.out.println("Analizar: " + direccionA+nombre);
                    
                    proyecto.Interfaz.variablestemp.clear();
                    proyecto.Interfaz.comentariostemp.clear();
                    proyecto.Interfaz.metodostempA.clear();
                    proyecto.Interfaz.metodosparamtempA.clear();
                    proyecto.Interfaz.metodoslineastempA.clear();
                    proyecto.Interfaz.archivometodosA.clear();
                    proyecto.Interfaz.metodostempB.clear();
                    proyecto.Interfaz.metodosparamtempB.clear();
                    proyecto.Interfaz.metodoslineastempB.clear();
                    proyecto.Interfaz.archivometodosB.clear();
                    proyecto.Interfaz.clasestempA.clear();
                    proyecto.Interfaz.claseslineastempA.clear();
                    proyecto.Interfaz.clasesmetodostempA.clear();
                    proyecto.Interfaz.archivoclasesA.clear();
                    proyecto.Interfaz.clasestempB.clear();
                    proyecto.Interfaz.claseslineastempB.clear();
                    proyecto.Interfaz.clasesmetodostempB.clear();
                    proyecto.Interfaz.archivoclasesB.clear();
                    
                    proyecto.Interfaz.nombrearchivojs = nombre;
                    proyecto.Interfaz.archivoa = true;
                    ejecutar(direccionA+ "\\" +nombre);
                    proyecto.Interfaz.archivoa = false;
                    ejecutar(direccion+ "\\" + nombre);

                    proyecto.Interfaz.puntajemetodos();
                    proyecto.Interfaz.puntajeclases();

                    proyecto.Interfaz.archivosproyecto.add(nombre);

                    proyecto.Interfaz.rcomentarios.add(proyecto.Interfaz.comentariosg);
                    proyecto.Interfaz.rcomentariosB.add(proyecto.Interfaz.comentariosgB);
                    proyecto.Interfaz.rvariables.add(proyecto.Interfaz.variablesg);
                    proyecto.Interfaz.rvariablesB.add(proyecto.Interfaz.variablesgB);
                    proyecto.Interfaz.rmetodos.add(proyecto.Interfaz.metodosg);
                    proyecto.Interfaz.rmetodosB.add(proyecto.Interfaz.metodosgB);
                    proyecto.Interfaz.rclases.add(proyecto.Interfaz.clasesg);
                    proyecto.Interfaz.rclasesB.add(proyecto.Interfaz.clasesgB);
                    
                    estadovar = 1;
                    i = archivos.size();
                }
            }

            if(estadovar == 0){
                archivos.add(nombre);
            }

        }
        
    }

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1, proyecto.Interfaz.nombrearchivo);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1, proyecto.Interfaz.nombrearchivo);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String llaveiz, llaveder, puntocoma, pariz, parder, coma, igual, dpuntos, coriz, corder, dolar, definirglobales, generarreporteestadistico, compare, stringvar, doublevar, graficabarras, titulo, ejex, valores, titulox, tituloy, graficapie, graficalineas, archivo, puntajeespecifico, decimal, id, cadena, puntajegeneral;

// no terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, INSTRUCCION, BLOQUEGLOBALES, BLOQUEARCHIVOS, BLOQUEGBARRAS, BLOQUEGPIE, BLOQUEGLINEAS, CUERPOGLOBALES, VARSTRING, VARDOUBLE, CUERPOGBARRAS, BTITULO, BEJEX, BVALORES, BTITULOX, BTITULOY, ARREGLO, ARREGLO2, ARREGLOV, BPUNTAJE, ARREGLOV2, CUERPOGPIE, CUERPOGLINEAS, BARCHIVO;

//precedence left or;
//precedence left conc;
//precedence left suma, mult, inter;

start with INICIO;

INICIO::= generarreporteestadistico llaveiz INSTRUCCION llaveder{://System.out.println("............................................Ejecutando analisis");:};

INSTRUCCION ::= INSTRUCCION BLOQUEGLOBALES
        | INSTRUCCION BLOQUEARCHIVOS
        | INSTRUCCION BLOQUEGBARRAS
        | INSTRUCCION BLOQUEGPIE
        | INSTRUCCION BLOQUEGLINEAS
        | BLOQUEGLOBALES
        | BLOQUEARCHIVOS
        | BLOQUEGBARRAS
        | BLOQUEGPIE
        | BLOQUEGLINEAS
        |error;

BLOQUEGLOBALES ::= definirglobales llaveiz CUERPOGLOBALES llaveder;

CUERPOGLOBALES ::= CUERPOGLOBALES VARSTRING
                | CUERPOGLOBALES VARDOUBLE
                | VARSTRING
                | VARDOUBLE
                |error;

VARSTRING ::= stringvar id:a igual cadena:b puntocoma {://System.out.println("--- Variable: " + a + " Valor: " + b);
    Addvariable(a,b,"String");:};

VARDOUBLE ::= doublevar id:a igual decimal:b puntocoma {://System.out.println("--- Variable: " + a + " Valor: " + b);
    Addvariable(a,b,"Double");:}
        | doublevar id:a igual BPUNTAJE puntocoma{://System.out.println("--- Variable: " + a + " Valor: " + b);
    Addvariable(a,String.valueOf(proyecto.Interfaz.puntaje),"Double");:};

//BLOQUEARCHIVOS ::= generarreporteestadistico llaveiz CUERPOARCHIVOS llaveder;

//CUERPOARCHIVOS ::= compare pariz cadena:a coma cadena:b parder puntocoma{:System.out.println("--- Archivo A: " + a + " Archivo B: " + b);:};
//Buscar arcivos para luego analizarlos

BLOQUEARCHIVOS ::= compare pariz cadena:a coma cadena:b parder puntocoma{:System.out.println("--- Proyecto A: " + a + " Proyecto B: " + b);
    //proyecto.Interfaz.resetear();
    archivos.clear();
    direccionA=a;
    listar(a);
    listar(b);
    //Metodos para el puntaje

    proyecto.Interfaz.puntajegeneral();
    
    //ejecutar();
    System.out.println("-------------------------------------------------------------------------------------------------------");
    :};


BLOQUEGBARRAS ::= graficabarras llaveiz CUERPOGBARRAS llaveder; 

CUERPOGBARRAS ::= BTITULO BEJEX BVALORES BTITULOX BTITULOY{:System.out.println("--- Generar grafico de barras");
    gbarras(titulografica, titulograficax, titulograficay, "BarChart" + Integer.toString(parser.contgbarras));
    parser.contgbarras++;:}
        |error;
    
BTITULO ::= titulo dpuntos id:a puntocoma {://System.out.println("--- Titulo: " + a);
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            titulografica = proyecto.Interfaz.listavariables.get(i).getvalor();
            i = proyecto.Interfaz.listavariables.size();
        }else{
            //System.out.println("No existe la variable");
        }
    }
    valoresx.add("");
    valoresy.add("");:}
        | titulo dpuntos cadena:a puntocoma{://System.out.println("--- Titulo: " + a);
    titulografica = a;
    valoresx.add("");:};

BEJEX ::= ejex dpuntos coriz ARREGLO corder puntocoma;

ARREGLO ::= cadena:a ARREGLO2 {://System.out.println("--- Valorx: " + a);
    valoresx.set(0,a);:}
        | id:a ARREGLO2{://System.out.println("--- Valorx: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresx.set(0,proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }      
    }
        if(estado == 0){
            valoresx.add("-");
        }:}
        |error;

ARREGLO2 ::= ARREGLO2 coma cadena:a{://System.out.println("--- Valorx: " + a);
    valoresx.add(a);:}
        | ARREGLO2 coma id:a{://System.out.println("--- Valorx: " + a);
        int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresx.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
    if(estado == 0){
            valoresx.add("-");
        }:}
        | coma cadena:a{://System.out.println("--- Valorx: " + a);
    valoresx.add(a);:}
        | coma id:a{://System.out.println("--- Valorx: " + a);
        int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresx.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
        if(estado == 0){
            valoresx.add("-");
        }:};

BVALORES ::= valores dpuntos coriz ARREGLOV corder puntocoma;

ARREGLOV ::= cadena:a ARREGLOV2{://System.out.println("--- Valory: " + a);
    valoresy.set(0,a);:}
        | id:a ARREGLOV2{://System.out.println("--- Valory: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresy.set(0,proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }      
    }
        if(estado == 0){
            valoresy.add("0");
        }:}
        | BPUNTAJE{://System.out.println("--- Valory: PE");
    valoresy.set(0,String.valueOf(proyecto.Interfaz.puntaje));:}
        |error;

BPUNTAJE ::= dolar llaveiz puntajeespecifico coma cadena:a coma cadena:b coma cadena:c llaveder{://System.out.println("--- Valory: " + a);
    //System.out.println("+++++++++++++++++++++++++++" + a);
    //System.out.println("+++++++++++++++++++++++++++" + b);
    //System.out.println("+++++++++++++++++++++++++++" + c);
    proyecto.Interfaz.puntaje = 0;

    if(b.toLowerCase().equals("variable")){
        for(int i=0;i<proyecto.Interfaz.listavariablesjs.size();i++){
                if(proyecto.Interfaz.listavariablesjs.get(i).archivo.equals(a) && proyecto.Interfaz.listavariablesjs.get(i).variable.equals(c)){
                    proyecto.Interfaz.puntaje = 1;
                }
            }
        
    } else if(b.toLowerCase().equals("comentario")){
        for(int i=0;i<proyecto.Interfaz.listacomentariosjs.size();i++){
                if(proyecto.Interfaz.listacomentariosjs.get(i).archivo.equals(a) && proyecto.Interfaz.listacomentariosjs.get(i).comentario.equals(c)){
                    proyecto.Interfaz.puntaje = 1;
                } 
         }
        
    } else if(b.toLowerCase().equals("metodo")){
        for(int i=0;i<proyecto.Interfaz.listametodosjs.size();i++){
                if(proyecto.Interfaz.listametodosjs.get(i).archivo.equals(a) && proyecto.Interfaz.listametodosjs.get(i).metodo.equals(c)){
                    proyecto.Interfaz.puntaje = proyecto.Interfaz.listametodosjs.get(i).id + proyecto.Interfaz.listametodosjs.get(i).parametros + proyecto.Interfaz.listametodosjs.get(i).lineas;
                }
         }
        
        
    } else if(b.toLowerCase().equals("clase")){
        for(int i=0;i<proyecto.Interfaz.listaclasesjs.size();i++){
                if(proyecto.Interfaz.listaclasesjs.get(i).archivo.equals(a) && proyecto.Interfaz.listaclasesjs.get(i).clase.equals(c)){
                    proyecto.Interfaz.puntaje = proyecto.Interfaz.listaclasesjs.get(i).id + proyecto.Interfaz.listaclasesjs.get(i).parametros + proyecto.Interfaz.listaclasesjs.get(i).lineas;
                } 
         }
        
    }
:}
        | dolar llaveiz puntajegeneral llaveder{://System.out.println("--- Valory: " + a);
            //System.out.println("+++++++++++++++++++++" + proyecto.Interfaz.puntajegeneral);
            proyecto.Interfaz.puntaje = proyecto.Interfaz.puntajegeneral;
            //System.out.println("+++++++++++++++++++++" + proyecto.Interfaz.puntaje);
        :};

ARREGLOV2 ::= ARREGLOV2 coma cadena:a {://System.out.println("--- Valory: " + a);
    valoresy.add(a);:}
        | ARREGLOV2 coma id:a {://System.out.println("--- Valory: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresy.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
    if(estado == 0){
            valoresy.add("0");
        }:}
        | ARREGLOV2 coma BPUNTAJE {://System.out.println("--- Valory: PE");
    valoresy.add(String.valueOf(proyecto.Interfaz.puntaje));:}
        | coma cadena:a {://System.out.println("--- Valory: " + a);
    valoresy.add(a);:}
        | coma id:a {://System.out.println("--- Valory: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresy.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
    if(estado == 0){
            valoresy.add("0");
        }:}
        | coma BPUNTAJE{://System.out.println("--- Valory: PE");
    valoresy.add(String.valueOf(proyecto.Interfaz.puntaje));:};

BTITULOX ::= titulox dpuntos cadena:a puntocoma{://System.out.println("--- Titulox: " + a);
    titulograficax = a;:}
        | titulox dpuntos id:a puntocoma{://System.out.println("--- Titulox: " + a);

    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
    if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
        //System.out.println("Existe la variable");
        titulograficax = proyecto.Interfaz.listavariables.get(i).getvalor();
        i = proyecto.Interfaz.listavariables.size();
    }else{
        //System.out.println("No existe la variable");
    }
}:};

BTITULOY ::= tituloy dpuntos cadena:a puntocoma{://System.out.println("--- Tituloy: " + a);
    titulograficay = a;:}
        | tituloy dpuntos id:a puntocoma{://System.out.println("--- Tituloy: " + a);
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
    if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
        //System.out.println("Existe la variable");
        titulograficay = proyecto.Interfaz.listavariables.get(i).getvalor();
        i = proyecto.Interfaz.listavariables.size();
    }else{
        //System.out.println("No existe la variable");
    }
}:};

BLOQUEGPIE ::= graficapie llaveiz CUERPOGPIE llaveder;

CUERPOGPIE ::= BTITULO BEJEX BVALORES{:System.out.println("--- Generar grafico de pie");
    gpie(titulografica,"PieChart" + Integer.toString(parser.contgpie));
    parser.contgpie++;
    :}
        |error;

BLOQUEGLINEAS ::= graficalineas llaveiz CUERPOGLINEAS llaveder;

CUERPOGLINEAS ::= BTITULO BARCHIVO{:System.out.println("--- Generar grafico de lineas");
    glineas(titulografica,"XYChart" + Integer.toString(parser.contglineas), archivo);
    parser.contglineas++;
    //gpie(titulografica,"PieChart" + Integer.toString(parser.contgpie));
    //parser.contgpie++;
    :}
    |error;

BARCHIVO ::= archivo dpuntos id:a puntocoma{://System.out.println("--- Archivo resumen: " + a);
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
    if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
        //System.out.println("Existe la variable");
        //titulograficay = proyecto.Interfaz.listavariables.get(i).getvalor();
        archivo = proyecto.Interfaz.listavariables.get(i).valor;
        i = proyecto.Interfaz.listavariables.size();
    }else{
        //System.out.println("No existe la variable");
    }
}:}
        | archivo dpuntos cadena:a puntocoma{:System.out.println("--- Archivo resumen: " + a);
        archivo = a;
:};
// Resumen del archivo
 


/*LID::= LID comaa nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:}
    | nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:};

INICIO::= EXPRESION:valor {:
    System.out.println(valor);
    //proyecto.Interfaz.list_of_names+=valor;
:};

EXPRESION ::= suma EXPRESION:a EXPRESION:b {:RESULT=a+b;:} // EXPRESION ::= EXPRESION signcon EXPRESION EXPRESION
            | resta EXPRESION:b EXPRESION:a  {:RESULT=a-b;:}
            | mult EXPRESION:a EXPRESION:b {:RESULT=a*b;
                //addNodo("mult",a,b)
            :} // mult EXPRESION:a EXPRESION:b
            | div EXPRESION:b EXPRESION:a {:RESULT=a/b;:}
            | entero:val {:RESULT=new Double(val);:}
            | decimal:val {:RESULT=new Double(val);:}
            // | asteris EXPRESION
            // | mas EXPRESION
            // | punto EXPRESION EXPRESION <=> EXPRESION punto EXPRESION
            ;
*/