
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import java.io.StringReader;
import java.io.FileReader;
import java.io.BufferedReader;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\006\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\007\000\002\013\007\000\002\013\007\000" +
    "\002\005\011\000\002\006\006\000\002\014\007\000\002" +
    "\014\003\000\002\015\006\000\002\015\006\000\002\016" +
    "\010\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\004\000" +
    "\002\023\004\000\002\017\010\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\024\003\000\002\025" +
    "\014\000\002\025\006\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\020\006\000\002\020\006\000\002" +
    "\021\006\000\002\021\006\000\002\007\006\000\002\027" +
    "\005\000\002\027\003\000\002\010\006\000\002\030\004" +
    "\000\002\030\003\000\002\031\006\000\002\031\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\020\005\001\002\000\004\002\222\001" +
    "\002\000\004\004\006\001\002\000\016\003\017\017\022" +
    "\021\010\024\011\032\012\033\021\001\002\000\016\005" +
    "\221\017\022\021\010\024\011\032\012\033\021\001\002" +
    "\000\004\007\206\001\002\000\004\004\161\001\002\000" +
    "\004\004\105\001\002\000\016\005\ufff7\017\ufff7\021\ufff7" +
    "\024\ufff7\032\ufff7\033\ufff7\001\002\000\016\005\ufff6\017" +
    "\ufff6\021\ufff6\024\ufff6\032\ufff6\033\ufff6\001\002\000\016" +
    "\005\ufff9\017\ufff9\021\ufff9\024\ufff9\032\ufff9\033\ufff9\001" +
    "\002\000\016\005\ufff8\017\ufff8\021\ufff8\024\ufff8\032\ufff8" +
    "\033\ufff8\001\002\000\016\005\ufff5\017\ufff5\021\ufff5\024" +
    "\ufff5\032\ufff5\033\ufff5\001\002\000\016\005\ufffa\017\ufffa" +
    "\021\ufffa\024\ufffa\032\ufffa\033\ufffa\001\002\000\004\004" +
    "\063\001\002\000\004\004\023\001\002\000\010\003\024" +
    "\022\030\023\031\001\002\000\010\005\uffef\022\uffef\023" +
    "\uffef\001\002\000\010\005\061\022\030\023\031\001\002" +
    "\000\010\005\ufff1\022\ufff1\023\ufff1\001\002\000\010\005" +
    "\ufff0\022\ufff0\023\ufff0\001\002\000\004\037\054\001\002" +
    "\000\004\037\032\001\002\000\004\012\033\001\002\000" +
    "\006\016\035\036\034\001\002\000\004\006\053\001\002" +
    "\000\004\004\040\001\002\000\004\006\037\001\002\000" +
    "\010\005\uffec\022\uffec\023\uffec\001\002\000\006\035\041" +
    "\041\042\001\002\000\004\011\044\001\002\000\004\005" +
    "\043\001\002\000\010\006\uffd7\011\uffd7\015\uffd7\001\002" +
    "\000\004\040\045\001\002\000\004\011\046\001\002\000" +
    "\004\040\047\001\002\000\004\011\050\001\002\000\004" +
    "\040\051\001\002\000\004\005\052\001\002\000\010\006" +
    "\uffd8\011\uffd8\015\uffd8\001\002\000\010\005\uffed\022\uffed" +
    "\023\uffed\001\002\000\004\012\055\001\002\000\004\040" +
    "\056\001\002\000\004\006\057\001\002\000\010\005\uffee" +
    "\022\uffee\023\uffee\001\002\000\010\005\ufff3\022\ufff3\023" +
    "\ufff3\001\002\000\016\005\ufff4\017\ufff4\021\ufff4\024\ufff4" +
    "\032\ufff4\033\ufff4\001\002\000\010\005\ufff2\022\ufff2\023" +
    "\ufff2\001\002\000\006\003\067\025\066\001\002\000\004" +
    "\034\076\001\002\000\004\005\075\001\002\000\004\013" +
    "\070\001\002\000\004\005\uffc7\001\002\000\006\037\072" +
    "\040\071\001\002\000\004\006\074\001\002\000\004\006" +
    "\073\001\002\000\006\026\uffe7\034\uffe7\001\002\000\006" +
    "\026\uffe6\034\uffe6\001\002\000\016\005\uffc9\017\uffc9\021" +
    "\uffc9\024\uffc9\032\uffc9\033\uffc9\001\002\000\004\013\100" +
    "\001\002\000\004\005\uffc8\001\002\000\006\037\102\040" +
    "\101\001\002\000\004\006\104\001\002\000\004\006\103" +
    "\001\002\000\004\005\uffc6\001\002\000\004\005\uffc5\001" +
    "\002\000\006\003\107\025\066\001\002\000\004\026\112" +
    "\001\002\000\004\005\uffca\001\002\000\004\005\111\001" +
    "\002\000\016\005\uffcc\017\uffcc\021\uffcc\024\uffcc\032\uffcc" +
    "\033\uffcc\001\002\000\004\013\141\001\002\000\004\027" +
    "\115\001\002\000\004\005\uffcb\001\002\000\004\013\116" +
    "\001\002\000\004\014\117\001\002\000\012\003\121\016" +
    "\035\037\124\040\120\001\002\000\004\011\126\001\002" +
    "\000\004\015\uffd9\001\002\000\004\015\136\001\002\000" +
    "\004\015\uffda\001\002\000\004\011\126\001\002\000\006" +
    "\011\132\015\uffdb\001\002\000\010\016\035\037\131\040" +
    "\127\001\002\000\006\011\uffd3\015\uffd3\001\002\000\006" +
    "\011\uffd1\015\uffd1\001\002\000\006\011\uffd2\015\uffd2\001" +
    "\002\000\010\016\035\037\135\040\133\001\002\000\006" +
    "\011\uffd6\015\uffd6\001\002\000\006\011\uffd4\015\uffd4\001" +
    "\002\000\006\011\uffd5\015\uffd5\001\002\000\004\006\137" +
    "\001\002\000\006\005\uffdd\030\uffdd\001\002\000\006\011" +
    "\132\015\uffdc\001\002\000\004\014\142\001\002\000\010" +
    "\003\144\037\146\040\143\001\002\000\004\011\147\001" +
    "\002\000\004\015\uffe2\001\002\000\004\015\156\001\002" +
    "\000\004\011\147\001\002\000\006\037\155\040\154\001" +
    "\002\000\006\011\151\015\uffe3\001\002\000\006\037\153" +
    "\040\152\001\002\000\006\011\uffe1\015\uffe1\001\002\000" +
    "\006\011\uffe0\015\uffe0\001\002\000\006\011\uffdf\015\uffdf" +
    "\001\002\000\006\011\uffde\015\uffde\001\002\000\004\006" +
    "\157\001\002\000\004\027\uffe5\001\002\000\006\011\151" +
    "\015\uffe4\001\002\000\006\003\163\025\066\001\002\000" +
    "\004\026\112\001\002\000\004\005\uffe8\001\002\000\004" +
    "\005\165\001\002\000\016\005\uffea\017\uffea\021\uffea\024" +
    "\uffea\032\uffea\033\uffea\001\002\000\004\027\115\001\002" +
    "\000\004\030\171\001\002\000\004\031\200\001\002\000" +
    "\004\013\172\001\002\000\006\037\174\040\173\001\002" +
    "\000\004\006\176\001\002\000\004\006\175\001\002\000" +
    "\004\031\uffcf\001\002\000\004\031\uffd0\001\002\000\004" +
    "\005\uffe9\001\002\000\004\013\201\001\002\000\006\037" +
    "\203\040\202\001\002\000\004\006\205\001\002\000\004" +
    "\006\204\001\002\000\004\005\uffcd\001\002\000\004\005" +
    "\uffce\001\002\000\004\040\207\001\002\000\004\011\210" +
    "\001\002\000\004\040\211\001\002\000\004\010\212\001" +
    "\002\000\004\006\213\001\002\000\016\005\uffeb\017\uffeb" +
    "\021\uffeb\024\uffeb\032\uffeb\033\uffeb\001\002\000\016\005" +
    "\ufffc\017\ufffc\021\ufffc\024\ufffc\032\ufffc\033\ufffc\001\002" +
    "\000\016\005\ufffb\017\ufffb\021\ufffb\024\ufffb\032\ufffb\033" +
    "\ufffb\001\002\000\016\005\ufffe\017\ufffe\021\ufffe\024\ufffe" +
    "\032\ufffe\033\ufffe\001\002\000\016\005\ufffd\017\ufffd\021" +
    "\ufffd\024\ufffd\032\ufffd\033\ufffd\001\002\000\016\005\uffff" +
    "\017\uffff\021\uffff\024\uffff\032\uffff\033\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\006\004\017\005\014\006\015" +
    "\007\012\010\013\001\001\000\014\004\217\005\215\006" +
    "\216\007\213\010\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\024\012\025\013\026\001\001\000\002\001\001" +
    "\000\006\012\057\013\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\063" +
    "\030\064\001\001\000\004\031\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\105" +
    "\027\107\001\001\000\004\016\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\121\025\122\001\001" +
    "\000\004\026\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\124\001\001\000\002" +
    "\001\001\000\004\025\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\144\001\001\000\004\023\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\163\015\161\001\001\000\004" +
    "\016\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\166\001\001\000\004\020\167" +
    "\001\001\000\004\021\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static String titulografica = "";
    public static String titulograficax = "";
    public static String titulograficay = "";
    public static String direccionA = "";
    public static String archivo = "";
    public static ArrayList<String> valoresx = new ArrayList();
    public static ArrayList<String> valoresy = new ArrayList();
    public static ArrayList<String> archivos = new ArrayList();
    public static int contgbarras = 1;
    public static int contgpie = 1;
    public static int contglineas = 1;
    
// Grafica de barras
    public static void gbarras(String titulo, String titulox, String tituloy, String nombre) throws IOException{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        //double [ ] edad = {0.8, 0.7, 0, 0, 0.6, 0.9};
        
        //String [ ] nombre = {"Fernando", "Marz", "Jade", "Juan", "Maria", "Pedro"};

        /*for(int i = 0; i < valoresx.size(); i++){
            System.out.println(valoresx.get(i) + " " + valoresy.get(i));
        }*/
        
        for(int i = 0; i < valoresx.size(); i++){
            dataset.setValue(Double.parseDouble(valoresy.get(i)), "", valoresx.get(i));
        }
        
        JFreeChart chart = ChartFactory.createBarChart(
                titulo, // Titulo
                titulox, // Titulo ejex
                tituloy, // Titulo ejey
                dataset, 
                PlotOrientation.VERTICAL,
                true, 
                false, 
                false
        );
        
        //Mostramos la grafica en pantalla
        /*ChartFrame frame = new ChartFrame("Ejemplo Grafica de Barras", chart);
        frame.pack();
        frame.setVisible(true);*/


        //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File BarChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( BarChart , chart , width , height );

        proyecto.Interfaz.barrasr.add(nombre + ".jpeg");

        valoresx.clear();
        valoresy.clear();

    }

// Grafica de pie
    public static void gpie(String titulo, String nombre) throws IOException{
        DefaultPieDataset pieDataset = new DefaultPieDataset();

        double valortotal = 0;
        for(int i = 0; i < valoresy.size(); i++){
            //System.out.println(valoresy.get(i));
            valortotal = valortotal + Double.parseDouble(valoresy.get(i));
        }
        
        System.out.println(valortotal);

        double nuevovalor = 0;
        for(int i = 0; i < valoresy.size(); i++){
            //System.out.println(valoresy.get(i));
            nuevovalor = Double.parseDouble(valoresy.get(i)) * 100 / valortotal;
            valoresy.set(i,String.valueOf(nuevovalor));
            //System.out.println(valoresy.get(i));
        }
        
        for(int i = 0; i < valoresx.size(); i++){
            pieDataset.setValue(valoresx.get(i), Double.parseDouble(valoresy.get(i)));
        }

        /*pieDataset.setValue("PSOE", new Integer(31));
        pieDataset.setValue("PP", new Integer(34));
        pieDataset.setValue("PODEMOS", new Integer(25));
        pieDataset.setValue("IU", new Integer(8));
        pieDataset.setValue("Otros", new Integer(3));*/
        
        JFreeChart chart = ChartFactory.createPieChart(
                titulo,
                pieDataset,
                true,
                true,
                false
        );

        //Mostramos la grafica en pantalla
        /*ChartFrame frame = new ChartFrame("Ejemplo Grafica Circular", chart);
        frame.pack();
        frame.setVisible(true);*/

         //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File PieChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( PieChart , chart , width , height );

        proyecto.Interfaz.pier.add(nombre + ".jpeg");

        valoresx.clear();
        valoresy.clear();

    }

// Grafica de lineas
    public static void glineas(String titulo, String nombre, String archivo) throws IOException{
        int indice = 0;
        int estado = 0;
        for(int i=0;i<proyecto.Interfaz.archivosproyecto.size();i++){
            if(archivo.equals(proyecto.Interfaz.archivosproyecto.get(i))){
                indice = i;
                estado = 1;
                i = proyecto.Interfaz.archivosproyecto.size();
            } else{
                String[] partes = proyecto.Interfaz.archivosproyecto.get(i).split("\\.");
                if(archivo.equals(partes[0])){     
                    indice = i;
                    estado = 1;
                    i = proyecto.Interfaz.archivosproyecto.size();
                }
            }
        }


        final XYSeries serie1 = new XYSeries("Fernando Alonso");
        if(estado == 1){
            
            serie1.add(1, proyecto.Interfaz.rvariables.get(indice));
            serie1.add(2, proyecto.Interfaz.rmetodos.get(indice));
            serie1.add(3, proyecto.Interfaz.rclases.get(indice));
            serie1.add(4, proyecto.Interfaz.rcomentarios.get(indice));
        }
	
		
	final XYSeries serie2 = new XYSeries("Jaime Alguersuari");

        if(estado == 1){
            
            serie2.add(1, proyecto.Interfaz.rvariablesB.get(indice));
            serie2.add(2, proyecto.Interfaz.rmetodosB.get(indice));
            serie2.add(3, proyecto.Interfaz.rclasesB.get(indice));
            serie2.add(4, proyecto.Interfaz.rcomentariosB.get(indice));
        }
	
		
	final XYSeriesCollection collection = new XYSeriesCollection();
	collection.addSeries(serie1);
	collection.addSeries(serie2);
        
        JFreeChart chart = 
        ChartFactory.createXYLineChart(titulo,  
        "1.variables  2.metodos  3.clases  4.comentarios","Numero",collection,PlotOrientation.VERTICAL,
        false,
        false, 
        true                // Show legend
        );
        
        //Mostramos la grafica en pantalla
        /*ChartFrame frame = new ChartFrame("Ejemplo Grafica Circular", chart);
        frame.pack();
        frame.setVisible(true);*/

        //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File XYChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( XYChart , chart , width , height );

        proyecto.Interfaz.lineasr.add(nombre + ".jpeg");

    } 

// Variables globales del lenguaje fca
    public void Addvariable(String variable, String valor, String tipo){
        variables nuevov= new variables(variable, valor, tipo);
        
        int estadovar = 0;
        //System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!111" + nuevov.variable);
        if(proyecto.Interfaz.listavariables.size() <= 0){
            proyecto.Interfaz.listavariables.add(nuevov);
        }else{
            for(int i=0;i<proyecto.Interfaz.listavariables.size();i++){
                if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(nuevov.variable)){
                    estadovar = 1;
                    i = proyecto.Interfaz.listavariables.size();
                }
            }

            if(estadovar == 0){
                proyecto.Interfaz.listavariables.add(nuevov);
            }

        }
        

        
    }

// Ejecutar analizadores para el lenguaje javascript
    public void ejecutar(String direccion){

        try {
            File archivo = null;
            FileReader fr = null;
            BufferedReader br = null;

            //archivo = new File ("C:\\Users\\Fernando Armira\\Documents\\pruebajs.txt");
            archivo = new File (direccion);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea = br.readLine();

            String texto = "";

            while(linea != null){
                texto = texto + linea + "\n";
                linea = br.readLine();     
            }

            analizadores2.parser sintactico;
            sintactico = new analizadores2.parser(new analizadores2.Lexico(new StringReader(texto)));
            sintactico.parse();            
        } catch (Exception e) {
        }

    }

    public void listar(String direccion){
        File carpeta = new File(direccion);
        String[] listado = carpeta.list();
        if (listado == null || listado.length == 0) {
            System.out.println("No hay elementos dentro de la carpeta actual");
        return;
        }
        else {
            for (int i=0; i< listado.length; i++) {
                System.out.println(listado[i]);
                samename(direccion, listado[i]);
            }
        }
    }

    public void samename(String direccion, String nombre){
        int estadovar = 0;
        //System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!111" + nuevov.variable);
        if(archivos.size() <= 0){
            archivos.add(nombre);
        }else{
            for(int i=0;i<archivos.size();i++){
                if(archivos.get(i).equals(nombre)){
                    System.out.println("Archivo con el mismo nombre: " + nombre);
                    //System.out.println("Analizar: " + direccionA+nombre);
                    
                    proyecto.Interfaz.variablestemp.clear();
                    proyecto.Interfaz.comentariostemp.clear();
                    proyecto.Interfaz.metodostempA.clear();
                    proyecto.Interfaz.metodosparamtempA.clear();
                    proyecto.Interfaz.metodoslineastempA.clear();
                    proyecto.Interfaz.archivometodosA.clear();
                    proyecto.Interfaz.metodostempB.clear();
                    proyecto.Interfaz.metodosparamtempB.clear();
                    proyecto.Interfaz.metodoslineastempB.clear();
                    proyecto.Interfaz.archivometodosB.clear();
                    proyecto.Interfaz.clasestempA.clear();
                    proyecto.Interfaz.claseslineastempA.clear();
                    proyecto.Interfaz.clasesmetodostempA.clear();
                    proyecto.Interfaz.archivoclasesA.clear();
                    proyecto.Interfaz.clasestempB.clear();
                    proyecto.Interfaz.claseslineastempB.clear();
                    proyecto.Interfaz.clasesmetodostempB.clear();
                    proyecto.Interfaz.archivoclasesB.clear();
                    
                    proyecto.Interfaz.nombrearchivojs = nombre;
                    proyecto.Interfaz.archivoa = true;
                    ejecutar(direccionA+ "\\" +nombre);
                    proyecto.Interfaz.archivoa = false;
                    ejecutar(direccion+ "\\" + nombre);

                    proyecto.Interfaz.puntajemetodos();
                    proyecto.Interfaz.puntajeclases();

                    proyecto.Interfaz.archivosproyecto.add(nombre);

                    proyecto.Interfaz.rcomentarios.add(proyecto.Interfaz.comentariosg);
                    proyecto.Interfaz.rcomentariosB.add(proyecto.Interfaz.comentariosgB);
                    proyecto.Interfaz.rvariables.add(proyecto.Interfaz.variablesg);
                    proyecto.Interfaz.rvariablesB.add(proyecto.Interfaz.variablesgB);
                    proyecto.Interfaz.rmetodos.add(proyecto.Interfaz.metodosg);
                    proyecto.Interfaz.rmetodosB.add(proyecto.Interfaz.metodosgB);
                    proyecto.Interfaz.rclases.add(proyecto.Interfaz.clasesg);
                    proyecto.Interfaz.rclasesB.add(proyecto.Interfaz.clasesgB);
                    
                    estadovar = 1;
                    i = archivos.size();
                }
            }

            if(estadovar == 0){
                archivos.add(nombre);
            }

        }
        
    }

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1, proyecto.Interfaz.nombrearchivo);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1, proyecto.Interfaz.nombrearchivo);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= generarreporteestadistico llaveiz INSTRUCCION llaveder 
            {
              Nodo RESULT =null;
		//System.out.println("............................................Ejecutando analisis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION BLOQUEGLOBALES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION BLOQUEARCHIVOS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION BLOQUEGBARRAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION BLOQUEGPIE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION BLOQUEGLINEAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= BLOQUEGLOBALES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= BLOQUEARCHIVOS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= BLOQUEGBARRAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= BLOQUEGPIE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= BLOQUEGLINEAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUEGLOBALES ::= definirglobales llaveiz CUERPOGLOBALES llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEGLOBALES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPOGLOBALES ::= CUERPOGLOBALES VARSTRING 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLOBALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPOGLOBALES ::= CUERPOGLOBALES VARDOUBLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLOBALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPOGLOBALES ::= VARSTRING 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLOBALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPOGLOBALES ::= VARDOUBLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLOBALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPOGLOBALES ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLOBALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARSTRING ::= stringvar id igual cadena puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Variable: " + a + " Valor: " + b);
    Addvariable(a,b,"String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARSTRING",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARDOUBLE ::= doublevar id igual decimal puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Variable: " + a + " Valor: " + b);
    Addvariable(a,b,"Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARDOUBLE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARDOUBLE ::= doublevar id igual BPUNTAJE puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		//System.out.println("--- Variable: " + a + " Valor: " + b);
    Addvariable(a,String.valueOf(proyecto.Interfaz.puntaje),"Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARDOUBLE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUEARCHIVOS ::= compare pariz cadena coma cadena parder puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("--- Proyecto A: " + a + " Proyecto B: " + b);
    //proyecto.Interfaz.resetear();
    archivos.clear();
    direccionA=a;
    listar(a);
    listar(b);
    //Metodos para el puntaje

    proyecto.Interfaz.puntajegeneral();
    
    //ejecutar();
    System.out.println("-------------------------------------------------------------------------------------------------------");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEARCHIVOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUEGBARRAS ::= graficabarras llaveiz CUERPOGBARRAS llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEGBARRAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPOGBARRAS ::= BTITULO BEJEX BVALORES BTITULOX BTITULOY 
            {
              Nodo RESULT =null;
		System.out.println("--- Generar grafico de barras");
    gbarras(titulografica, titulograficax, titulograficay, "BarChart" + Integer.toString(parser.contgbarras));
    parser.contgbarras++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGBARRAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPOGBARRAS ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGBARRAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BTITULO ::= titulo dpuntos id puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Titulo: " + a);
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            titulografica = proyecto.Interfaz.listavariables.get(i).getvalor();
            i = proyecto.Interfaz.listavariables.size();
        }else{
            //System.out.println("No existe la variable");
        }
    }
    valoresx.add("");
    valoresy.add("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTITULO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BTITULO ::= titulo dpuntos cadena puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Titulo: " + a);
    titulografica = a;
    valoresx.add("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTITULO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BEJEX ::= ejex dpuntos coriz ARREGLO corder puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BEJEX",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARREGLO ::= cadena ARREGLO2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Valorx: " + a);
    valoresx.set(0,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARREGLO ::= id ARREGLO2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Valorx: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresx.set(0,proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }      
    }
        if(estado == 0){
            valoresx.add("-");
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARREGLO ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARREGLO2 ::= ARREGLO2 coma cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valorx: " + a);
    valoresx.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARREGLO2 ::= ARREGLO2 coma id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valorx: " + a);
        int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresx.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
    if(estado == 0){
            valoresx.add("-");
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARREGLO2 ::= coma cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valorx: " + a);
    valoresx.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARREGLO2 ::= coma id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valorx: " + a);
        int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresx.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
        if(estado == 0){
            valoresx.add("-");
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BVALORES ::= valores dpuntos coriz ARREGLOV corder puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BVALORES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARREGLOV ::= cadena ARREGLOV2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Valory: " + a);
    valoresy.set(0,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARREGLOV ::= id ARREGLOV2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Valory: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresy.set(0,proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }      
    }
        if(estado == 0){
            valoresy.add("0");
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARREGLOV ::= BPUNTAJE 
            {
              Nodo RESULT =null;
		//System.out.println("--- Valory: PE");
    valoresy.set(0,String.valueOf(proyecto.Interfaz.puntaje));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARREGLOV ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BPUNTAJE ::= dolar llaveiz puntajeespecifico coma cadena coma cadena coma cadena llaveder 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Valory: " + a);
    //System.out.println("+++++++++++++++++++++++++++" + a);
    //System.out.println("+++++++++++++++++++++++++++" + b);
    //System.out.println("+++++++++++++++++++++++++++" + c);
    proyecto.Interfaz.puntaje = 0;

    if(b.toLowerCase().equals("variable")){
        for(int i=0;i<proyecto.Interfaz.listavariablesjs.size();i++){
                if(proyecto.Interfaz.listavariablesjs.get(i).archivo.equals(a) && proyecto.Interfaz.listavariablesjs.get(i).variable.equals(c)){
                    proyecto.Interfaz.puntaje = 1;
                }
            }
        
    } else if(b.toLowerCase().equals("comentario")){
        for(int i=0;i<proyecto.Interfaz.listacomentariosjs.size();i++){
                if(proyecto.Interfaz.listacomentariosjs.get(i).archivo.equals(a) && proyecto.Interfaz.listacomentariosjs.get(i).comentario.equals(c)){
                    proyecto.Interfaz.puntaje = 1;
                } 
         }
        
    } else if(b.toLowerCase().equals("metodo")){
        for(int i=0;i<proyecto.Interfaz.listametodosjs.size();i++){
                if(proyecto.Interfaz.listametodosjs.get(i).archivo.equals(a) && proyecto.Interfaz.listametodosjs.get(i).metodo.equals(c)){
                    proyecto.Interfaz.puntaje = proyecto.Interfaz.listametodosjs.get(i).id + proyecto.Interfaz.listametodosjs.get(i).parametros + proyecto.Interfaz.listametodosjs.get(i).lineas;
                }
         }
        
        
    } else if(b.toLowerCase().equals("clase")){
        for(int i=0;i<proyecto.Interfaz.listaclasesjs.size();i++){
                if(proyecto.Interfaz.listaclasesjs.get(i).archivo.equals(a) && proyecto.Interfaz.listaclasesjs.get(i).clase.equals(c)){
                    proyecto.Interfaz.puntaje = proyecto.Interfaz.listaclasesjs.get(i).id + proyecto.Interfaz.listaclasesjs.get(i).parametros + proyecto.Interfaz.listaclasesjs.get(i).lineas;
                } 
         }
        
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BPUNTAJE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BPUNTAJE ::= dolar llaveiz puntajegeneral llaveder 
            {
              Nodo RESULT =null;
		//System.out.println("--- Valory: " + a);
            //System.out.println("+++++++++++++++++++++" + proyecto.Interfaz.puntajegeneral);
            proyecto.Interfaz.puntaje = proyecto.Interfaz.puntajegeneral;
            //System.out.println("+++++++++++++++++++++" + proyecto.Interfaz.puntaje);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BPUNTAJE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARREGLOV2 ::= ARREGLOV2 coma cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valory: " + a);
    valoresy.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARREGLOV2 ::= ARREGLOV2 coma id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valory: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresy.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
    if(estado == 0){
            valoresy.add("0");
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARREGLOV2 ::= ARREGLOV2 coma BPUNTAJE 
            {
              Nodo RESULT =null;
		//System.out.println("--- Valory: PE");
    valoresy.add(String.valueOf(proyecto.Interfaz.puntaje));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARREGLOV2 ::= coma cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valory: " + a);
    valoresy.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARREGLOV2 ::= coma id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("--- Valory: " + a);
    int estado = 0;
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
        if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
            //System.out.println("Existe la variable");
            valoresy.add(proyecto.Interfaz.listavariables.get(i).getvalor());
            i = proyecto.Interfaz.listavariables.size();
            estado = 1;
        }else{
            //System.out.println("No existe la variable");
        }
    }
    if(estado == 0){
            valoresy.add("0");
        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARREGLOV2 ::= coma BPUNTAJE 
            {
              Nodo RESULT =null;
		//System.out.println("--- Valory: PE");
    valoresy.add(String.valueOf(proyecto.Interfaz.puntaje));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLOV2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BTITULOX ::= titulox dpuntos cadena puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Titulox: " + a);
    titulograficax = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTITULOX",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BTITULOX ::= titulox dpuntos id puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Titulox: " + a);

    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
    if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
        //System.out.println("Existe la variable");
        titulograficax = proyecto.Interfaz.listavariables.get(i).getvalor();
        i = proyecto.Interfaz.listavariables.size();
    }else{
        //System.out.println("No existe la variable");
    }
}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTITULOX",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BTITULOY ::= tituloy dpuntos cadena puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Tituloy: " + a);
    titulograficay = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTITULOY",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BTITULOY ::= tituloy dpuntos id puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Tituloy: " + a);
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
    if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
        //System.out.println("Existe la variable");
        titulograficay = proyecto.Interfaz.listavariables.get(i).getvalor();
        i = proyecto.Interfaz.listavariables.size();
    }else{
        //System.out.println("No existe la variable");
    }
}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BTITULOY",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUEGPIE ::= graficapie llaveiz CUERPOGPIE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEGPIE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOGPIE ::= BTITULO BEJEX BVALORES 
            {
              Nodo RESULT =null;
		System.out.println("--- Generar grafico de pie");
    gpie(titulografica,"PieChart" + Integer.toString(parser.contgpie));
    parser.contgpie++;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGPIE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOGPIE ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGPIE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUEGLINEAS ::= graficalineas llaveiz CUERPOGLINEAS llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEGLINEAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPOGLINEAS ::= BTITULO BARCHIVO 
            {
              Nodo RESULT =null;
		System.out.println("--- Generar grafico de lineas");
    glineas(titulografica,"XYChart" + Integer.toString(parser.contglineas), archivo);
    parser.contglineas++;
    //gpie(titulografica,"PieChart" + Integer.toString(parser.contgpie));
    //parser.contgpie++;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLINEAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPOGLINEAS ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOGLINEAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BARCHIVO ::= archivo dpuntos id puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("--- Archivo resumen: " + a);
    for(int i = 0; i < proyecto.Interfaz.listavariables.size(); i++){
    if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(a) == true){
        //System.out.println("Existe la variable");
        //titulograficay = proyecto.Interfaz.listavariables.get(i).getvalor();
        archivo = proyecto.Interfaz.listavariables.get(i).valor;
        i = proyecto.Interfaz.listavariables.size();
    }else{
        //System.out.println("No existe la variable");
    }
}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARCHIVO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BARCHIVO ::= archivo dpuntos cadena puntocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("--- Archivo resumen: " + a);
        archivo = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARCHIVO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
