
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores2;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\005" +
    "\006\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\010\011\000\002\010\012" +
    "\000\002\010\012\000\002\010\013\000\002\011\003\000" +
    "\002\013\006\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\012\003\000\002\014\006\000\002\015" +
    "\003\000\002\016\006\000\002\017\004\000\002\017\003" +
    "\000\002\020\012\000\002\021\011\000\002\022\007\000" +
    "\002\024\003\000\002\024\003\000\002\026\005\000\002" +
    "\025\005\000\002\025\005\000\002\023\003\000\002\027" +
    "\011\000\002\031\003\000\002\030\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\036\004\026\005\007\006\023\007\006\012" +
    "\027\013\024\014\017\015\022\016\014\017\025\026\013" +
    "\030\012\033\033\034\034\001\002\000\044\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\011\202\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\023\uffe8\026\uffe8\030" +
    "\uffe8\033\uffe8\034\uffe8\001\002\000\040\002\000\004\026" +
    "\005\007\006\023\007\006\012\027\013\024\014\017\015" +
    "\022\016\014\017\025\026\013\030\012\033\033\034\034" +
    "\001\002\000\054\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\033\uffdc\034\uffdc\001\002\000\054\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9" +
    "\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9\034" +
    "\uffd9\001\002\000\042\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\023\uffe9\026\uffe9\030\uffe9\033\uffe9\034\uffe9\001\002" +
    "\000\004\006\172\001\002\000\004\020\146\001\002\000" +
    "\004\020\143\001\002\000\054\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\033\uffd7\034\uffd7\001\002\000" +
    "\044\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\142" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\023" +
    "\uffe6\026\uffe6\030\uffe6\033\uffe6\034\uffe6\001\002\000\042" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\023\uffeb\026\uffeb" +
    "\030\uffeb\033\uffeb\034\uffeb\001\002\000\004\006\uffe2\001" +
    "\002\000\044\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\011\141\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\023\uffed\026\uffed\030\uffed\033\uffed\034\uffed\001\002" +
    "\000\044\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011" +
    "\140\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\023\uffe7\026\uffe7\030\uffe7\033\uffe7\034\uffe7\001\002\000" +
    "\054\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\033\uffd8\034\uffd8\001\002\000\046\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\136\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\023\uffdb\026\uffdb\030" +
    "\uffdb\033\uffdb\034\uffdb\001\002\000\004\006\uffe3\001\002" +
    "\000\004\020\105\001\002\000\054\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\033\uffda\034\uffda\001\002" +
    "\000\004\006\uffe4\001\002\000\042\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\023\uffea\026\uffea\030\uffea\033\uffea\034" +
    "\uffea\001\002\000\044\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\011\104\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\023\uffec\026\uffec\030\uffec\033\uffec\034\uffec" +
    "\001\002\000\004\002\103\001\002\000\004\020\075\001" +
    "\002\000\004\022\035\001\002\000\036\004\026\005\007" +
    "\006\023\007\006\012\027\013\024\014\017\015\022\016" +
    "\014\017\025\026\013\030\012\033\033\034\034\001\002" +
    "\000\040\004\026\005\007\006\023\007\006\012\027\013" +
    "\024\014\017\015\022\016\014\017\025\023\uffbd\026\013" +
    "\030\012\033\033\034\034\001\002\000\004\023\040\001" +
    "\002\000\004\033\041\001\002\000\004\020\042\001\002" +
    "\000\016\004\026\005\007\006\045\007\006\015\022\016" +
    "\014\001\002\000\004\021\057\001\002\000\010\010\046" +
    "\024\047\027\050\001\002\000\054\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\023\uffdb\024" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\033\uffdb\034\uffdb\001\002" +
    "\000\004\010\055\001\002\000\020\004\026\005\007\006" +
    "\045\007\006\010\052\015\022\016\014\001\002\000\016" +
    "\004\026\005\007\006\045\007\006\015\022\016\014\001" +
    "\002\000\006\011\uffcf\021\uffcf\001\002\000\016\004\026" +
    "\005\007\006\045\007\006\015\022\016\014\001\002\000" +
    "\006\011\uffd0\021\uffd0\001\002\000\006\011\uffce\021\uffce" +
    "\001\002\000\016\004\026\005\007\006\045\007\006\015" +
    "\022\016\014\001\002\000\006\011\uffd1\021\uffd1\001\002" +
    "\000\044\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\023\uffbc\026\uffbc\030\uffbc\033\uffbc\034\uffbc\001\002\000" +
    "\044\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\074" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\023" +
    "\ufff5\026\ufff5\030\ufff5\033\ufff5\034\ufff5\001\002\000\042" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\023\ufff6\026\ufff6" +
    "\030\ufff6\033\ufff6\034\ufff6\001\002\000\044\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\011\073\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\023\ufff3\026\ufff3\030" +
    "\ufff3\033\ufff3\034\ufff3\001\002\000\042\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\023\ufff8\026\ufff8\030\ufff8\033\ufff8" +
    "\034\ufff8\001\002\000\044\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\072\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\023\ufff9\026\ufff9\030\ufff9\033\ufff9\034" +
    "\ufff9\001\002\000\044\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\011\071\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\023\ufff4\026\ufff4\030\ufff4\033\ufff4\034\ufff4" +
    "\001\002\000\042\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\023\ufff7\026\ufff7\030\ufff7\033\ufff7\034\ufff7\001\002\000" +
    "\044\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\070" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\023" +
    "\ufffa\026\ufffa\030\ufffa\033\ufffa\034\ufffa\001\002\000\042" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\023\uffff\026\uffff" +
    "\030\uffff\033\uffff\034\uffff\001\002\000\042\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\023\ufffc\026\ufffc\030\ufffc\033" +
    "\ufffc\034\ufffc\001\002\000\042\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\023\ufffe\026\ufffe\030\ufffe\033\ufffe\034\ufffe" +
    "\001\002\000\042\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\023\ufffb\026\ufffb\030\ufffb\033\ufffb\034\ufffb\001\002\000" +
    "\042\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\023\ufffd\026" +
    "\ufffd\030\ufffd\033\ufffd\034\ufffd\001\002\000\016\004\026" +
    "\005\007\006\045\007\006\015\022\016\014\001\002\000" +
    "\004\021\077\001\002\000\004\022\100\001\002\000\036" +
    "\004\026\005\007\006\023\007\006\012\027\013\024\014" +
    "\017\015\022\016\014\017\025\026\013\030\012\033\033" +
    "\034\034\001\002\000\004\023\102\001\002\000\042\002" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\023\uffbe\026\uffbe\030" +
    "\uffbe\033\uffbe\034\uffbe\001\002\000\004\002\001\001\002" +
    "\000\042\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\023\ufff1" +
    "\026\ufff1\030\ufff1\033\ufff1\034\ufff1\001\002\000\016\004" +
    "\026\005\007\006\045\007\006\015\022\016\014\001\002" +
    "\000\004\021\uffd2\001\002\000\004\021\110\001\002\000" +
    "\004\022\111\001\002\000\036\004\026\005\007\006\023" +
    "\007\006\012\027\013\024\014\017\015\022\016\014\017" +
    "\025\026\013\030\012\033\033\034\034\001\002\000\040" +
    "\004\026\005\007\006\023\007\006\012\027\013\024\014" +
    "\017\015\022\016\014\017\025\023\uffcd\026\013\030\012" +
    "\033\033\034\034\001\002\000\004\023\114\001\002\000" +
    "\044\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\023\uffd6\025" +
    "\117\026\uffd6\030\uffd6\033\uffd6\034\uffd6\001\002\000\044" +
    "\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\023\uffd4\025\117" +
    "\026\uffd4\030\uffd4\033\uffd4\034\uffd4\001\002\000\042\002" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\023\uffd5\026\uffd5\030" +
    "\uffd5\033\uffd5\034\uffd5\001\002\000\006\017\122\022\121" +
    "\001\002\000\044\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\023\uffc8\025\uffc8\026\uffc8\030\uffc8\033\uffc8\034\uffc8\001" +
    "\002\000\036\004\026\005\007\006\023\007\006\012\027" +
    "\013\024\014\017\015\022\016\014\017\025\026\013\030" +
    "\012\033\033\034\034\001\002\000\004\020\123\001\002" +
    "\000\016\004\026\005\007\006\045\007\006\015\022\016" +
    "\014\001\002\000\004\021\125\001\002\000\004\022\126" +
    "\001\002\000\036\004\026\005\007\006\023\007\006\012" +
    "\027\013\024\014\017\015\022\016\014\017\025\026\013" +
    "\030\012\033\033\034\034\001\002\000\004\023\130\001" +
    "\002\000\044\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\023" +
    "\uffc7\025\uffc7\026\uffc7\030\uffc7\033\uffc7\034\uffc7\001\002" +
    "\000\040\004\026\005\007\006\023\007\006\012\027\013" +
    "\024\014\017\015\022\016\014\017\025\023\uffcb\026\013" +
    "\030\012\033\033\034\034\001\002\000\004\023\133\001" +
    "\002\000\042\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\023" +
    "\uffcc\026\uffcc\030\uffcc\033\uffcc\034\uffcc\001\002\000\042" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\023\uffd3\026\uffd3" +
    "\030\uffd3\033\uffd3\034\uffd3\001\002\000\044\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\023\uffc9\025\uffc9\026\uffc9\030" +
    "\uffc9\033\uffc9\034\uffc9\001\002\000\016\004\026\005\007" +
    "\006\045\007\006\015\022\016\014\001\002\000\044\002" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\023\uffc2\026" +
    "\uffc2\030\uffc2\033\uffc2\034\uffc2\001\002\000\042\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\023\uffef\026\uffef\030\uffef" +
    "\033\uffef\034\uffef\001\002\000\042\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\023\ufff2\026\ufff2\030\ufff2\033\ufff2\034" +
    "\ufff2\001\002\000\042\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\023\uffee\026\uffee\030\uffee\033\uffee\034\uffee\001\002" +
    "\000\016\004\026\005\007\006\045\007\006\015\022\016" +
    "\014\001\002\000\004\021\145\001\002\000\044\002\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\023\uffca\026\uffca" +
    "\030\uffca\033\uffca\034\uffca\001\002\000\012\006\147\012" +
    "\027\013\024\014\017\001\002\000\004\010\136\001\002" +
    "\000\004\011\uffc4\001\002\000\004\011\uffc3\001\002\000" +
    "\004\021\165\001\002\000\004\011\154\001\002\000\016" +
    "\004\026\005\007\006\045\007\006\015\022\016\014\001" +
    "\002\000\004\011\156\001\002\000\004\006\160\001\002" +
    "\000\004\021\uffc5\001\002\000\006\031\161\032\162\001" +
    "\002\000\004\031\164\001\002\000\004\032\163\001\002" +
    "\000\004\021\uffc0\001\002\000\004\021\uffc1\001\002\000" +
    "\004\022\166\001\002\000\036\004\026\005\007\006\023" +
    "\007\006\012\027\013\024\014\017\015\022\016\014\017" +
    "\025\026\013\030\012\033\033\034\034\001\002\000\040" +
    "\004\026\005\007\006\023\007\006\012\027\013\024\014" +
    "\017\015\022\016\014\017\025\023\uffbf\026\013\030\012" +
    "\033\033\034\034\001\002\000\004\023\171\001\002\000" +
    "\042\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\023\uffc6\026" +
    "\uffc6\030\uffc6\033\uffc6\034\uffc6\001\002\000\004\010\173" +
    "\001\002\000\014\004\176\005\174\007\175\015\177\016" +
    "\200\001\002\000\044\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\023\uffe0\026\uffe0\030\uffe0\033\uffe0\034\uffe0" +
    "\001\002\000\044\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\023\uffdf\026\uffdf\030\uffdf\033\uffdf\034\uffdf\001" +
    "\002\000\044\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\023\uffe1\026\uffe1\030\uffe1\033\uffe1\034\uffe1\001\002" +
    "\000\044\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\023\uffde\026\uffde\030\uffde\033\uffde\034\uffde\001\002\000" +
    "\044\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\023" +
    "\uffdd\026\uffdd\030\uffdd\033\uffdd\034\uffdd\001\002\000\044" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\023\uffe5" +
    "\026\uffe5\030\uffe5\033\uffe5\034\uffe5\001\002\000\042\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\023\ufff0\026\ufff0\030" +
    "\ufff0\033\ufff0\034\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\030\002\031\003\004\004\030\005\017\006" +
    "\010\010\015\016\003\021\027\026\020\027\007\030\014" +
    "\001\001\000\002\001\001\000\024\004\066\005\063\006" +
    "\010\010\062\016\057\021\065\026\064\027\060\030\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\035\004\030\005\017\006\010" +
    "\010\015\016\003\021\027\026\020\027\007\030\014\031" +
    "\036\001\001\000\024\004\066\005\063\006\010\010\062" +
    "\016\057\021\065\026\064\027\060\030\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\043\013\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\052" +
    "\001\001\000\004\004\050\001\001\000\002\001\001\000" +
    "\004\004\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\043\013\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\035\004\030\005\017\006" +
    "\010\010\015\016\003\021\027\026\020\027\007\030\014" +
    "\031\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\043\011\106" +
    "\013\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\111\004\030\005\017\006\010" +
    "\010\015\012\112\016\003\021\027\026\020\027\007\030" +
    "\014\001\001\000\024\004\066\005\063\006\010\010\062" +
    "\016\057\021\065\026\064\027\060\030\061\001\001\000" +
    "\002\001\001\000\010\014\115\017\114\020\117\001\001" +
    "\000\006\014\133\020\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\130\004\030" +
    "\005\017\006\010\010\015\015\131\016\003\021\027\026" +
    "\020\027\007\030\014\001\001\000\002\001\001\000\010" +
    "\004\043\011\123\013\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\111\004\030\005\017\006\010" +
    "\010\015\012\126\016\003\021\027\026\020\027\007\030" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\066\005\063\006\010\010\062\016\057\021\065\026" +
    "\064\027\060\030\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\147\006\010" +
    "\022\151\024\152\026\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\043\013\154\001\001\000\002\001" +
    "\001\000\004\025\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\166" +
    "\004\030\005\017\006\010\010\015\016\003\021\027\023" +
    "\167\026\020\027\007\030\014\001\001\000\024\004\066" +
    "\005\063\006\010\010\062\016\057\021\065\026\064\027" +
    "\060\030\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION EXPRESION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INSTRUCCION EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INSTRUCCION ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INSTRUCCION DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= EXPRESION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIABLES ::= PRVARIABLES id igual VALOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRVARIABLES ::= var 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRVARIABLES ::= let 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRVARIABLES ::= constvar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RELACIONAL ::= EXPRESION igual igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RELACIONAL ::= EXPRESION menorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RELACIONAL ::= EXPRESION menorq igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOIF ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= elsepr llaveiz CUERPOELSE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOELSE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINTCONSOLE ::= imprimir pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSEIF ::= ELSEIF CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSEIF ::= CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSEIF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETTINGFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INICIOFOR ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INICIOFOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION ::= id igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INCFOR ::= id mas mas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INCFOR ::= id menos menos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPOFOR ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPOWHILE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
