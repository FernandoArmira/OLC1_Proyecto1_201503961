
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores2;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\005\006\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\005\000\002\010" +
    "\011\000\002\010\012\000\002\010\012\000\002\010\013" +
    "\000\002\011\003\000\002\011\003\000\002\013\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\013\005\000\002\013\006\000\002\012\003\000\002\014" +
    "\006\000\002\015\003\000\002\016\006\000\002\017\004" +
    "\000\002\017\003\000\002\020\012\000\002\021\011\000" +
    "\002\022\007\000\002\024\003\000\002\024\003\000\002" +
    "\026\005\000\002\025\005\000\002\025\005\000\002\023" +
    "\003\000\002\027\011\000\002\027\011\000\002\031\003" +
    "\000\002\030\012\000\002\030\012\000\002\032\012\000" +
    "\002\033\011\000\002\033\010\000\002\035\003\000\002" +
    "\034\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\004\000\002\036\005\000\002\036\005\000\002\036\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\044\004\032\005\007\006\025\007\006\012" +
    "\033\013\026\014\020\015\024\016\014\017\031\020\030" +
    "\026\013\030\012\032\021\033\040\034\037\035\027\001" +
    "\002\000\054\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\011\305\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\023\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\037\uffe6\001\002\000\046\002\000\004" +
    "\032\005\007\006\025\007\006\012\033\013\026\014\020" +
    "\015\024\016\014\017\031\020\030\026\013\030\012\032" +
    "\021\033\040\034\037\035\027\001\002\000\106\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\001\002\000\106\002\uffd6\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000\052\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8\026" +
    "\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8" +
    "\001\002\000\004\006\275\001\002\000\004\020\251\001" +
    "\002\000\004\020\246\001\002\000\106\002\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\001" +
    "\002\000\052\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\023\uffe7\026\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\037\uffe7\001\002\000\054\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\011\245\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\026\uffe4\030" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\001\002" +
    "\000\052\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\023\uffea\026\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\037\uffea\001\002\000\004\006\uffdf\001\002\000\022" +
    "\004\032\005\007\006\042\007\006\015\024\016\014\020" +
    "\030\032\021\001\002\000\054\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\011\243\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\023\uffec\026\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\001\002\000" +
    "\054\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\242" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\023\uffe5\026\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\037\uffe5\001\002\000\106\002\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\037\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002" +
    "\000\070\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\240\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\023\uffd8\026\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\001\002\000\004\006\uffe0\001\002\000" +
    "\004\020\211\001\002\000\022\004\032\005\007\006\042" +
    "\007\006\015\024\016\014\020\030\032\021\001\002\000" +
    "\004\020\155\001\002\000\106\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000" +
    "\004\006\uffe1\001\002\000\052\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\023\uffe9\026\uffe9\030\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\037\uffe9\001\002\000\066\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\154\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\023" +
    "\uffeb\026\uffeb\030\uffeb\031\060\032\051\033\uffeb\034\uffeb" +
    "\035\uffeb\037\uffeb\046\056\047\054\050\047\051\050\001" +
    "\002\000\004\002\153\001\002\000\004\022\142\001\002" +
    "\000\004\020\041\001\002\000\024\004\032\005\007\006" +
    "\042\007\006\015\024\016\014\020\030\032\021\045\045" +
    "\001\002\000\106\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002\000\004\021\136" +
    "\001\002\000\010\021\107\043\110\044\106\001\002\000" +
    "\022\004\032\005\007\006\042\007\006\015\024\016\014" +
    "\020\030\032\021\001\002\000\032\010\061\024\052\027" +
    "\053\031\060\032\051\042\062\043\055\044\057\046\056" +
    "\047\054\050\047\051\050\001\002\000\022\004\032\005" +
    "\007\006\042\007\006\015\024\016\014\020\030\032\021" +
    "\001\002\000\022\004\032\005\007\006\042\007\006\015" +
    "\024\016\014\020\030\032\021\001\002\000\022\004\032" +
    "\005\007\006\042\007\006\015\024\016\014\020\030\032" +
    "\021\001\002\000\024\004\032\005\007\006\042\007\006" +
    "\010\077\015\024\016\014\020\030\032\021\001\002\000" +
    "\022\004\032\005\007\006\042\007\006\015\024\016\014" +
    "\020\030\032\021\001\002\000\022\004\032\005\007\006" +
    "\042\007\006\015\024\016\014\020\030\032\021\001\002" +
    "\000\022\004\032\005\007\006\042\007\006\015\024\016" +
    "\014\020\030\032\021\001\002\000\022\004\032\005\007" +
    "\006\042\007\006\015\024\016\014\020\030\032\021\001" +
    "\002\000\022\004\032\005\007\006\042\007\006\015\024" +
    "\016\014\020\030\032\021\001\002\000\022\004\032\005" +
    "\007\006\042\007\006\015\024\016\014\020\030\032\021" +
    "\001\002\000\004\010\066\001\002\000\024\004\032\005" +
    "\007\006\042\007\006\010\064\015\024\016\014\020\030" +
    "\032\021\001\002\000\026\011\uffc1\021\uffc1\031\060\032" +
    "\051\043\uffc1\044\uffc1\046\056\047\054\050\047\051\050" +
    "\001\002\000\022\004\032\005\007\006\042\007\006\015" +
    "\024\016\014\020\030\032\021\001\002\000\026\011\uffc0" +
    "\021\uffc0\031\060\032\051\043\uffc0\044\uffc0\046\056\047" +
    "\054\050\047\051\050\001\002\000\022\004\032\005\007" +
    "\006\042\007\006\015\024\016\014\020\030\032\021\001" +
    "\002\000\026\011\uffc5\021\uffc5\031\060\032\051\043\uffc5" +
    "\044\uffc5\046\056\047\054\050\047\051\050\001\002\000" +
    "\106\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\056\047\054" +
    "\050\047\051\uffd3\001\002\000\020\021\uffa5\031\060\032" +
    "\051\046\056\047\054\050\047\051\050\001\002\000\106" +
    "\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1\047\054\050" +
    "\uffd1\051\uffd1\001\002\000\020\021\uffa6\031\060\032\051" +
    "\046\056\047\054\050\047\051\050\001\002\000\106\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\001\002\000\026\011\uffc4\021\uffc4\031\060\032" +
    "\051\043\uffc4\044\uffc4\046\056\047\054\050\047\051\050" +
    "\001\002\000\026\011\uffc3\021\uffc3\031\060\032\051\043" +
    "\uffc3\044\uffc3\046\056\047\054\050\047\051\050\001\002" +
    "\000\022\004\032\005\007\006\042\007\006\015\024\016" +
    "\014\020\030\032\021\001\002\000\026\011\uffc2\021\uffc2" +
    "\031\060\032\051\043\uffc2\044\uffc2\046\056\047\054\050" +
    "\047\051\050\001\002\000\106\002\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\046\056\047\054\050\047\051\uffd2\001\002\000" +
    "\106\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\023\uffce\024\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\037" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\056\047\054" +
    "\050\047\051\uffce\001\002\000\106\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023" +
    "\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\037\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\046\uffd0\047\054\050\uffd0\051\uffd0\001\002" +
    "\000\004\021\uffa1\001\002\000\030\010\061\021\uffa4\024" +
    "\052\027\053\031\060\032\051\042\062\046\056\047\054" +
    "\050\047\051\050\001\002\000\022\004\032\005\007\006" +
    "\042\007\006\015\024\016\014\020\030\032\021\001\002" +
    "\000\004\022\113\001\002\000\022\004\032\005\007\006" +
    "\042\007\006\015\024\016\014\020\030\032\021\001\002" +
    "\000\004\021\uffa3\001\002\000\026\010\061\024\052\027" +
    "\053\031\060\032\051\042\062\046\056\047\054\050\047" +
    "\051\050\001\002\000\044\004\032\005\007\006\025\007" +
    "\006\012\033\013\026\014\020\015\024\016\014\017\031" +
    "\020\030\026\013\030\012\032\021\033\040\034\037\035" +
    "\027\001\002\000\046\004\032\005\007\006\025\007\006" +
    "\012\033\013\026\014\020\015\024\016\014\017\031\020" +
    "\030\023\uffae\026\013\030\012\032\021\033\040\034\037" +
    "\035\027\001\002\000\004\023\116\001\002\000\052\002" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\023\uffb0\026" +
    "\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0" +
    "\001\002\000\054\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\011\134\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\023\ufff4\026\ufff4\030\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\037\ufff4\001\002\000\052\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\026\ufff6" +
    "\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\001" +
    "\002\000\052\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\023\ufff5\026\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\037\ufff5\001\002\000\054\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\133\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\023\ufff2\026\ufff2\030" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\001\002" +
    "\000\052\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\023\ufff8\026\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\037\ufff8\001\002\000\054\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\011\132\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9\026\ufff9\030\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9\001\002\000" +
    "\054\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\131" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\023\ufff3\026\ufff3\030\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\037\ufff3\001\002\000\052\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\023\ufff7\026\ufff7\030\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\001\002\000\066" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\130\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\023\ufffa\026\ufffa\030\ufffa\031\060\032\051\033\ufffa\034" +
    "\ufffa\035\ufffa\037\ufffa\046\056\047\054\050\047\051\050" +
    "\001\002\000\052\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\023\uffff\026\uffff\030\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\037\uffff\001\002\000\052\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\023\ufffc\026\ufffc\030\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\001\002\000" +
    "\052\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\023" +
    "\ufffe\026\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\037\ufffe\001\002\000\052\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\023\ufffb\026\ufffb\030\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\037\ufffb\001\002\000\052\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\023\ufffd\026\ufffd" +
    "\030\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\037\ufffd\001" +
    "\002\000\004\021\uffa2\001\002\000\004\022\137\001\002" +
    "\000\044\004\032\005\007\006\025\007\006\012\033\013" +
    "\026\014\020\015\024\016\014\017\031\020\030\026\013" +
    "\030\012\032\021\033\040\034\037\035\027\001\002\000" +
    "\004\023\141\001\002\000\052\002\uffaf\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\023\uffaf\026\uffaf\030\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\037\uffaf\001\002\000\044\004" +
    "\032\005\007\006\025\007\006\012\033\013\026\014\020" +
    "\015\024\016\014\017\031\020\030\026\013\030\012\032" +
    "\021\033\040\034\037\035\027\001\002\000\004\023\144" +
    "\001\002\000\004\033\145\001\002\000\004\020\146\001" +
    "\002\000\024\004\032\005\007\006\042\007\006\015\024" +
    "\016\014\020\030\032\021\045\045\001\002\000\004\021" +
    "\152\001\002\000\010\021\151\043\110\044\106\001\002" +
    "\000\054\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\023\uffad\026\uffad\030\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\037\uffad\001\002\000\054\002\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\023\uffac\026\uffac" +
    "\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037\uffac\001" +
    "\002\000\004\002\001\001\002\000\052\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0\026\ufff0\030\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\001\002\000" +
    "\024\004\032\005\007\006\042\007\006\015\024\016\014" +
    "\020\030\032\021\045\045\001\002\000\004\021\uffc6\001" +
    "\002\000\010\021\uffc7\043\110\044\106\001\002\000\004" +
    "\021\161\001\002\000\004\022\162\001\002\000\044\004" +
    "\032\005\007\006\025\007\006\012\033\013\026\014\020" +
    "\015\024\016\014\017\031\020\030\026\013\030\012\032" +
    "\021\033\040\034\037\035\027\001\002\000\046\004\032" +
    "\005\007\006\025\007\006\012\033\013\026\014\020\015" +
    "\024\016\014\017\031\020\030\023\uffbf\026\013\030\012" +
    "\032\021\033\040\034\037\035\027\001\002\000\004\023" +
    "\165\001\002\000\054\002\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\025\170\026\uffcb\030\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\037\uffcb\001\002\000\054\002" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\023\uffc9\025" +
    "\170\026\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\001\002\000\052\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\023\uffca\026\uffca\030\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\037\uffca\001\002\000\006\017\173" +
    "\022\172\001\002\000\054\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\023\uffba\025\uffba\026\uffba\030\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\037\uffba\001\002\000\044" +
    "\004\032\005\007\006\025\007\006\012\033\013\026\014" +
    "\020\015\024\016\014\017\031\020\030\026\013\030\012" +
    "\032\021\033\040\034\037\035\027\001\002\000\004\020" +
    "\174\001\002\000\024\004\032\005\007\006\042\007\006" +
    "\015\024\016\014\020\030\032\021\045\045\001\002\000" +
    "\004\021\176\001\002\000\004\022\177\001\002\000\044" +
    "\004\032\005\007\006\025\007\006\012\033\013\026\014" +
    "\020\015\024\016\014\017\031\020\030\026\013\030\012" +
    "\032\021\033\040\034\037\035\027\001\002\000\004\023" +
    "\201\001\002\000\054\002\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\023\uffb9\025\uffb9\026\uffb9\030\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\037\uffb9\001\002\000\046\004" +
    "\032\005\007\006\025\007\006\012\033\013\026\014\020" +
    "\015\024\016\014\017\031\020\030\023\uffbd\026\013\030" +
    "\012\032\021\033\040\034\037\035\027\001\002\000\004" +
    "\023\204\001\002\000\052\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\023\uffbe\026\uffbe\030\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\037\uffbe\001\002\000\052\002\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8\026\uffc8" +
    "\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\001" +
    "\002\000\054\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\023\uffbb\025\uffbb\026\uffbb\030\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\037\uffbb\001\002\000\020\021\210\031" +
    "\060\032\051\046\056\047\054\050\047\051\050\001\002" +
    "\000\106\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\001\002\000\004\006\212\001\002" +
    "\000\004\021\213\001\002\000\004\022\214\001\002\000" +
    "\004\036\216\001\002\000\006\036\227\040\225\001\002" +
    "\000\022\004\032\005\007\006\042\007\006\015\024\016" +
    "\014\020\030\032\021\001\002\000\020\031\060\032\051" +
    "\041\220\046\056\047\054\050\047\051\050\001\002\000" +
    "\044\004\032\005\007\006\025\007\006\012\033\013\026" +
    "\014\020\015\024\016\014\017\031\020\030\026\013\030" +
    "\012\032\021\033\040\034\037\035\027\001\002\000\050" +
    "\004\032\005\007\006\025\007\006\012\033\013\026\014" +
    "\020\015\024\016\014\017\031\020\030\023\uffa8\026\013" +
    "\030\012\032\021\033\040\034\037\035\027\037\uffa8\001" +
    "\002\000\004\037\223\001\002\000\004\011\224\001\002" +
    "\000\006\036\uffa9\040\uffa9\001\002\000\004\041\236\001" +
    "\002\000\004\023\235\001\002\000\022\004\032\005\007" +
    "\006\042\007\006\015\024\016\014\020\030\032\021\001" +
    "\002\000\020\031\060\032\051\041\231\046\056\047\054" +
    "\050\047\051\050\001\002\000\044\004\032\005\007\006" +
    "\025\007\006\012\033\013\026\014\020\015\024\016\014" +
    "\017\031\020\030\026\013\030\012\032\021\033\040\034" +
    "\037\035\027\001\002\000\004\037\233\001\002\000\004" +
    "\011\234\001\002\000\006\036\uffaa\040\uffaa\001\002\000" +
    "\052\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\023" +
    "\uffab\026\uffab\030\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\037\uffab\001\002\000\044\004\032\005\007\006\025\007" +
    "\006\012\033\013\026\014\020\015\024\016\014\017\031" +
    "\020\030\026\013\030\012\032\021\033\040\034\037\035" +
    "\027\001\002\000\004\023\uffa7\001\002\000\022\004\032" +
    "\005\007\006\042\007\006\015\024\016\014\020\030\032" +
    "\021\001\002\000\066\002\uffb4\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\023\uffb4\026\uffb4\030\uffb4\031\060" +
    "\032\051\033\uffb4\034\uffb4\035\uffb4\037\uffb4\046\056\047" +
    "\054\050\047\051\050\001\002\000\052\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\023\uffee\026\uffee\030\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee\001\002\000" +
    "\052\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\023" +
    "\ufff1\026\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\037\ufff1\001\002\000\106\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\046\056\047\054\050\047\051\uffcd\001\002\000\052" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\023\uffed" +
    "\026\uffed\030\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037" +
    "\uffed\001\002\000\022\004\032\005\007\006\042\007\006" +
    "\015\024\016\014\020\030\032\021\001\002\000\020\021" +
    "\250\031\060\032\051\046\056\047\054\050\047\051\050" +
    "\001\002\000\054\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\023\uffbc\026\uffbc\030\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\037\uffbc\001\002\000\012\006\252" +
    "\012\033\013\026\014\020\001\002\000\004\010\240\001" +
    "\002\000\004\011\uffb6\001\002\000\004\011\uffb5\001\002" +
    "\000\004\021\270\001\002\000\004\011\257\001\002\000" +
    "\022\004\032\005\007\006\042\007\006\015\024\016\014" +
    "\020\030\032\021\001\002\000\004\011\261\001\002\000" +
    "\004\006\263\001\002\000\004\021\uffb7\001\002\000\006" +
    "\031\264\032\265\001\002\000\004\031\267\001\002\000" +
    "\004\032\266\001\002\000\004\021\uffb2\001\002\000\004" +
    "\021\uffb3\001\002\000\004\022\271\001\002\000\044\004" +
    "\032\005\007\006\025\007\006\012\033\013\026\014\020" +
    "\015\024\016\014\017\031\020\030\026\013\030\012\032" +
    "\021\033\040\034\037\035\027\001\002\000\046\004\032" +
    "\005\007\006\025\007\006\012\033\013\026\014\020\015" +
    "\024\016\014\017\031\020\030\023\uffb1\026\013\030\012" +
    "\032\021\033\040\034\037\035\027\001\002\000\004\023" +
    "\274\001\002\000\052\002\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\023\uffb8\026\uffb8\030\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\037\uffb8\001\002\000\056\002\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\276\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\023" +
    "\uffe2\026\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\037\uffe2\001\002\000\014\004\301\005\277\007\300\015" +
    "\302\016\303\001\002\000\054\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\026\uffdd\030\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\001\002\000" +
    "\054\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\023\uffdc\026\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\037\uffdc\001\002\000\054\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\023\uffde\026\uffde\030" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\001\002" +
    "\000\054\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\023\uffdb\026\uffdb\030\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\001\002\000\054\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\023\uffda\026\uffda" +
    "\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\001" +
    "\002\000\054\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\023\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\037\uffe3\001\002\000\052\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\023\uffef\026\uffef\030" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\032\002\035\003\004\004\034\005\021\006" +
    "\010\010\016\016\003\021\033\026\022\027\007\030\015" +
    "\032\014\001\001\000\002\001\001\000\026\004\126\005" +
    "\123\006\010\010\122\016\116\021\125\026\124\027\117" +
    "\030\121\032\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\045\013\043\036\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\104\013\103\001\001\000\002\001\001\000\004\004\102" +
    "\001\001\000\004\004\101\001\001\000\004\004\100\001" +
    "\001\000\004\004\075\001\001\000\004\004\074\001\001" +
    "\000\004\004\073\001\001\000\004\004\072\001\001\000" +
    "\004\004\071\001\001\000\004\004\070\001\001\000\004" +
    "\004\067\001\001\000\002\001\001\000\004\004\062\001" +
    "\001\000\002\001\001\000\004\004\064\001\001\000\002" +
    "\001\001\000\004\004\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\111\013\134\001\001" +
    "\000\002\001\001\000\006\004\111\013\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\113\004\034" +
    "\005\021\006\010\010\016\016\003\021\033\026\022\027" +
    "\007\030\015\031\114\032\014\001\001\000\026\004\126" +
    "\005\123\006\010\010\122\016\116\021\125\026\124\027" +
    "\117\030\121\032\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\113\004\034\005\021\006\010\010\016" +
    "\016\003\021\033\026\022\027\007\030\015\031\137\032" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\113\004\034\005\021\006\010\010\016\016\003\021" +
    "\033\026\022\027\007\030\015\031\142\032\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\045\013\147\036\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\045\011\157" +
    "\013\156\036\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\162" +
    "\004\034\005\021\006\010\010\016\012\163\016\003\021" +
    "\033\026\022\027\007\030\015\032\014\001\001\000\026" +
    "\004\126\005\123\006\010\010\122\016\116\021\125\026" +
    "\124\027\117\030\121\032\120\001\001\000\002\001\001" +
    "\000\010\014\166\017\165\020\170\001\001\000\006\014" +
    "\204\020\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\201\004\034\005\021\006" +
    "\010\010\016\015\202\016\003\021\033\026\022\027\007" +
    "\030\015\032\014\001\001\000\002\001\001\000\012\004" +
    "\045\011\174\013\156\036\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\162\004\034\005\021\006" +
    "\010\010\016\012\177\016\003\021\033\026\022\027\007" +
    "\030\015\032\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\126\005\123\006\010\010\122\016\116" +
    "\021\125\026\124\027\117\030\121\032\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\214" +
    "\001\001\000\004\034\225\001\001\000\004\004\216\001" +
    "\001\000\002\001\001\000\032\003\220\004\034\005\021" +
    "\006\010\010\016\016\003\021\033\026\022\027\007\030" +
    "\015\032\014\035\221\001\001\000\026\004\126\005\123" +
    "\006\010\010\122\016\116\021\125\026\124\027\117\030" +
    "\121\032\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\227\001\001\000\002\001\001\000\032\003\220" +
    "\004\034\005\021\006\010\010\016\016\003\021\033\026" +
    "\022\027\007\030\015\032\014\035\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\220\004\034\005\021\006\010\010\016" +
    "\016\003\021\033\026\022\027\007\030\015\032\014\035" +
    "\236\001\001\000\002\001\001\000\004\004\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\252\006" +
    "\010\022\254\024\255\026\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\111\013\257\001\001\000\002" +
    "\001\001\000\004\025\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\271\004\034\005\021\006\010\010\016\016\003\021\033" +
    "\023\272\026\022\027\007\030\015\032\014\001\001\000" +
    "\026\004\126\005\123\006\010\010\122\016\116\021\125" +
    "\026\124\027\117\030\121\032\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION EXPRESION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INSTRUCCION EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCION SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INSTRUCCION ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= INSTRUCCION DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= EXPRESION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLES ::= PRVARIABLES id igual VALOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLES ::= PRVARIABLES id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRVARIABLES ::= var 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRVARIABLES ::= let 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRVARIABLES ::= constvar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION porcentaje EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= menos EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= LOGICO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RELACIONAL ::= EXPRESION igual igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RELACIONAL ::= EXPRESION menorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RELACIONAL ::= EXPRESION menorq igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELACIONAL ::= EXPRESION mayorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELACIONAL ::= EXPRESION mayorq igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPOIF ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSE ::= elsepr llaveiz CUERPOELSE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPOELSE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRINTCONSOLE ::= imprimir pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSEIF ::= ELSEIF CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSEIF ::= CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSEIF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETTINGFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INICIOFOR ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INICIOFOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= id igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INCFOR ::= id mas mas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INCFOR ::= id menos menos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERPOFOR ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= whilepr pariz LOGICO parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CUERPOWHILE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz LOGICO parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH FINALSWITCH llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPOSWITCH ::= casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPOCASE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FINALSWITCH ::= defaultpr dpuntos CUERPOCASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOGICO ::= EXPRESION andpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LOGICO ::= EXPRESION orpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOGICO ::= notpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOGICO ::= RELACIONAL andpr RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOGICO ::= RELACIONAL orpr RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOGICO ::= notpr RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
