
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores2;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\010\004\004\005\011\006\005\001\002\000" +
    "\012\002\ufffb\004\ufffb\005\ufffb\006\ufffb\001\002\000\012" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\001\002\000\012\002" +
    "\000\004\004\005\011\006\005\001\002\000\012\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\001\002\000\004\002\012\001" +
    "\002\000\012\002\ufffc\004\ufffc\005\ufffc\006\ufffc\001\002" +
    "\000\004\002\001\001\002\000\012\002\uffff\004\uffff\005" +
    "\uffff\006\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\010\002\007\003\005\033\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static String titulografica = "";
    public static String titulograficax = "";
    public static String titulograficay = "";
    public static ArrayList<String> valoresx = new ArrayList();
    public static ArrayList<String> valoresy = new ArrayList();
    public static int contgbarras = 1;
    public static int contgpie = 1;
    
// Grafica de barras
    public static void gbarras(String titulo, String titulox, String tituloy, String nombre) throws IOException{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        //double [ ] edad = {0.8, 0.7, 0, 0, 0.6, 0.9};
        
        //String [ ] nombre = {"Fernando", "Marz", "Jade", "Juan", "Maria", "Pedro"};

        /*for(int i = 0; i < valoresx.size(); i++){
            System.out.println(valoresx.get(i) + " " + valoresy.get(i));
        }*/
        
        for(int i = 0; i < valoresx.size(); i++){
            dataset.setValue(Double.parseDouble(valoresy.get(i)), "", valoresx.get(i));
        }
        
        JFreeChart chart = ChartFactory.createBarChart(
                titulo, // Titulo
                titulox, // Titulo ejex
                tituloy, // Titulo ejey
                dataset, 
                PlotOrientation.VERTICAL,
                true, 
                false, 
                false
        );
        
        //Mostramos la grafica en pantalla
        ChartFrame frame = new ChartFrame("Ejemplo Grafica de Barras", chart);
        frame.pack();
        frame.setVisible(true);


        //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File BarChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( BarChart , chart , width , height );

        valoresx.clear();
        valoresy.clear();
    }

// Grafica de pie
    public static void gpie(String titulo, String nombre) throws IOException{
        DefaultPieDataset pieDataset = new DefaultPieDataset();

        double valortotal = 0;
        for(int i = 0; i < valoresy.size(); i++){
            //System.out.println(valoresy.get(i));
            valortotal = valortotal + Double.parseDouble(valoresy.get(i));
        }
        
        System.out.println(valortotal);

        double nuevovalor = 0;
        for(int i = 0; i < valoresy.size(); i++){
            //System.out.println(valoresy.get(i));
            nuevovalor = Double.parseDouble(valoresy.get(i)) * 100 / valortotal;
            valoresy.set(i,String.valueOf(nuevovalor));
            //System.out.println(valoresy.get(i));
        }
        
        for(int i = 0; i < valoresx.size(); i++){
            pieDataset.setValue(valoresx.get(i), Double.parseDouble(valoresy.get(i)));
        }

        /*pieDataset.setValue("PSOE", new Integer(31));
        pieDataset.setValue("PP", new Integer(34));
        pieDataset.setValue("PODEMOS", new Integer(25));
        pieDataset.setValue("IU", new Integer(8));
        pieDataset.setValue("Otros", new Integer(3));*/
        
        JFreeChart chart = ChartFactory.createPieChart(
                titulo,
                pieDataset,
                true,
                true,
                false
        );

        //Mostramos la grafica en pantalla
        ChartFrame frame = new ChartFrame("Ejemplo Grafica Circular", chart);
        frame.pack();
        frame.setVisible(true);

         //Crear imaagen de la grafica
        int width = 640; // Width of the image 
        int height = 480; // Height of the image 
        File PieChart = new File( nombre + ".jpeg" );
        ChartUtilities.saveChartAsJPEG( PieChart , chart , width , height );
    }

// Grafica de lineas
    public static void glineas(){
        final XYSeries serie1 = new XYSeries("Fernando Alonso");
	serie1.add(1, 131.78);
	serie1.add(2, 129.95);
	serie1.add(3, 128.16);
	serie1.add(4, 125.91);
	serie1.add(5, 130.44);
		
	final XYSeries serie2 = new XYSeries("Jaime Alguersuari");
	serie2.add(1, 100.16);
	serie2.add(2, 150.32);
	serie2.add(3, 130.86);
	serie2.add(4, 110.02);
	serie2.add(5, 90.45);
		
	final XYSeriesCollection collection = new XYSeriesCollection();
	collection.addSeries(serie1);
	collection.addSeries(serie2);
        
        JFreeChart chart = 
        ChartFactory.createXYLineChart("Sesiones en Adictos al Trabajo",  
        "Meses","Sesiones",collection,PlotOrientation.VERTICAL,
        false,
        false, 
        true                // Show legend
        );
        
        //Mostramos la grafica en pantalla
        ChartFrame frame = new ChartFrame("Ejemplo Grafica Circular", chart);
        frame.pack();
        frame.setVisible(true);
    } 

// Variables globales del lenguaje fca
    public void Addvariable(String variable, String valor, String tipo){
        variables nuevov= new variables(variable, valor, tipo);
        
        int estadovar = 0;
        //System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!111" + nuevov.variable);
        if(proyecto.Interfaz.listavariables.size() <= 0){
            proyecto.Interfaz.listavariables.add(nuevov);
        }else{
            for(int i=0;i<proyecto.Interfaz.listavariables.size();i++){
                if(proyecto.Interfaz.listavariables.get(i).getvariable().equals(nuevov.variable)){
                    estadovar = 1;
                    i = proyecto.Interfaz.listavariables.size();
                }
            }

            if(estadovar == 0){
                proyecto.Interfaz.listavariables.add(nuevov);
            }

        }
        

        
    }

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la LÃ­nea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la LÃ­nea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPRESION ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESION ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
