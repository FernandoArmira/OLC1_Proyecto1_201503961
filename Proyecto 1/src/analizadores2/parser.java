
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores2;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\005\006\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\010\011\000\002\010\012\000" +
    "\002\010\012\000\002\010\013\000\002\011\003\000\002" +
    "\013\006\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\012\003\000\002\014\006\000\002\015\003" +
    "\000\002\016\006\000\002\017\004\000\002\017\003\000" +
    "\002\020\012\000\002\021\011\000\002\022\007\000\002" +
    "\024\003\000\002\024\003\000\002\026\005\000\002\025" +
    "\005\000\002\025\005\000\002\023\003\000\002\027\011" +
    "\000\002\031\003\000\002\030\012\000\002\032\012\000" +
    "\002\033\011\000\002\033\010\000\002\035\003\000\002" +
    "\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\040\004\030\005\007\006\024\007\006\012" +
    "\031\013\025\014\020\015\023\016\014\017\027\026\013" +
    "\030\012\033\036\034\035\035\026\001\002\000\050\002" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\234\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\023\uffe6\026" +
    "\uffe6\030\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\001\002" +
    "\000\042\002\000\004\030\005\007\006\024\007\006\012" +
    "\031\013\025\014\020\015\023\016\014\017\027\026\013" +
    "\030\012\033\036\034\035\035\026\001\002\000\062\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\037\uffd9\041\uffd9\001\002\000\062\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\037\uffd6\041\uffd6\001\002\000\046\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\023\uffe8\026\uffe8\030" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\001\002\000\004" +
    "\006\224\001\002\000\004\020\200\001\002\000\004\020" +
    "\175\001\002\000\062\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\023\uffd4\024\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\041" +
    "\uffd4\001\002\000\046\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\023\uffe7\026\uffe7\030\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\037\uffe7\001\002\000\050\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\011\174\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\023\uffe4\026\uffe4\030\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\037\uffe4\001\002\000\046\002\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\023\uffea\026\uffea\030\uffea\033\uffea" +
    "\034\uffea\035\uffea\037\uffea\001\002\000\004\006\uffdf\001" +
    "\002\000\050\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\173\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\023\uffec\026\uffec\030\uffec\033\uffec\034\uffec\035\uffec" +
    "\037\uffec\001\002\000\050\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\011\172\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\023\uffe5\026\uffe5\030\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\037\uffe5\001\002\000\062\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\037\uffd5\041\uffd5\001\002\000\052\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\170\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\023\uffd8\026\uffd8" +
    "\030\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\001\002\000" +
    "\004\006\uffe0\001\002\000\004\020\141\001\002\000\004" +
    "\020\110\001\002\000\062\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\021\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7" +
    "\041\uffd7\001\002\000\004\006\uffe1\001\002\000\046\002" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\023\uffe9\026\uffe9\030" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\001\002\000\050" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\107\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\023\uffeb" +
    "\026\uffeb\030\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001" +
    "\002\000\004\002\106\001\002\000\004\022\077\001\002" +
    "\000\004\020\037\001\002\000\016\004\030\005\007\006" +
    "\042\007\006\015\023\016\014\001\002\000\004\021\054" +
    "\001\002\000\010\010\043\024\044\027\045\001\002\000" +
    "\062\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\037\uffd8\041\uffd8\001\002\000" +
    "\004\010\052\001\002\000\020\004\030\005\007\006\042" +
    "\007\006\010\047\015\023\016\014\001\002\000\016\004" +
    "\030\005\007\006\042\007\006\015\023\016\014\001\002" +
    "\000\006\011\uffcc\021\uffcc\001\002\000\016\004\030\005" +
    "\007\006\042\007\006\015\023\016\014\001\002\000\006" +
    "\011\uffcd\021\uffcd\001\002\000\006\011\uffcb\021\uffcb\001" +
    "\002\000\016\004\030\005\007\006\042\007\006\015\023" +
    "\016\014\001\002\000\006\011\uffce\021\uffce\001\002\000" +
    "\004\022\055\001\002\000\040\004\030\005\007\006\024" +
    "\007\006\012\031\013\025\014\020\015\023\016\014\017" +
    "\027\026\013\030\012\033\036\034\035\035\026\001\002" +
    "\000\042\004\030\005\007\006\024\007\006\012\031\013" +
    "\025\014\020\015\023\016\014\017\027\023\uffba\026\013" +
    "\030\012\033\036\034\035\035\026\001\002\000\004\023" +
    "\060\001\002\000\046\002\uffbb\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\023\uffbb\026\uffbb\030\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\037\uffbb\001\002\000\050\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\011\076\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\023\ufff4\026\ufff4\030\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\037\ufff4\001\002\000\046\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\023\ufff6\026\ufff6\030\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\037\ufff6\001\002\000\046\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\023\ufff5\026\ufff5\030\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\037\ufff5\001\002\000\050\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\075\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\023\ufff2\026\ufff2" +
    "\030\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\001\002\000" +
    "\046\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\023\ufff8\026" +
    "\ufff8\030\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\001\002" +
    "\000\050\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011" +
    "\074\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\023\ufff9\026\ufff9\030\ufff9\033\ufff9\034\ufff9\035\ufff9\037" +
    "\ufff9\001\002\000\050\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\011\073\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\023\ufff3\026\ufff3\030\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\037\ufff3\001\002\000\046\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\023\ufff7\026\ufff7\030\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\037\ufff7\001\002\000\050\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\011\072\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\023\ufffa\026\ufffa\030\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\037\ufffa\001\002\000\046\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\023\uffff\026\uffff\030" +
    "\uffff\033\uffff\034\uffff\035\uffff\037\uffff\001\002\000\046" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\023\ufffc\026\ufffc" +
    "\030\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\001\002\000" +
    "\046\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\023\ufffe\026" +
    "\ufffe\030\ufffe\033\ufffe\034\ufffe\035\ufffe\037\ufffe\001\002" +
    "\000\046\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\023\ufffb" +
    "\026\ufffb\030\ufffb\033\ufffb\034\ufffb\035\ufffb\037\ufffb\001" +
    "\002\000\046\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\023" +
    "\ufffd\026\ufffd\030\ufffd\033\ufffd\034\ufffd\035\ufffd\037\ufffd" +
    "\001\002\000\040\004\030\005\007\006\024\007\006\012" +
    "\031\013\025\014\020\015\023\016\014\017\027\026\013" +
    "\030\012\033\036\034\035\035\026\001\002\000\004\023" +
    "\101\001\002\000\004\033\102\001\002\000\004\020\103" +
    "\001\002\000\016\004\030\005\007\006\042\007\006\015" +
    "\023\016\014\001\002\000\004\021\105\001\002\000\050" +
    "\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\023\uffb9" +
    "\026\uffb9\030\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\001" +
    "\002\000\004\002\001\001\002\000\046\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\023\ufff0\026\ufff0\030\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\037\ufff0\001\002\000\016\004\030\005" +
    "\007\006\042\007\006\015\023\016\014\001\002\000\004" +
    "\021\uffcf\001\002\000\004\021\113\001\002\000\004\022" +
    "\114\001\002\000\040\004\030\005\007\006\024\007\006" +
    "\012\031\013\025\014\020\015\023\016\014\017\027\026" +
    "\013\030\012\033\036\034\035\035\026\001\002\000\042" +
    "\004\030\005\007\006\024\007\006\012\031\013\025\014" +
    "\020\015\023\016\014\017\027\023\uffca\026\013\030\012" +
    "\033\036\034\035\035\026\001\002\000\004\023\117\001" +
    "\002\000\050\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\023" +
    "\uffd3\025\122\026\uffd3\030\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\037\uffd3\001\002\000\050\002\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\023\uffd1\025\122\026\uffd1\030\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\037\uffd1\001\002\000\046\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\023\uffd2\026\uffd2\030\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\037\uffd2\001\002\000\006\017\125\022" +
    "\124\001\002\000\050\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\023\uffc5\025\uffc5\026\uffc5\030\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\037\uffc5\001\002\000\040\004\030\005\007\006" +
    "\024\007\006\012\031\013\025\014\020\015\023\016\014" +
    "\017\027\026\013\030\012\033\036\034\035\035\026\001" +
    "\002\000\004\020\126\001\002\000\016\004\030\005\007" +
    "\006\042\007\006\015\023\016\014\001\002\000\004\021" +
    "\130\001\002\000\004\022\131\001\002\000\040\004\030" +
    "\005\007\006\024\007\006\012\031\013\025\014\020\015" +
    "\023\016\014\017\027\026\013\030\012\033\036\034\035" +
    "\035\026\001\002\000\004\023\133\001\002\000\050\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\023\uffc4\025\uffc4\026" +
    "\uffc4\030\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\001\002" +
    "\000\042\004\030\005\007\006\024\007\006\012\031\013" +
    "\025\014\020\015\023\016\014\017\027\023\uffc8\026\013" +
    "\030\012\033\036\034\035\035\026\001\002\000\004\023" +
    "\136\001\002\000\046\002\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\023\uffc9\026\uffc9\030\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\001\002\000\046\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\023\uffd0\026\uffd0\030\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\037\uffd0\001\002\000\050\002\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\023\uffc6\025\uffc6\026\uffc6\030\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\037\uffc6\001\002\000\004\006\142\001" +
    "\002\000\004\021\143\001\002\000\004\022\144\001\002" +
    "\000\004\036\146\001\002\000\006\036\157\040\155\001" +
    "\002\000\016\004\030\005\007\006\042\007\006\015\023" +
    "\016\014\001\002\000\004\041\150\001\002\000\040\004" +
    "\030\005\007\006\024\007\006\012\031\013\025\014\020" +
    "\015\023\016\014\017\027\026\013\030\012\033\036\034" +
    "\035\035\026\001\002\000\044\004\030\005\007\006\024" +
    "\007\006\012\031\013\025\014\020\015\023\016\014\017" +
    "\027\023\uffb5\026\013\030\012\033\036\034\035\035\026" +
    "\037\uffb5\001\002\000\004\037\153\001\002\000\004\011" +
    "\154\001\002\000\006\036\uffb6\040\uffb6\001\002\000\004" +
    "\041\166\001\002\000\004\023\165\001\002\000\016\004" +
    "\030\005\007\006\042\007\006\015\023\016\014\001\002" +
    "\000\004\041\161\001\002\000\040\004\030\005\007\006" +
    "\024\007\006\012\031\013\025\014\020\015\023\016\014" +
    "\017\027\026\013\030\012\033\036\034\035\035\026\001" +
    "\002\000\004\037\163\001\002\000\004\011\164\001\002" +
    "\000\006\036\uffb7\040\uffb7\001\002\000\046\002\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\023\uffb8\026\uffb8\030\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\037\uffb8\001\002\000\040\004\030" +
    "\005\007\006\024\007\006\012\031\013\025\014\020\015" +
    "\023\016\014\017\027\026\013\030\012\033\036\034\035" +
    "\035\026\001\002\000\004\023\uffb4\001\002\000\016\004" +
    "\030\005\007\006\042\007\006\015\023\016\014\001\002" +
    "\000\050\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\023\uffbf\026\uffbf\030\uffbf\033\uffbf\034\uffbf\035\uffbf\037" +
    "\uffbf\001\002\000\046\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\023\uffee\026\uffee\030\uffee\033\uffee\034\uffee\035\uffee" +
    "\037\uffee\001\002\000\046\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\023\ufff1\026\ufff1\030\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\037\ufff1\001\002\000\046\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\023\uffed\026\uffed\030\uffed\033\uffed\034\uffed" +
    "\035\uffed\037\uffed\001\002\000\016\004\030\005\007\006" +
    "\042\007\006\015\023\016\014\001\002\000\004\021\177" +
    "\001\002\000\050\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\023\uffc7\026\uffc7\030\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\001\002\000\012\006\201\012\031\013\025" +
    "\014\020\001\002\000\004\010\170\001\002\000\004\011" +
    "\uffc1\001\002\000\004\011\uffc0\001\002\000\004\021\217" +
    "\001\002\000\004\011\206\001\002\000\016\004\030\005" +
    "\007\006\042\007\006\015\023\016\014\001\002\000\004" +
    "\011\210\001\002\000\004\006\212\001\002\000\004\021" +
    "\uffc2\001\002\000\006\031\213\032\214\001\002\000\004" +
    "\031\216\001\002\000\004\032\215\001\002\000\004\021" +
    "\uffbd\001\002\000\004\021\uffbe\001\002\000\004\022\220" +
    "\001\002\000\040\004\030\005\007\006\024\007\006\012" +
    "\031\013\025\014\020\015\023\016\014\017\027\026\013" +
    "\030\012\033\036\034\035\035\026\001\002\000\042\004" +
    "\030\005\007\006\024\007\006\012\031\013\025\014\020" +
    "\015\023\016\014\017\027\023\uffbc\026\013\030\012\033" +
    "\036\034\035\035\026\001\002\000\004\023\223\001\002" +
    "\000\046\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\023\uffc3" +
    "\026\uffc3\030\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\001" +
    "\002\000\052\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\225\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\023\uffe2\026\uffe2\030\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\037\uffe2\001\002\000\014\004\230\005\226\007" +
    "\227\015\231\016\232\001\002\000\050\002\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\023\uffdd\026\uffdd\030\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\037\uffdd\001\002\000\050\002" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc\026" +
    "\uffdc\030\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\001\002" +
    "\000\050\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\023\uffde\026\uffde\030\uffde\033\uffde\034\uffde\035\uffde\037" +
    "\uffde\001\002\000\050\002\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\023\uffdb\026\uffdb\030\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\037\uffdb\001\002\000\050\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\023\uffda\026\uffda\030\uffda\033" +
    "\uffda\034\uffda\035\uffda\037\uffda\001\002\000\050\002\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\026\uffe3" +
    "\030\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\001\002\000" +
    "\046\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\023\uffef\026" +
    "\uffef\030\uffef\033\uffef\034\uffef\035\uffef\037\uffef\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\032\002\033\003\004\004\032\005\020\006" +
    "\010\010\016\016\003\021\031\026\021\027\007\030\015" +
    "\032\014\001\001\000\002\001\001\000\026\004\070\005" +
    "\065\006\010\010\064\016\060\021\067\026\066\027\061" +
    "\030\063\032\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\040\013\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\047\001\001\000\004\004\045\001\001\000" +
    "\002\001\001\000\004\004\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\055\004\032\005\020" +
    "\006\010\010\016\016\003\021\031\026\021\027\007\030" +
    "\015\031\056\032\014\001\001\000\026\004\070\005\065" +
    "\006\010\010\064\016\060\021\067\026\066\027\061\030" +
    "\063\032\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\055\004\032\005\020\006" +
    "\010\010\016\016\003\021\031\026\021\027\007\030\015" +
    "\031\077\032\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\040\013\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\040\011\111\013\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\114\004\032\005\020\006\010\010\016\012\115" +
    "\016\003\021\031\026\021\027\007\030\015\032\014\001" +
    "\001\000\026\004\070\005\065\006\010\010\064\016\060" +
    "\021\067\026\066\027\061\030\063\032\062\001\001\000" +
    "\002\001\001\000\010\014\120\017\117\020\122\001\001" +
    "\000\006\014\136\020\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\133\004\032" +
    "\005\020\006\010\010\016\015\134\016\003\021\031\026" +
    "\021\027\007\030\015\032\014\001\001\000\002\001\001" +
    "\000\010\004\040\011\126\013\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\114\004\032\005\020" +
    "\006\010\010\016\012\131\016\003\021\031\026\021\027" +
    "\007\030\015\032\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\070\005\065\006\010\010\064\016" +
    "\060\021\067\026\066\027\061\030\063\032\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\144\001\001\000\004\034\155\001" +
    "\001\000\004\004\146\001\001\000\002\001\001\000\032" +
    "\003\150\004\032\005\020\006\010\010\016\016\003\021" +
    "\031\026\021\027\007\030\015\032\014\035\151\001\001" +
    "\000\026\004\070\005\065\006\010\010\064\016\060\021" +
    "\067\026\066\027\061\030\063\032\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\157\001\001\000\002" +
    "\001\001\000\032\003\150\004\032\005\020\006\010\010" +
    "\016\016\003\021\031\026\021\027\007\030\015\032\014" +
    "\035\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\150\004\032" +
    "\005\020\006\010\010\016\016\003\021\031\026\021\027" +
    "\007\030\015\032\014\035\166\001\001\000\002\001\001" +
    "\000\004\004\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\201\006\010\022\203\024\204\026\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\040\013\206\001\001" +
    "\000\002\001\001\000\004\025\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\220\004\032\005\020\006\010\010\016\016\003" +
    "\021\031\023\221\026\021\027\007\030\015\032\014\001" +
    "\001\000\026\004\070\005\065\006\010\010\064\016\060" +
    "\021\067\026\066\027\061\030\063\032\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION EXPRESION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INSTRUCCION EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCION SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INSTRUCCION ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= INSTRUCCION DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= EXPRESION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLES ::= PRVARIABLES id igual VALOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLES ::= PRVARIABLES id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRVARIABLES ::= var 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRVARIABLES ::= let 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRVARIABLES ::= constvar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RELACIONAL ::= EXPRESION igual igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RELACIONAL ::= EXPRESION menorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RELACIONAL ::= EXPRESION menorq igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOIF ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE ::= elsepr llaveiz CUERPOELSE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPOELSE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINTCONSOLE ::= imprimir pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELSEIF ::= ELSEIF CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELSEIF ::= CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSEIF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETTINGFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INICIOFOR ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INICIOFOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= id igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INCFOR ::= id mas mas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INCFOR ::= id menos menos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPOFOR ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPOWHILE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH FINALSWITCH llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPOSWITCH ::= casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUERPOCASE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FINALSWITCH ::= defaultpr dpuntos CUERPOCASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
