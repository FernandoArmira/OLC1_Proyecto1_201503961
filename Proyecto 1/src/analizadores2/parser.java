
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores2;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\005\006\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\010\011\000\002\010\012\000\002\010\012\000\002" +
    "\010\013\000\002\011\003\000\002\011\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\012\004\000" +
    "\002\012\003\000\002\014\006\000\002\015\004\000\002" +
    "\015\003\000\002\016\006\000\002\017\004\000\002\017" +
    "\003\000\002\020\012\000\002\021\011\000\002\022\007" +
    "\000\002\024\003\000\002\024\003\000\002\026\005\000" +
    "\002\025\005\000\002\025\005\000\002\023\004\000\002" +
    "\023\003\000\002\027\011\000\002\027\011\000\002\031" +
    "\004\000\002\031\003\000\002\030\012\000\002\030\012" +
    "\000\002\032\012\000\002\033\011\000\002\033\010\000" +
    "\002\035\003\000\002\034\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\040\005\000\002\041" +
    "\005\000\002\042\005\000\002\042\006\000\002\043\003" +
    "\000\002\043\004\000\002\044\005\000\002\044\004\000" +
    "\002\045\006\000\002\046\011\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\050\004\026\005\047\006\035\007\050\012" +
    "\023\013\012\014\016\015\004\016\020\017\025\020\015" +
    "\026\005\030\036\032\022\033\006\034\021\035\027\045" +
    "\011\057\030\001\002\000\120\002\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\057\uffb6\001\002\000\004\020\374" +
    "\001\002\000\004\020\361\001\002\000\052\002\000\004" +
    "\026\005\047\006\035\007\050\012\023\013\012\014\016" +
    "\015\004\016\020\017\025\020\015\026\005\030\036\032" +
    "\022\033\006\034\021\035\027\045\011\057\030\001\002" +
    "\000\056\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\023\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\037\uffe3\045\uffe3\057\uffe3\001\002\000\024\004\026" +
    "\005\047\006\070\007\050\015\004\016\020\020\015\032" +
    "\022\045\011\001\002\000\004\006\uffc2\001\002\000\056" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0" +
    "\026\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037" +
    "\uffe0\045\uffe0\057\uffe0\001\002\000\060\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\011\357\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\026\uffdc" +
    "\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\045" +
    "\uffdc\057\uffdc\001\002\000\024\004\026\005\047\006\070" +
    "\007\050\015\004\016\020\020\015\032\022\045\011\001" +
    "\002\000\004\006\uffc1\001\002\000\056\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\026\uffe4\030\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\045\uffe4\057" +
    "\uffe4\001\002\000\120\002\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\057\uffb5\001\002\000\004\022\342\001\002" +
    "\000\024\004\026\005\047\006\070\007\050\015\004\016" +
    "\020\020\015\032\022\045\011\001\002\000\004\006\uffc3" +
    "\001\002\000\120\002\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\037\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\057\uffac\001\002\000\004\020\306\001\002\000" +
    "\120\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057" +
    "\uffb8\001\002\000\004\020\257\001\002\000\004\006\225" +
    "\001\002\000\120\002\uffab\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\037\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\057\uffab\001\002\000\060\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\011\224\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\023\uffde\026\uffde\030" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\045\uffde" +
    "\057\uffde\001\002\000\056\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\023\uffe1\026\uffe1\030\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\037\uffe1\045\uffe1\057\uffe1\001\002" +
    "\000\004\006\207\001\002\000\042\010\173\020\175\024" +
    "\uffb9\027\uffb9\031\uffb9\032\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\001\002\000\004\020\121\001\002\000\060\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\120\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd" +
    "\026\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\045\uffdd\057\uffdd\001\002\000\060\002\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\011\117\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\023\uffe5\026\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5\045" +
    "\uffe5\057\uffe5\001\002\000\056\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\023\uffe2\026\uffe2\030\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\037\uffe2\045\uffe2\057\uffe2\001" +
    "\002\000\060\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\011\116\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\023\uffdf\026\uffdf\030\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\037\uffdf\045\uffdf\057\uffdf\001\002\000" +
    "\004\002\115\001\002\000\060\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\011\114\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb\026\uffdb\030\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\045\uffdb\057" +
    "\uffdb\001\002\000\036\024\056\027\057\031\066\032\055" +
    "\042\067\043\062\044\065\046\063\047\060\050\052\051" +
    "\054\052\064\053\053\054\061\001\002\000\060\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\011\051\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\023\uffda" +
    "\026\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037" +
    "\uffda\045\uffda\057\uffda\001\002\000\120\002\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7" +
    "\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\001\002\000\120" +
    "\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\057\uffba" +
    "\001\002\000\056\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\023\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\037\uffe6\045\uffe6\057\uffe6\001\002\000\024" +
    "\004\026\005\047\006\070\007\050\015\004\016\020\020" +
    "\015\032\022\045\011\001\002\000\024\004\026\005\047" +
    "\006\070\007\050\015\004\016\020\020\015\032\022\045" +
    "\011\001\002\000\024\004\026\005\047\006\070\007\050" +
    "\015\004\016\020\020\015\032\022\045\011\001\002\000" +
    "\024\004\026\005\047\006\070\007\050\015\004\016\020" +
    "\020\015\032\107\045\011\001\002\000\024\004\026\005" +
    "\047\006\070\007\050\015\004\016\020\020\015\032\022" +
    "\045\011\001\002\000\024\004\026\005\047\006\070\007" +
    "\050\015\004\016\020\020\015\032\022\045\011\001\002" +
    "\000\024\004\026\005\047\006\070\007\050\015\004\016" +
    "\020\020\015\032\022\045\011\001\002\000\024\004\026" +
    "\005\047\006\070\007\050\015\004\016\020\020\015\032" +
    "\022\045\011\001\002\000\024\004\026\005\047\006\070" +
    "\007\050\015\004\016\020\020\015\032\022\045\011\001" +
    "\002\000\024\004\026\005\047\006\070\007\050\015\004" +
    "\016\020\020\015\032\022\045\011\001\002\000\024\004" +
    "\026\005\047\006\070\007\050\015\004\016\020\020\015" +
    "\032\022\045\011\001\002\000\024\004\026\005\047\006" +
    "\070\007\050\015\004\016\020\020\015\032\022\045\011" +
    "\001\002\000\026\004\026\005\047\006\070\007\050\015" +
    "\004\016\020\020\015\031\076\032\022\045\011\001\002" +
    "\000\024\004\026\005\047\006\070\007\050\015\004\016" +
    "\020\020\015\032\022\045\011\001\002\000\120\002\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\001\002" +
    "\000\120\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\073\032\072\033\uffa0\034\uffa0\035\uffa0\037\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\063\047" +
    "\060\050\052\051\054\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\057\uffa0\001\002\000\024\004\026\005\047\006\070\007" +
    "\050\015\004\016\020\020\015\032\022\045\011\001\002" +
    "\000\024\004\026\005\047\006\070\007\050\015\004\016" +
    "\020\020\015\032\022\045\011\001\002\000\120\002\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\023\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\063\047\060\050\052\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4\001\002" +
    "\000\120\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\063\047" +
    "\060\050\052\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\057\uffb3\001\002\000\060\002\uff7e\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e" +
    "\016\uff7e\017\uff7e\020\uff7e\023\uff7e\026\uff7e\030\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\045\uff7e\057\uff7e" +
    "\001\002\000\120\002\uff80\004\uff80\005\uff80\006\uff80\007" +
    "\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\023\uff80\024\056\026\uff80\027" +
    "\057\030\uff80\031\073\032\072\033\uff80\034\uff80\035\uff80" +
    "\037\uff80\041\uff80\042\067\043\062\044\uff80\045\uff80\046" +
    "\063\047\060\050\052\051\054\052\064\053\053\054\061" +
    "\055\uff80\057\uff80\001\002\000\120\002\uffa1\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\023\uffa1\024" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\073\032\072\033\uffa1" +
    "\034\uffa1\035\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\063\047\060\050\052\051\054\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\057\uffa1\001\002\000\120\002" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\060\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2\001" +
    "\002\000\120\002\uff81\004\uff81\005\uff81\006\uff81\007\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\023\uff81\024\056\026\uff81\027\057" +
    "\030\uff81\031\073\032\072\033\uff81\034\uff81\035\uff81\037" +
    "\uff81\041\uff81\042\067\043\uff81\044\uff81\045\uff81\046\063" +
    "\047\060\050\052\051\054\052\064\053\053\054\061\055" +
    "\uff81\057\uff81\001\002\000\120\002\uffa4\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\023\uffa4\024\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\073\032\072\033\uffa4\034" +
    "\uffa4\035\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\063\047\060\050\052\051\054\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\057\uffa4\001\002\000\120\002\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\023\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0\001\002" +
    "\000\120\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\073\032\072\033\uffa3\034\uffa3\035\uffa3\037\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\063\047" +
    "\060\050\052\051\054\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\057\uffa3\001\002\000\120\002\uffa2\004\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\073\032\072\033\uffa2\034\uffa2" +
    "\035\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\063\047\060\050\052\051\054\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\057\uffa2\001\002\000\060\002\uff7d\004" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\011\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\023\uff7d\026" +
    "\uff7d\030\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\037\uff7d" +
    "\045\uff7d\057\uff7d\001\002\000\120\002\uffae\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\037\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\063\047\060\050\052\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\057\uffae\001\002\000\120\002" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\063\047\060\050\052" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\001" +
    "\002\000\120\002\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\073\032\072\033\uff9f\034\uff9f\035\uff9f\037" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\063" +
    "\047\060\050\052\051\054\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\057\uff9f\001\002\000\120\002\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\060\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\057\uffb1\001\002\000\056\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\023\uffe7\026\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\045" +
    "\uffe7\057\uffe7\001\002\000\004\002\001\001\002\000\056" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\023\uffeb" +
    "\026\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037" +
    "\uffeb\045\uffeb\057\uffeb\001\002\000\056\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\023\uffec\026\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\045\uffec\057" +
    "\uffec\001\002\000\056\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\023\uffe9\026\uffe9\030\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\037\uffe9\045\uffe9\057\uffe9\001\002\000" +
    "\012\006\122\012\023\013\012\014\016\001\002\000\004" +
    "\010\173\001\002\000\004\011\uff93\001\002\000\004\011" +
    "\uff92\001\002\000\004\021\141\001\002\000\004\011\127" +
    "\001\002\000\024\004\026\005\047\006\070\007\050\015" +
    "\004\016\020\020\015\032\022\045\011\001\002\000\040" +
    "\011\132\024\uffac\027\uffac\031\uffac\032\uffac\042\uffac\043" +
    "\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\001\002\000\036\024\056\027\057\031" +
    "\073\032\072\042\067\043\062\044\065\046\063\047\060" +
    "\050\052\051\054\052\064\053\053\054\061\001\002\000" +
    "\004\006\134\001\002\000\004\021\uff94\001\002\000\006" +
    "\031\135\032\136\001\002\000\004\031\140\001\002\000" +
    "\004\032\137\001\002\000\004\021\uff8f\001\002\000\004" +
    "\021\uff90\001\002\000\004\022\142\001\002\000\050\004" +
    "\026\005\047\006\035\007\050\012\023\013\012\014\016" +
    "\015\004\016\020\017\025\020\015\026\005\030\036\032" +
    "\022\033\006\034\021\035\027\037\143\045\011\001\002" +
    "\000\054\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\172\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\023\uffc6\026\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\037\uffc6\045\uffc6\001\002\000\052\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\023\uffcf\026\uffcf\030\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\037\uffcf\045\uffcf\001\002\000" +
    "\054\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\171\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\023" +
    "\uffc9\026\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\045\uffc9\001\002\000\052\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\023\uffd0\026\uffd0\030\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\045\uffd0\001\002\000\052" +
    "\004\026\005\047\006\035\007\050\012\023\013\012\014" +
    "\016\015\004\016\020\017\025\020\015\023\167\026\005" +
    "\030\036\032\022\033\006\034\021\035\027\037\143\045" +
    "\011\001\002\000\054\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\166\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\026\uffcb\030\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\037\uffcb\045\uffcb\001\002\000\052\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\023\uffcd\026\uffcd\030" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\045\uffcd" +
    "\001\002\000\054\004\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\165\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\023\uffca\026\uffca\030\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\037\uffca\045\uffca\001\002\000\054\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\011\164\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\023\uffd1\026\uffd1" +
    "\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\045" +
    "\uffd1\001\002\000\052\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\023\uffce\026\uffce\030\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\037\uffce\045\uffce\001\002\000\052\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\023\uff8d\026\uff8d\030\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\045\uff8d\001\002" +
    "\000\054\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\163\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\023\uffcc\026\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\037\uffcc\045\uffcc\001\002\000\054\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\011\162\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8\026\uffc8\030\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\045\uffc8\001" +
    "\002\000\054\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\161" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\023\uffc7\026\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\037\uffc7\045\uffc7\001\002\000\052\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\023\uffd2\026\uffd2\030\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\045\uffd2\001\002" +
    "\000\052\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\023\uffd3" +
    "\026\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\045\uffd3\001\002\000\052\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\023\uffd8\026\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\037\uffd8\045\uffd8\001\002\000\052\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\023\uffd9\026\uffd9\030" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\045\uffd9" +
    "\001\002\000\052\004\uffd6\005\uffd6\006\uffd6\007\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\023\uffd6\026\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\037\uffd6\045\uffd6\001\002\000\052\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\023\uffd7\026\uffd7\030\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\037\uffd7\045\uffd7\001\002\000" +
    "\056\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\023" +
    "\uff95\026\uff95\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\037\uff95\045\uff95\057\uff95\001\002\000\052\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\023\uff8e\026\uff8e\030\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e\045\uff8e\001\002" +
    "\000\052\004\uffd4\005\uffd4\006\uffd4\007\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\023\uffd4" +
    "\026\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037" +
    "\uffd4\045\uffd4\001\002\000\052\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\023\uffd5\026\uffd5\030\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\037\uffd5\045\uffd5\001\002\000\024\004" +
    "\026\005\047\006\070\007\050\015\004\016\020\020\015" +
    "\032\022\045\011\001\002\000\112\002\uff91\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\023\uff91\024\056\026" +
    "\uff91\027\057\030\uff91\031\073\032\072\033\uff91\034\uff91" +
    "\035\uff91\037\uff91\042\067\043\062\044\065\045\uff91\046" +
    "\063\047\060\050\052\051\054\052\064\053\053\054\061" +
    "\057\uff91\001\002\000\026\004\026\005\047\006\070\007" +
    "\050\015\004\016\020\020\015\021\177\032\022\045\011" +
    "\001\002\000\004\021\206\001\002\000\060\002\uff7c\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\023\uff7c\026" +
    "\uff7c\030\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\037\uff7c" +
    "\045\uff7c\057\uff7c\001\002\000\042\021\uff7a\024\056\027" +
    "\057\031\073\032\072\042\067\043\062\044\065\046\063" +
    "\047\060\050\052\051\054\052\064\053\053\054\061\055" +
    "\202\001\002\000\006\021\uff79\055\204\001\002\000\024" +
    "\004\026\005\047\006\070\007\050\015\004\016\020\020" +
    "\015\032\022\045\011\001\002\000\042\021\uff77\024\056" +
    "\027\057\031\073\032\072\042\067\043\062\044\065\046" +
    "\063\047\060\050\052\051\054\052\064\053\053\054\061" +
    "\055\uff77\001\002\000\024\004\026\005\047\006\070\007" +
    "\050\015\004\016\020\020\015\032\022\045\011\001\002" +
    "\000\042\021\uff78\024\056\027\057\031\073\032\072\042" +
    "\067\043\062\044\065\046\063\047\060\050\052\051\054" +
    "\052\064\053\053\054\061\055\uff78\001\002\000\060\002" +
    "\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\011\uff7b\012\uff7b" +
    "\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\023" +
    "\uff7b\026\uff7b\030\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b" +
    "\037\uff7b\045\uff7b\057\uff7b\001\002\000\062\002\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\210\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\023" +
    "\uffc4\026\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\037\uffc4\045\uffc4\057\uffc4\001\002\000\016\004\214\005" +
    "\211\007\212\015\215\016\216\056\220\001\002\000\060" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\023\uffbf\026\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\037\uffbf\045\uffbf\057\uffbf\001\002\000\060\002\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\023\uffbe" +
    "\026\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\037" +
    "\uffbe\045\uffbe\057\uffbe\001\002\000\060\002\uffbb\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\023\uffbb\026\uffbb" +
    "\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\045" +
    "\uffbb\057\uffbb\001\002\000\060\002\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\026\uffc0\030\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\045\uffc0\057" +
    "\uffc0\001\002\000\060\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\023\uffbd\026\uffbd\030\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\037\uffbd\045\uffbd\057\uffbd\001" +
    "\002\000\060\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\023\uffbc\026\uffbc\030\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\037\uffbc\045\uffbc\057\uffbc\001\002\000" +
    "\060\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\023\uffc5\026\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\037\uffc5\045\uffc5\057\uffc5\001\002\000\004\020" +
    "\221\001\002\000\004\007\222\001\002\000\004\021\223" +
    "\001\002\000\060\002\uff76\004\uff76\005\uff76\006\uff76\007" +
    "\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\023\uff76\026\uff76\030\uff76\032\uff76\033" +
    "\uff76\034\uff76\035\uff76\037\uff76\045\uff76\057\uff76\001\002" +
    "\000\056\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\023\uffea\026\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\037\uffea\045\uffea\057\uffea\001\002\000\004\020\226" +
    "\001\002\000\004\021\227\001\002\000\004\022\230\001" +
    "\002\000\050\004\026\005\047\006\035\007\050\012\023" +
    "\013\012\014\016\015\004\016\020\017\025\020\015\026" +
    "\005\030\036\032\022\033\006\034\021\035\027\045\011" +
    "\057\030\001\002\000\004\023\256\001\002\000\052\004" +
    "\026\005\047\006\035\007\050\012\023\013\012\014\016" +
    "\015\004\016\020\017\025\020\015\023\uff74\026\005\030" +
    "\036\032\022\033\006\034\021\035\027\045\011\057\030" +
    "\001\002\000\060\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\011\255\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\023\ufff2\026\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\037\ufff2\045\ufff2\057\ufff2\001\002" +
    "\000\056\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\023\ufff3\026\ufff3\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\045\ufff3\057\ufff3\001\002\000\056\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\023\ufff5\026\ufff5" +
    "\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\045" +
    "\ufff5\057\ufff5\001\002\000\060\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\011\254\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\023\uffed\026\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\045\uffed\057" +
    "\uffed\001\002\000\056\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\023\ufff4\026\ufff4\030\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\037\ufff4\045\ufff4\057\ufff4\001\002\000" +
    "\060\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\253" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\023\ufff0\026\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\037\ufff0\045\ufff0\057\ufff0\001\002\000\056\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\023\ufff7\026" +
    "\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7" +
    "\045\ufff7\057\ufff7\001\002\000\060\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\011\252\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\023\ufff8\026\ufff8\030" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\045\ufff8" +
    "\057\ufff8\001\002\000\060\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\251\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\023\uffef\026\uffef\030\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\037\uffef\045\uffef\057\uffef" +
    "\001\002\000\060\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\011\250\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\023\ufff1\026\ufff1\030\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\037\ufff1\045\ufff1\057\ufff1\001\002" +
    "\000\060\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\247\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\023\uffee\026\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\037\uffee\045\uffee\057\uffee\001\002\000\056" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6" +
    "\026\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037" +
    "\ufff6\045\ufff6\057\ufff6\001\002\000\056\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\026\ufffa\030\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\045\ufffa\057" +
    "\ufffa\001\002\000\056\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\023\ufffd\026\ufffd\030\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\037\ufffd\045\ufffd\057\ufffd\001\002\000" +
    "\056\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\023" +
    "\ufffb\026\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\037\ufffb\045\ufffb\057\ufffb\001\002\000\056\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\023\uffff\026\uffff\030" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\037\uffff\045\uffff" +
    "\057\uffff\001\002\000\056\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\023\ufffc\026\ufffc\030\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\037\ufffc\045\ufffc\057\ufffc\001\002" +
    "\000\056\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\023\ufff9\026\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\037\ufff9\045\ufff9\057\ufff9\001\002\000\056\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\023\ufffe\026\ufffe" +
    "\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\037\ufffe\045" +
    "\ufffe\057\ufffe\001\002\000\056\002\uff75\004\uff75\005\uff75" +
    "\006\uff75\007\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\023\uff75\026\uff75\030\uff75\032\uff75" +
    "\033\uff75\034\uff75\035\uff75\037\uff75\045\uff75\057\uff75\001" +
    "\002\000\004\006\260\001\002\000\004\021\261\001\002" +
    "\000\004\022\262\001\002\000\004\036\264\001\002\000" +
    "\006\036\275\040\273\001\002\000\024\004\026\005\047" +
    "\006\070\007\050\015\004\016\020\020\015\032\022\045" +
    "\011\001\002\000\040\024\056\027\057\031\073\032\072" +
    "\041\266\042\067\043\062\044\065\046\063\047\060\050" +
    "\052\051\054\052\064\053\053\054\061\001\002\000\050" +
    "\004\026\005\047\006\035\007\050\012\023\013\012\014" +
    "\016\015\004\016\020\017\025\020\015\026\005\030\036" +
    "\032\022\033\006\034\021\035\027\045\011\057\030\001" +
    "\002\000\054\004\026\005\047\006\035\007\050\012\023" +
    "\013\012\014\016\015\004\016\020\017\025\020\015\023" +
    "\uff83\026\005\030\036\032\022\033\006\034\021\035\027" +
    "\037\uff83\045\011\057\030\001\002\000\004\037\271\001" +
    "\002\000\004\011\272\001\002\000\006\036\uff84\040\uff84" +
    "\001\002\000\004\041\304\001\002\000\004\023\303\001" +
    "\002\000\024\004\026\005\047\006\070\007\050\015\004" +
    "\016\020\020\015\032\022\045\011\001\002\000\040\024" +
    "\056\027\057\031\073\032\072\041\277\042\067\043\062" +
    "\044\065\046\063\047\060\050\052\051\054\052\064\053" +
    "\053\054\061\001\002\000\050\004\026\005\047\006\035" +
    "\007\050\012\023\013\012\014\016\015\004\016\020\017" +
    "\025\020\015\026\005\030\036\032\022\033\006\034\021" +
    "\035\027\045\011\057\030\001\002\000\004\037\301\001" +
    "\002\000\004\011\302\001\002\000\006\036\uff85\040\uff85" +
    "\001\002\000\056\002\uff86\004\uff86\005\uff86\006\uff86\007" +
    "\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\023\uff86\026\uff86\030\uff86\032\uff86\033\uff86\034" +
    "\uff86\035\uff86\037\uff86\045\uff86\057\uff86\001\002\000\050" +
    "\004\026\005\047\006\035\007\050\012\023\013\012\014" +
    "\016\015\004\016\020\017\025\020\015\026\005\030\036" +
    "\032\022\033\006\034\021\035\027\045\011\057\030\001" +
    "\002\000\004\023\uff82\001\002\000\024\004\026\005\047" +
    "\006\070\007\050\015\004\016\020\020\015\032\022\045" +
    "\011\001\002\000\040\021\uffa5\024\uffab\027\uffab\031\uffab" +
    "\032\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\001\002\000\040" +
    "\021\uffa6\024\uffac\027\uffac\031\uffac\032\uffac\042\uffac\043" +
    "\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\001\002\000\004\021\312\001\002\000" +
    "\004\022\313\001\002\000\050\004\026\005\047\006\035" +
    "\007\050\012\023\013\012\014\016\015\004\016\020\017" +
    "\025\020\015\026\005\030\036\032\022\033\006\034\021" +
    "\035\027\037\143\045\011\001\002\000\052\004\026\005" +
    "\047\006\035\007\050\012\023\013\012\014\016\015\004" +
    "\016\020\017\025\020\015\023\316\026\005\030\036\032" +
    "\022\033\006\034\021\035\027\037\143\045\011\001\002" +
    "\000\052\004\uff9d\005\uff9d\006\uff9d\007\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\023\uff9d" +
    "\026\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\045\uff9d\001\002\000\060\002\uffaa\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\023\uffaa\025\322\026\uffaa\030\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\045\uffaa\057" +
    "\uffaa\001\002\000\052\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\023\uff9e\026\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\037\uff9e\045\uff9e\001\002\000\060\002\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\023\uffa8\025\322\026" +
    "\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8" +
    "\045\uffa8\057\uffa8\001\002\000\056\002\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\023\uffa9\026\uffa9\030\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\045\uffa9\057\uffa9" +
    "\001\002\000\006\017\325\022\324\001\002\000\060\002" +
    "\uff97\004\uff97\005\uff97\006\uff97\007\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\023\uff97\025" +
    "\uff97\026\uff97\030\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\037\uff97\045\uff97\057\uff97\001\002\000\050\004\026\005" +
    "\047\006\035\007\050\012\023\013\012\014\016\015\004" +
    "\016\020\017\025\020\015\026\005\030\036\032\022\033" +
    "\006\034\021\035\027\037\143\045\011\001\002\000\004" +
    "\020\326\001\002\000\024\004\026\005\047\006\070\007" +
    "\050\015\004\016\020\020\015\032\022\045\011\001\002" +
    "\000\004\021\330\001\002\000\004\022\331\001\002\000" +
    "\050\004\026\005\047\006\035\007\050\012\023\013\012" +
    "\014\016\015\004\016\020\017\025\020\015\026\005\030" +
    "\036\032\022\033\006\034\021\035\027\037\143\045\011" +
    "\001\002\000\052\004\026\005\047\006\035\007\050\012" +
    "\023\013\012\014\016\015\004\016\020\017\025\020\015" +
    "\023\333\026\005\030\036\032\022\033\006\034\021\035" +
    "\027\037\143\045\011\001\002\000\060\002\uff96\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\023\uff96\025\uff96\026\uff96" +
    "\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\037\uff96\045" +
    "\uff96\057\uff96\001\002\000\052\004\026\005\047\006\035" +
    "\007\050\012\023\013\012\014\016\015\004\016\020\017" +
    "\025\020\015\023\336\026\005\030\036\032\022\033\006" +
    "\034\021\035\027\037\143\045\011\001\002\000\052\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\023\uff9a\026\uff9a\030" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\045\uff9a" +
    "\001\002\000\056\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\023\uff9c\026\uff9c\030\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\037\uff9c\045\uff9c\057\uff9c\001\002\000\052" +
    "\004\uff9b\005\uff9b\006\uff9b\007\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\023\uff9b\026\uff9b" +
    "\030\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\045" +
    "\uff9b\001\002\000\056\002\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\023\uffa7\026\uffa7\030\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\037\uffa7\045\uffa7\057\uffa7\001\002\000" +
    "\060\002\uff98\004\uff98\005\uff98\006\uff98\007\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\023" +
    "\uff98\025\uff98\026\uff98\030\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\037\uff98\045\uff98\057\uff98\001\002\000\050\004" +
    "\026\005\047\006\035\007\050\012\023\013\012\014\016" +
    "\015\004\016\020\017\025\020\015\026\005\030\036\032" +
    "\022\033\006\034\021\035\027\037\143\045\011\001\002" +
    "\000\052\004\026\005\047\006\035\007\050\012\023\013" +
    "\012\014\016\015\004\016\020\017\025\020\015\023\345" +
    "\026\005\030\036\032\022\033\006\034\021\035\027\037" +
    "\143\045\011\001\002\000\052\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\023\uff89\026\uff89\030\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\037\uff89\045\uff89\001\002\000\004\033" +
    "\347\001\002\000\052\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\023\uff8a\026\uff8a\030\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\037\uff8a\045\uff8a\001\002\000\004\020\350\001" +
    "\002\000\024\004\026\005\047\006\070\007\050\015\004" +
    "\016\020\020\015\032\022\045\011\001\002\000\040\021" +
    "\354\024\uffab\027\uffab\031\uffab\032\uffab\042\uffab\043\uffab" +
    "\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\001\002\000\040\021\353\024\uffac\027\uffac" +
    "\031\uffac\032\uffac\042\uffac\043\uffac\044\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\001\002" +
    "\000\060\002\uff88\004\uff88\005\uff88\006\uff88\007\uff88\011" +
    "\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\023\uff88\026\uff88\030\uff88\032\uff88\033\uff88\034" +
    "\uff88\035\uff88\037\uff88\045\uff88\057\uff88\001\002\000\060" +
    "\002\uff87\004\uff87\005\uff87\006\uff87\007\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\023\uff87\026\uff87\030\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\037\uff87\045\uff87\057\uff87\001\002\000\040\021\356" +
    "\024\056\027\057\031\073\032\072\042\067\043\062\044" +
    "\065\046\063\047\060\050\052\051\054\052\064\053\053" +
    "\054\061\001\002\000\120\002\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\037\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\057\uffad\001\002\000\056\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8\026\uffe8\030" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\045\uffe8" +
    "\057\uffe8\001\002\000\120\002\uff7f\004\uff7f\005\uff7f\006" +
    "\uff7f\007\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\023\uff7f\024\056\026" +
    "\uff7f\027\057\030\uff7f\031\073\032\072\033\uff7f\034\uff7f" +
    "\035\uff7f\037\uff7f\041\uff7f\042\067\043\uff7f\044\uff7f\045" +
    "\uff7f\046\063\047\060\050\052\051\054\052\064\053\053" +
    "\054\061\055\uff7f\057\uff7f\001\002\000\024\004\026\005" +
    "\047\006\070\007\050\015\004\016\020\020\015\032\022" +
    "\045\011\001\002\000\040\021\370\024\uffab\027\uffab\031" +
    "\uffab\032\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\001\002\000" +
    "\040\021\364\024\uffac\027\uffac\031\uffac\032\uffac\042\uffac" +
    "\043\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\001\002\000\004\022\365\001\002" +
    "\000\050\004\026\005\047\006\035\007\050\012\023\013" +
    "\012\014\016\015\004\016\020\017\025\020\015\026\005" +
    "\030\036\032\022\033\006\034\021\035\027\037\143\045" +
    "\011\001\002\000\052\004\026\005\047\006\035\007\050" +
    "\012\023\013\012\014\016\015\004\016\020\017\025\020" +
    "\015\023\367\026\005\030\036\032\022\033\006\034\021" +
    "\035\027\037\143\045\011\001\002\000\056\002\uff8c\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\023\uff8c\026\uff8c\030" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\045\uff8c" +
    "\057\uff8c\001\002\000\004\022\371\001\002\000\050\004" +
    "\026\005\047\006\035\007\050\012\023\013\012\014\016" +
    "\015\004\016\020\017\025\020\015\026\005\030\036\032" +
    "\022\033\006\034\021\035\027\037\143\045\011\001\002" +
    "\000\052\004\026\005\047\006\035\007\050\012\023\013" +
    "\012\014\016\015\004\016\020\017\025\020\015\023\373" +
    "\026\005\030\036\032\022\033\006\034\021\035\027\037" +
    "\143\045\011\001\002\000\056\002\uff8b\004\uff8b\005\uff8b" +
    "\006\uff8b\007\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\023\uff8b\026\uff8b\030\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\037\uff8b\045\uff8b\057\uff8b\001" +
    "\002\000\024\004\026\005\047\006\070\007\050\015\004" +
    "\016\020\020\015\032\022\045\011\001\002\000\040\021" +
    "\376\024\056\027\057\031\073\032\072\042\067\043\062" +
    "\044\065\046\063\047\060\050\052\051\054\052\064\053" +
    "\053\054\061\001\002\000\060\002\uff99\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\023\uff99\026\uff99\030\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\037\uff99\045\uff99\057" +
    "\uff99\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\046\002\042\003\006\004\044\005\037\006" +
    "\033\010\016\013\023\016\041\021\007\026\031\027\040" +
    "\030\036\032\032\036\030\040\013\041\043\042\045\046" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\044\005\241\006\033\010\240\013" +
    "\023\016\232\021\245\026\243\027\234\030\237\032\236" +
    "\036\030\040\242\041\244\042\235\046\233\001\001\000" +
    "\002\001\001\000\010\004\357\013\023\036\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\354\013\023\036\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\107\013\023\036\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\112\013\023\036\030\001\001\000\010\004\111\013\023" +
    "\036\030\001\001\000\010\004\110\013\023\036\030\001" +
    "\001\000\010\004\074\013\023\036\030\001\001\000\010" +
    "\004\105\013\023\036\030\001\001\000\010\004\104\013" +
    "\023\036\030\001\001\000\010\004\103\013\023\036\030" +
    "\001\001\000\010\004\102\013\023\036\030\001\001\000" +
    "\010\004\101\013\023\036\030\001\001\000\010\004\100" +
    "\013\023\036\030\001\001\000\010\004\077\013\023\036" +
    "\030\001\001\000\010\004\076\013\023\036\030\001\001" +
    "\000\010\004\073\013\023\036\030\001\001\000\010\004" +
    "\070\013\023\036\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\074\013\023\036\030\001\001\000" +
    "\010\004\073\013\023\036\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\107\013\023\036\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\122\006" +
    "\033\022\124\024\125\026\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\130\013\127\036\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\044\005\152\006\033\010\145" +
    "\013\023\016\155\021\143\023\146\026\147\027\153\030" +
    "\151\032\150\036\030\037\154\040\144\041\156\042\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\044\005\152\006\033" +
    "\010\145\013\023\016\155\021\143\026\147\027\153\030" +
    "\151\032\150\036\030\037\167\040\144\041\156\042\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\173\013\023\036\030\001\001\000\002\001" +
    "\001\000\012\004\177\013\023\036\030\043\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\200\001" +
    "\001\000\002\001\001\000\010\004\202\013\023\036\030" +
    "\001\001\000\002\001\001\000\010\004\204\013\023\036" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\216\045\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\231\004\044\005\037" +
    "\006\033\010\016\013\023\016\041\021\007\026\031\027" +
    "\040\030\036\032\032\036\030\040\013\041\043\042\045" +
    "\046\012\047\230\001\001\000\002\001\001\000\042\004" +
    "\044\005\241\006\033\010\240\013\023\016\232\021\245" +
    "\026\243\027\234\030\237\032\236\036\030\040\242\041" +
    "\244\042\235\046\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\262\001" +
    "\001\000\004\034\273\001\001\000\010\004\264\013\023" +
    "\036\030\001\001\000\002\001\001\000\046\003\266\004" +
    "\044\005\037\006\033\010\016\013\023\016\041\021\007" +
    "\026\031\027\040\030\036\032\032\035\267\036\030\040" +
    "\013\041\043\042\045\046\012\001\001\000\042\004\044" +
    "\005\241\006\033\010\240\013\023\016\232\021\245\026" +
    "\243\027\234\030\237\032\236\036\030\040\242\041\244" +
    "\042\235\046\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\275\013\023\036\030\001\001\000\002\001" +
    "\001\000\046\003\266\004\044\005\037\006\033\010\016" +
    "\013\023\016\041\021\007\026\031\027\040\030\036\032" +
    "\032\035\277\036\030\040\013\041\043\042\045\046\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\266\004\044\005\037" +
    "\006\033\010\016\013\023\016\041\021\007\026\031\027" +
    "\040\030\036\032\032\035\304\036\030\040\013\041\043" +
    "\042\045\046\012\001\001\000\002\001\001\000\012\004" +
    "\130\011\310\013\307\036\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\044\005\152\006\033\010\145\012\313\013\023" +
    "\016\155\021\143\026\147\027\153\030\151\032\150\036" +
    "\030\037\314\040\144\041\156\042\157\001\001\000\042" +
    "\004\044\005\152\006\033\010\145\013\023\016\155\021" +
    "\143\026\147\027\153\030\151\032\150\036\030\037\316" +
    "\040\144\041\156\042\157\001\001\000\002\001\001\000" +
    "\010\014\320\017\317\020\322\001\001\000\002\001\001" +
    "\000\006\014\337\020\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\044\005\152" +
    "\006\033\010\145\013\023\015\333\016\155\021\143\026" +
    "\147\027\153\030\151\032\150\036\030\037\334\040\144" +
    "\041\156\042\157\001\001\000\002\001\001\000\012\004" +
    "\130\011\326\013\307\036\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\044\005\152\006\033\010" +
    "\145\012\331\013\023\016\155\021\143\026\147\027\153" +
    "\030\151\032\150\036\030\037\314\040\144\041\156\042" +
    "\157\001\001\000\042\004\044\005\152\006\033\010\145" +
    "\013\023\016\155\021\143\026\147\027\153\030\151\032" +
    "\150\036\030\037\316\040\144\041\156\042\157\001\001" +
    "\000\002\001\001\000\042\004\044\005\152\006\033\010" +
    "\145\013\023\016\155\021\143\026\147\027\153\030\151" +
    "\032\150\036\030\037\336\040\144\041\156\042\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\044\005" +
    "\152\006\033\010\145\013\023\016\155\021\143\026\147" +
    "\027\153\030\151\031\342\032\150\036\030\037\343\040" +
    "\144\041\156\042\157\001\001\000\042\004\044\005\152" +
    "\006\033\010\145\013\023\016\155\021\143\026\147\027" +
    "\153\030\151\032\150\036\030\037\345\040\144\041\156" +
    "\042\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\130\013\351" +
    "\036\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\130\013\362\036\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\044\005\152\006" +
    "\033\010\145\013\023\016\155\021\143\026\147\027\153" +
    "\030\151\031\365\032\150\036\030\037\343\040\144\041" +
    "\156\042\157\001\001\000\042\004\044\005\152\006\033" +
    "\010\145\013\023\016\155\021\143\026\147\027\153\030" +
    "\151\032\150\036\030\037\345\040\144\041\156\042\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\044\005\152\006\033\010\145\013\023\016\155\021\143" +
    "\026\147\027\153\030\151\031\371\032\150\036\030\037" +
    "\343\040\144\041\156\042\157\001\001\000\042\004\044" +
    "\005\152\006\033\010\145\013\023\016\155\021\143\026" +
    "\147\027\153\030\151\032\150\036\030\037\345\040\144" +
    "\041\156\042\157\001\001\000\002\001\001\000\010\004" +
    "\374\013\023\036\030\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }

    public void Addclase(String clase, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        clasesJS nuevov= new clasesJS(clase, archivo);
        
            for(int i=0;i<proyecto.Interfaz.clasestemp.size();i++){
                if(proyecto.Interfaz.clasestemp.get(i).equals(clase)){
                    if(proyecto.Interfaz.totallclasea == proyecto.Interfaz.totallclase){
                        proyecto.Interfaz.listaclasesjs.add(nuevov);
                    }        
                    i = proyecto.Interfaz.clasestemp.size();
                }
            }

        }
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION INC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INSTRUCCION DEC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION CALLM puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCION WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INSTRUCCION SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INSTRUCCION CLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= INSTRUCCION ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= INSTRUCCION DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= INSTRUCCION INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= INSTRUCCION DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= INSTRUCCION CALLM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= INC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= DEC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= CALLM puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= CLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= CALLM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCIONL ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCIONL ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCIONL ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCIONL ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCIONL ::= breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCIONL ::= INC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCIONL ::= DEC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCIONL ::= CALLM puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCIONL ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCIONL ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCIONL ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCIONL ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCIONL ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCIONL ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCIONL ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCIONL ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCIONL ::= INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCIONL ::= DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCIONL ::= CALLM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONL ::= breakpr 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLES ::= PRVARIABLES id igual VALOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= PRVARIABLES id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PRVARIABLES ::= var 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRVARIABLES ::= let 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRVARIABLES ::= constvar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALOR ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR ::= IMPORT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION porcentaje EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= menos EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= LOGICO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= LOGICO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELACIONAL ::= EXPRESION digual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RELACIONAL ::= EXPRESION menorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RELACIONAL ::= EXPRESION mayorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPOIF ::= CUERPOIF INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPOIF ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELSE ::= elsepr llaveiz CUERPOELSE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPOELSE ::= CUERPOELSE INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPOELSE ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PRINTCONSOLE ::= imprimir pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELSEIF ::= ELSEIF CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELSEIF ::= CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSEIF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETTINGFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INICIOFOR ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INICIOFOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ASIGNACION ::= id igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INCFOR ::= id mas mas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INCFOR ::= id menos menos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPOFOR ::= CUERPOFOR INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPOFOR ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WHILE ::= whilepr pariz LOGICO parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPOWHILE ::= CUERPOWHILE INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPOWHILE ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz LOGICO parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH FINALSWITCH llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPOSWITCH ::= casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUERPOCASE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FINALSWITCH ::= defaultpr dpuntos CUERPOCASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LOGICO ::= EXPRESION andpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LOGICO ::= EXPRESION orpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LOGICO ::= notpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INC ::= EXPRESION mas mas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DEC ::= EXPRESION menos menos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CALLM ::= id pariz parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALLM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CALLM ::= id pariz CUERPOMETODO parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALLM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CUERPOMETODO ::= EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CUERPOMETODO ::= EXPRESION CUERPOMETODO2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CUERPOMETODO2 ::= CUERPOMETODO2 coma EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CUERPOMETODO2 ::= coma EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IMPORT ::= requirepr pariz cadena parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CLASS ::= classpr id pariz parder llaveiz CUERPOCLASE llaveder 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.clasestemp.add(a);
        //System.out.println("Archivo A");
    } else {
        Addclase(a,proyecto.Interfaz.nombrearchivojs);
        //System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPOCLASE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
