
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores2;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\005\006\000\002\005\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\010\011\000" +
    "\002\010\012\000\002\010\012\000\002\010\013\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\012\004\000\002\012\003\000\002\014\006\000\002" +
    "\015\004\000\002\015\003\000\002\016\006\000\002\017" +
    "\004\000\002\017\003\000\002\020\012\000\002\021\011" +
    "\000\002\022\007\000\002\022\003\000\002\024\003\000" +
    "\002\024\003\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\023\004\000\002\023\003\000\002\027\011" +
    "\000\002\027\011\000\002\031\004\000\002\031\003\000" +
    "\002\030\012\000\002\030\012\000\002\032\011\000\002" +
    "\032\012\000\002\033\011\000\002\033\007\000\002\033" +
    "\010\000\002\033\006\000\002\033\003\000\002\035\003" +
    "\000\002\034\005\000\002\034\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\040\005\000\002" +
    "\041\005\000\002\042\005\000\002\042\006\000\002\043" +
    "\003\000\002\043\004\000\002\043\003\000\002\044\005" +
    "\000\002\044\004\000\002\045\006\000\002\046\007\000" +
    "\002\047\004\000\002\047\003\000\002\050\010\000\002" +
    "\050\011\000\002\051\004\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\054\003\025\004\027\005\052\006\037\007" +
    "\053\012\023\013\012\014\015\015\004\016\020\017\026" +
    "\020\016\026\005\030\040\032\022\033\006\034\021\035" +
    "\030\045\011\056\043\057\031\001\002\000\130\002\uffb8" +
    "\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\001\002\000\004\020\u0112\001" +
    "\002\000\004\020\u0107\001\002\000\054\002\000\004\027" +
    "\005\052\006\037\007\053\012\023\013\012\014\015\015" +
    "\004\016\020\017\026\020\016\026\005\030\040\032\022" +
    "\033\006\034\021\035\030\045\011\056\043\057\031\001" +
    "\002\000\066\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\023\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\045\uffe3\056" +
    "\uffe3\057\uffe3\001\002\000\026\004\027\005\052\006\073" +
    "\007\053\015\004\016\020\020\016\032\022\045\011\056" +
    "\043\001\002\000\004\006\uffbe\001\002\000\066\002\uffe0" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0" +
    "\026\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\045\uffe0\056\uffe0\057\uffe0\001\002" +
    "\000\070\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\011\u0105\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\023\uffdc\026\uffdc\030\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\045\uffdc" +
    "\056\uffdc\057\uffdc\001\002\000\004\006\uffbd\001\002\000" +
    "\026\004\027\005\052\006\073\007\053\015\004\016\020" +
    "\020\016\032\022\045\011\056\043\001\002\000\066\002" +
    "\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\023" +
    "\uffe4\026\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\045\uffe4\056\uffe4\057\uffe4\001" +
    "\002\000\130\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002" +
    "\000\004\022\370\001\002\000\026\004\027\005\052\006" +
    "\073\007\053\015\004\016\020\020\016\032\022\045\011" +
    "\056\043\001\002\000\004\006\uffbf\001\002\000\130\002" +
    "\uffae\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\001\002\000\066\002\uffd9" +
    "\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\023\uffd9" +
    "\026\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\045\uffd9\056\uffd9\057\uffd9\001\002" +
    "\000\004\020\333\001\002\000\130\002\uffba\003\uffba\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023" +
    "\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\001\002\000\004\020\256\001\002\000\004" +
    "\006\250\001\002\000\130\002\uffad\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\001\002\000\070\002\uffde\003\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\011\247\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\023\uffde\026\uffde\030\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\045\uffde\056\uffde\057\uffde\001\002\000\066\002\uffe1" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\023\uffe1" +
    "\026\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\045\uffe1\056\uffe1\057\uffe1\001\002" +
    "\000\130\002\uffac\003\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002\000" +
    "\004\006\244\001\002\000\046\010\151\020\240\024\uffbb" +
    "\027\uffbb\031\uffbb\032\uffbb\042\uffbb\043\uffbb\044\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\060\152\061\153\001\002\000\004\020\131\001\002\000" +
    "\070\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\011\130\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\023\uffdd\026\uffdd\030\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\045\uffdd\056" +
    "\uffdd\057\uffdd\001\002\000\070\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\011\127\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\023\uffe5\026\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\045\uffe5\056\uffe5\057\uffe5\001\002\000\004" +
    "\020\124\001\002\000\066\002\uffe2\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\023\uffe2\026\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\045\uffe2\056\uffe2\057\uffe2\001\002\000\070\002\uffdf\003" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\123\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\023" +
    "\uffdf\026\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\045\uffdf\056\uffdf\057\uffdf\001" +
    "\002\000\004\002\122\001\002\000\070\002\uffdb\003\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\121\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb" +
    "\026\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\045\uffdb\056\uffdb\057\uffdb\001\002" +
    "\000\036\024\061\027\062\031\071\032\060\042\072\043" +
    "\063\044\070\046\066\047\064\050\055\051\057\052\067" +
    "\053\056\054\065\001\002\000\070\002\uffda\003\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\054\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\023\uffda\026" +
    "\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\045\uffda\056\uffda\057\uffda\001\002\000" +
    "\130\002\uffb9\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\001\002\000\130" +
    "\002\uffbc\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000\066\002" +
    "\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\023" +
    "\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\045\uffe6\056\uffe6\057\uffe6\001" +
    "\002\000\026\004\027\005\052\006\073\007\053\015\004" +
    "\016\020\020\016\032\022\045\011\056\043\001\002\000" +
    "\026\004\027\005\052\006\073\007\053\015\004\016\020" +
    "\020\016\032\022\045\011\056\043\001\002\000\026\004" +
    "\027\005\052\006\073\007\053\015\004\016\020\020\016" +
    "\032\022\045\011\056\043\001\002\000\026\004\027\005" +
    "\052\006\073\007\053\015\004\016\020\020\016\032\114" +
    "\045\011\056\043\001\002\000\026\004\027\005\052\006" +
    "\073\007\053\015\004\016\020\020\016\032\022\045\011" +
    "\056\043\001\002\000\026\004\027\005\052\006\073\007" +
    "\053\015\004\016\020\020\016\032\022\045\011\056\043" +
    "\001\002\000\026\004\027\005\052\006\073\007\053\015" +
    "\004\016\020\020\016\032\022\045\011\056\043\001\002" +
    "\000\026\004\027\005\052\006\073\007\053\015\004\016" +
    "\020\020\016\032\022\045\011\056\043\001\002\000\030" +
    "\004\027\005\052\006\073\007\053\010\106\015\004\016" +
    "\020\020\016\032\022\045\011\056\043\001\002\000\026" +
    "\004\027\005\052\006\073\007\053\015\004\016\020\020" +
    "\016\032\022\045\011\056\043\001\002\000\026\004\027" +
    "\005\052\006\073\007\053\015\004\016\020\020\016\032" +
    "\022\045\011\056\043\001\002\000\026\004\027\005\052" +
    "\006\073\007\053\015\004\016\020\020\016\032\022\045" +
    "\011\056\043\001\002\000\030\004\027\005\052\006\073" +
    "\007\053\015\004\016\020\020\016\031\101\032\022\045" +
    "\011\056\043\001\002\000\026\004\027\005\052\006\073" +
    "\007\053\015\004\016\020\020\016\032\022\045\011\056" +
    "\043\001\002\000\130\002\uffbb\003\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\001\002\000\130\002\uffa0\003\uffa0\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\023\uffa0\024\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\076\032\075\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\066\047\064\050\055\051\057" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001" +
    "\002\000\026\004\027\005\052\006\073\007\053\015\004" +
    "\016\020\020\016\032\022\045\011\056\043\001\002\000" +
    "\026\004\027\005\052\006\073\007\053\015\004\016\020" +
    "\020\016\032\022\045\011\056\043\001\002\000\130\002" +
    "\uffb6\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\066\047\064\050\055\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\001\002\000\130\002\uffb5" +
    "\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\066\047\064\050\055\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\001\002\000\072\002\uff74\003" +
    "\uff74\004\uff74\005\uff74\006\uff74\007\uff74\011\uff74\012\uff74" +
    "\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021" +
    "\uff74\023\uff74\026\uff74\030\uff74\032\uff74\033\uff74\034\uff74" +
    "\035\uff74\036\uff74\037\uff74\040\uff74\045\uff74\056\uff74\057" +
    "\uff74\001\002\000\130\002\uff76\003\uff76\004\uff76\005\uff76" +
    "\006\uff76\007\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015" +
    "\uff76\016\uff76\017\uff76\020\uff76\021\uff76\023\uff76\024\061" +
    "\026\uff76\027\062\030\uff76\031\076\032\075\033\uff76\034" +
    "\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\072" +
    "\043\063\044\uff76\045\uff76\046\066\047\064\050\055\051" +
    "\057\052\067\053\056\054\065\055\uff76\056\uff76\057\uff76" +
    "\001\002\000\130\002\uffa1\003\uffa1\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\076\032\075\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\066\047\064\050\055\051\057" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001" +
    "\002\000\130\002\uffb4\003\uffb4\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\064\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002" +
    "\000\130\002\uffa4\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\023\uffa4\024\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\076\032\075\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\066\047\064\050\055\051\057\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001\002\000" +
    "\026\004\027\005\052\006\073\007\053\015\004\016\020" +
    "\020\016\032\022\045\011\056\043\001\002\000\130\002" +
    "\uff9e\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\023\uff9e\024\061\026\uff9e\027\062\030\uff9e" +
    "\031\076\032\075\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\072\043\063\044\070\045\uff9e" +
    "\046\066\047\064\050\055\051\057\052\067\053\056\054" +
    "\065\055\uff9e\056\uff9e\057\uff9e\001\002\000\130\002\uffb2" +
    "\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\001\002\000\130\002\uff77\003" +
    "\uff77\004\uff77\005\uff77\006\uff77\007\uff77\011\uff77\012\uff77" +
    "\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021" +
    "\uff77\023\uff77\024\061\026\uff77\027\062\030\uff77\031\076" +
    "\032\075\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040" +
    "\uff77\041\uff77\042\072\043\uff77\044\uff77\045\uff77\046\066" +
    "\047\064\050\055\051\057\052\067\053\056\054\065\055" +
    "\uff77\056\uff77\057\uff77\001\002\000\130\002\uffa3\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\076\032" +
    "\075\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\066\047" +
    "\064\050\055\051\057\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\001\002\000\130\002\uffa2\003\uffa2\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\023" +
    "\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\076\032\075" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\066\047\064" +
    "\050\055\051\057\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\001\002\000\072\002\uff73\003\uff73\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\011\uff73\012\uff73\013\uff73\014" +
    "\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\023\uff73" +
    "\026\uff73\030\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\045\uff73\056\uff73\057\uff73\001\002" +
    "\000\130\002\uffb0\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\066\047\064\050\055\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\001\002\000" +
    "\130\002\uffb1\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\066\047\064\050\055\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\130" +
    "\002\uff9f\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\076\032\075\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\066\047\064\050\055\051\057\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000\130\002" +
    "\uffb3\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\064\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\066\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\023\uffe7" +
    "\026\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\045\uffe7\056\uffe7\057\uffe7\001\002" +
    "\000\004\002\001\001\002\000\066\002\uffeb\003\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\023\uffeb\026\uffeb\030" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\045\uffeb\056\uffeb\057\uffeb\001\002\000\004\007" +
    "\125\001\002\000\004\021\126\001\002\000\130\002\uff6b" +
    "\003\uff6b\004\uff6b\005\uff6b\006\uff6b\007\uff6b\011\uff6b\012" +
    "\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b" +
    "\021\uff6b\023\uff6b\024\uff6b\026\uff6b\027\uff6b\030\uff6b\031" +
    "\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b" +
    "\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046" +
    "\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b" +
    "\055\uff6b\056\uff6b\057\uff6b\001\002\000\066\002\uffec\003" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\023\uffec\026" +
    "\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\045\uffec\056\uffec\057\uffec\001\002\000" +
    "\066\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\023\uffe9\026\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\045\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\014\003\134\006\132\012\023\013\012" +
    "\014\015\001\002\000\010\010\151\060\152\061\153\001" +
    "\002\000\004\011\uff91\001\002\000\004\021\uff92\001\002" +
    "\000\004\011\uff90\001\002\000\004\021\157\001\002\000" +
    "\004\011\140\001\002\000\026\004\027\005\052\006\073" +
    "\007\053\015\004\016\020\020\016\032\022\045\011\056" +
    "\043\001\002\000\040\011\143\024\uffae\027\uffae\031\uffae" +
    "\032\uffae\042\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\001\002\000\036" +
    "\024\061\027\062\031\076\032\075\042\072\043\063\044" +
    "\070\046\066\047\064\050\055\051\057\052\067\053\056" +
    "\054\065\001\002\000\026\004\027\005\052\006\146\007" +
    "\053\015\004\016\020\020\016\032\022\045\011\056\043" +
    "\001\002\000\004\021\uff8c\001\002\000\004\021\uff8a\001" +
    "\002\000\044\010\151\024\uffbb\027\uffbb\031\uffbb\032\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\060\152\061\153\001\002" +
    "\000\004\021\uff8b\001\002\000\004\021\uff93\001\002\000" +
    "\026\004\027\005\052\006\073\007\053\015\004\016\020" +
    "\020\016\032\022\045\011\056\043\001\002\000\026\004" +
    "\027\005\052\006\073\007\053\015\004\016\020\020\016" +
    "\032\022\045\011\056\043\001\002\000\026\004\027\005" +
    "\052\006\073\007\053\015\004\016\020\020\016\032\022" +
    "\045\011\056\043\001\002\000\124\002\uff8d\003\uff8d\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\023" +
    "\uff8d\024\061\026\uff8d\027\062\030\uff8d\031\076\032\075" +
    "\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\042" +
    "\072\043\063\044\070\045\uff8d\046\066\047\064\050\055" +
    "\051\057\052\067\053\056\054\065\056\uff8d\057\uff8d\001" +
    "\002\000\124\002\uff8e\003\uff8e\004\uff8e\005\uff8e\006\uff8e" +
    "\007\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\023\uff8e\024\061\026\uff8e" +
    "\027\062\030\uff8e\031\076\032\075\033\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\042\072\043\063\044\070" +
    "\045\uff8e\046\066\047\064\050\055\051\057\052\067\053" +
    "\056\054\065\056\uff8e\057\uff8e\001\002\000\124\002\uff8f" +
    "\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\023\uff8f\024\061\026\uff8f\027\062\030\uff8f\031" +
    "\076\032\075\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\042\072\043\063\044\070\045\uff8f\046\066\047" +
    "\064\050\055\051\057\052\067\053\056\054\065\056\uff8f" +
    "\057\uff8f\001\002\000\004\022\160\001\002\000\054\003" +
    "\167\004\027\005\052\006\172\007\053\012\023\013\012" +
    "\014\015\015\004\016\020\017\026\020\016\026\005\030" +
    "\040\032\022\033\006\034\021\035\030\037\161\045\011" +
    "\056\043\001\002\000\060\003\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\011\237\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\023\uffc3\026\uffc3\030\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\045\uffc3\056\uffc3" +
    "\001\002\000\060\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\011\236\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\023\uffc4\026\uffc4\030\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\037\uffc4\045\uffc4\056\uffc4\001\002" +
    "\000\056\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\023\uffcd\026\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\037\uffcd\045\uffcd\056\uffcd\001\002\000\060\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\235\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\023\uffc7" +
    "\026\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037" +
    "\uffc7\045\uffc7\056\uffc7\001\002\000\056\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\023\uffce\026\uffce\030\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\037\uffce\045\uffce\056" +
    "\uffce\001\002\000\056\003\167\004\027\005\052\006\172" +
    "\007\053\012\023\013\012\014\015\015\004\016\020\017" +
    "\026\020\016\023\233\026\005\030\040\032\022\033\006" +
    "\034\021\035\030\037\161\045\011\056\043\001\002\000" +
    "\056\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\023" +
    "\uffc2\026\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\037\uffc2\045\uffc2\056\uffc2\001\002\000\060\003\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\011\232\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\023\uffc9\026" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9" +
    "\045\uffc9\056\uffc9\001\002\000\056\003\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\023\uffcb\026\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\045\uffcb\056\uffcb" +
    "\001\002\000\046\010\151\020\207\024\uffbb\027\uffbb\031" +
    "\uffbb\032\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\060\152\061" +
    "\153\001\002\000\060\003\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\011\206\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\023\uffc8\026\uffc8\030\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\037\uffc8\045\uffc8\056\uffc8\001" +
    "\002\000\060\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\205\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\023\uffcf\026\uffcf\030\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\037\uffcf\045\uffcf\056\uffcf\001\002\000" +
    "\056\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\023" +
    "\uffcc\026\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\037\uffcc\045\uffcc\056\uffcc\001\002\000\056\003\uff88\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\012\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\023\uff88\026\uff88\030" +
    "\uff88\032\uff88\033\uff88\034\uff88\035\uff88\037\uff88\045\uff88" +
    "\056\uff88\001\002\000\060\003\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\011\204\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\023\uffca\026\uffca\030\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\037\uffca\045\uffca\056\uffca" +
    "\001\002\000\060\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\011\203\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\023\uffc6\026\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\037\uffc6\045\uffc6\056\uffc6\001\002" +
    "\000\060\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011" +
    "\202\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\023\uffc5\026\uffc5\030\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\037\uffc5\045\uffc5\056\uffc5\001\002\000\056" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\023\uffd1" +
    "\026\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\045\uffd1\056\uffd1\001\002\000\056\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\023\uffd2\026\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\045\uffd2\056" +
    "\uffd2\001\002\000\056\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\023\uffd7\026\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\045\uffd7\056\uffd7\001\002\000" +
    "\056\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\023" +
    "\uffd8\026\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\037\uffd8\045\uffd8\056\uffd8\001\002\000\056\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\023\uffd5\026\uffd5\030" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\045\uffd5" +
    "\056\uffd5\001\002\000\032\003\211\004\027\005\052\006" +
    "\073\007\053\015\004\016\020\020\016\021\212\032\022" +
    "\045\011\056\043\001\002\000\004\021\226\001\002\000" +
    "\004\021\uff6e\001\002\000\062\003\uff72\004\uff72\005\uff72" +
    "\006\uff72\007\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015" +
    "\uff72\016\uff72\017\uff72\020\uff72\022\221\023\uff72\026\uff72" +
    "\030\uff72\032\uff72\033\uff72\034\uff72\035\uff72\037\uff72\045" +
    "\uff72\056\uff72\001\002\000\042\021\uff70\024\061\027\062" +
    "\031\076\032\075\042\072\043\063\044\070\046\066\047" +
    "\064\050\055\051\057\052\067\053\056\054\065\055\215" +
    "\001\002\000\006\021\uff6f\055\217\001\002\000\026\004" +
    "\027\005\052\006\073\007\053\015\004\016\020\020\016" +
    "\032\022\045\011\056\043\001\002\000\042\021\uff6c\024" +
    "\061\027\062\031\076\032\075\042\072\043\063\044\070" +
    "\046\066\047\064\050\055\051\057\052\067\053\056\054" +
    "\065\055\uff6c\001\002\000\026\004\027\005\052\006\073" +
    "\007\053\015\004\016\020\020\016\032\022\045\011\056" +
    "\043\001\002\000\042\021\uff6d\024\061\027\062\031\076" +
    "\032\075\042\072\043\063\044\070\046\066\047\064\050" +
    "\055\051\057\052\067\053\056\054\065\055\uff6d\001\002" +
    "\000\054\003\167\004\027\005\052\006\172\007\053\012" +
    "\023\013\012\014\015\015\004\016\020\017\026\020\016" +
    "\026\005\030\040\032\022\033\006\034\021\035\030\037" +
    "\161\045\011\056\043\001\002\000\056\003\167\004\027" +
    "\005\052\006\172\007\053\012\023\013\012\014\015\015" +
    "\004\016\020\017\026\020\016\023\224\026\005\030\040" +
    "\032\022\033\006\034\021\035\030\037\161\045\011\056" +
    "\043\001\002\000\056\003\uff64\004\uff64\005\uff64\006\uff64" +
    "\007\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017" +
    "\uff64\020\uff64\023\uff64\026\uff64\030\uff64\032\uff64\033\uff64" +
    "\034\uff64\035\uff64\037\uff64\045\uff64\056\uff64\001\002\000" +
    "\060\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\011\uff67" +
    "\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020" +
    "\uff67\023\uff67\026\uff67\030\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\037\uff67\045\uff67\056\uff67\001\002\000\056\003" +
    "\uff65\004\uff65\005\uff65\006\uff65\007\uff65\012\uff65\013\uff65" +
    "\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\023\uff65\026" +
    "\uff65\030\uff65\032\uff65\033\uff65\034\uff65\035\uff65\037\uff65" +
    "\045\uff65\056\uff65\001\002\000\062\003\uff71\004\uff71\005" +
    "\uff71\006\uff71\007\uff71\011\uff71\012\uff71\013\uff71\014\uff71" +
    "\015\uff71\016\uff71\017\uff71\020\uff71\022\227\023\uff71\026" +
    "\uff71\030\uff71\032\uff71\033\uff71\034\uff71\035\uff71\037\uff71" +
    "\045\uff71\056\uff71\001\002\000\054\003\167\004\027\005" +
    "\052\006\172\007\053\012\023\013\012\014\015\015\004" +
    "\016\020\017\026\020\016\026\005\030\040\032\022\033" +
    "\006\034\021\035\030\037\161\045\011\056\043\001\002" +
    "\000\056\003\167\004\027\005\052\006\172\007\053\012" +
    "\023\013\012\014\015\015\004\016\020\017\026\020\016" +
    "\023\231\026\005\030\040\032\022\033\006\034\021\035" +
    "\030\037\161\045\011\056\043\001\002\000\060\003\uff66" +
    "\004\uff66\005\uff66\006\uff66\007\uff66\011\uff66\012\uff66\013" +
    "\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66\023\uff66" +
    "\026\uff66\030\uff66\032\uff66\033\uff66\034\uff66\035\uff66\037" +
    "\uff66\045\uff66\056\uff66\001\002\000\056\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\023\uffd6\026\uffd6\030\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\045\uffd6\056" +
    "\uffd6\001\002\000\066\002\uff94\003\uff94\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\020\uff94\023\uff94\026\uff94\030\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\045" +
    "\uff94\056\uff94\057\uff94\001\002\000\056\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\023\uff89\026\uff89\030\uff89" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\037\uff89\045\uff89\056" +
    "\uff89\001\002\000\056\003\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\023\uffd3\026\uffd3\030\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\037\uffd3\045\uffd3\056\uffd3\001\002\000" +
    "\056\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\023" +
    "\uffd0\026\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\037\uffd0\045\uffd0\056\uffd0\001\002\000\056\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\023\uffd4\026\uffd4\030" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\045\uffd4" +
    "\056\uffd4\001\002\000\032\003\211\004\027\005\052\006" +
    "\073\007\053\015\004\016\020\020\016\021\242\032\022" +
    "\045\011\056\043\001\002\000\004\021\243\001\002\000" +
    "\070\002\uff72\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017" +
    "\uff72\020\uff72\023\uff72\026\uff72\030\uff72\032\uff72\033\uff72" +
    "\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\045\uff72\056" +
    "\uff72\057\uff72\001\002\000\070\002\uff71\003\uff71\004\uff71" +
    "\005\uff71\006\uff71\007\uff71\011\uff71\012\uff71\013\uff71\014" +
    "\uff71\015\uff71\016\uff71\017\uff71\020\uff71\023\uff71\026\uff71" +
    "\030\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037" +
    "\uff71\040\uff71\045\uff71\056\uff71\057\uff71\001\002\000\072" +
    "\002\uffc0\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\245\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\023\uffc0\026\uffc0\030\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\045\uffc0" +
    "\056\uffc0\057\uffc0\001\002\000\026\004\027\005\052\006" +
    "\073\007\053\015\004\016\020\020\016\032\022\045\011" +
    "\056\043\001\002\000\122\002\uffc1\003\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\023\uffc1\024\061\026" +
    "\uffc1\027\062\030\uffc1\031\076\032\075\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\072\043\063\044" +
    "\070\045\uffc1\046\066\047\064\050\055\051\057\052\067" +
    "\053\056\054\065\056\uffc1\057\uffc1\001\002\000\066\002" +
    "\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023" +
    "\uffea\026\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\045\uffea\056\uffea\057\uffea\001" +
    "\002\000\004\022\251\001\002\000\054\003\167\004\027" +
    "\005\052\006\172\007\053\012\023\013\012\014\015\015" +
    "\004\016\020\017\026\020\016\026\005\030\040\032\022" +
    "\033\006\034\021\035\030\037\161\045\011\056\043\001" +
    "\002\000\056\003\167\004\027\005\052\006\172\007\053" +
    "\012\023\013\012\014\015\015\004\016\020\017\026\020" +
    "\016\023\254\026\005\030\040\032\022\033\006\034\021" +
    "\035\030\037\161\045\011\056\043\001\002\000\056\003" +
    "\uff68\004\uff68\005\uff68\006\uff68\007\uff68\012\uff68\013\uff68" +
    "\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\023\uff68\026" +
    "\uff68\030\uff68\032\uff68\033\uff68\034\uff68\035\uff68\037\uff68" +
    "\045\uff68\056\uff68\001\002\000\066\002\uff6a\003\uff6a\004" +
    "\uff6a\005\uff6a\006\uff6a\007\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\015\uff6a\016\uff6a\017\uff6a\020\uff6a\023\uff6a\026\uff6a\030" +
    "\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a" +
    "\040\uff6a\045\uff6a\056\uff6a\057\uff6a\001\002\000\056\003" +
    "\uff69\004\uff69\005\uff69\006\uff69\007\uff69\012\uff69\013\uff69" +
    "\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69\023\uff69\026" +
    "\uff69\030\uff69\032\uff69\033\uff69\034\uff69\035\uff69\037\uff69" +
    "\045\uff69\056\uff69\001\002\000\004\006\257\001\002\000" +
    "\004\021\260\001\002\000\004\022\261\001\002\000\006" +
    "\003\262\036\264\001\002\000\012\003\uff7b\023\uff7b\036" +
    "\uff7b\040\uff7b\001\002\000\012\003\320\023\321\036\322" +
    "\040\316\001\002\000\026\004\027\005\052\006\073\007" +
    "\053\015\004\016\020\020\016\032\022\045\011\056\043" +
    "\001\002\000\040\024\061\027\062\031\076\032\075\041" +
    "\266\042\072\043\063\044\070\046\066\047\064\050\055" +
    "\051\057\052\067\053\056\054\065\001\002\000\054\003" +
    "\025\004\027\005\052\006\037\007\053\012\023\013\012" +
    "\014\015\015\004\016\020\017\026\020\016\026\005\030" +
    "\040\032\022\033\006\034\021\035\030\045\011\056\043" +
    "\057\031\001\002\000\064\003\uff7a\004\027\005\052\006" +
    "\037\007\053\012\023\013\012\014\015\015\004\016\020" +
    "\017\026\020\016\023\uff7a\026\005\030\040\032\022\033" +
    "\006\034\021\035\030\036\uff7a\037\uff7a\040\uff7a\045\011" +
    "\056\043\057\031\001\002\000\014\003\uff7c\023\uff7c\036" +
    "\uff7c\037\271\040\uff7c\001\002\000\004\011\272\001\002" +
    "\000\012\003\uff7d\023\uff7d\036\uff7d\040\uff7d\001\002\000" +
    "\066\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\023\ufff6\026\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\045\ufff6\056\ufff6\057" +
    "\ufff6\001\002\000\066\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\023\ufff3\026\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\045" +
    "\ufff3\056\ufff3\057\ufff3\001\002\000\070\002\uffef\003\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\315\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\023\uffef" +
    "\026\uffef\030\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\045\uffef\056\uffef\057\uffef\001\002" +
    "\000\066\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\023\ufff7\026\ufff7\030\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\045\ufff7\056\ufff7" +
    "\057\ufff7\001\002\000\070\002\ufff1\003\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\011\314\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\026\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\045\ufff1\056\ufff1\057\ufff1\001\002\000\066\002" +
    "\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\023" +
    "\ufff4\026\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\045\ufff4\056\ufff4\057\ufff4\001" +
    "\002\000\070\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\011\313\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\023\ufff0\026\ufff0\030\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\045" +
    "\ufff0\056\ufff0\057\ufff0\001\002\000\070\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\312\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\023\ufff8" +
    "\026\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\045\ufff8\056\ufff8\057\ufff8\001\002" +
    "\000\066\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\023\ufff5\026\ufff5\030\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\045\ufff5\056\ufff5" +
    "\057\ufff5\001\002\000\070\002\ufff2\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\311\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\023\ufff2\026\ufff2\030" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\045\ufff2\056\ufff2\057\ufff2\001\002\000\070\002" +
    "\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011\310" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\023\uffee\026\uffee\030\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\045\uffee\056\uffee\057" +
    "\uffee\001\002\000\070\002\uffed\003\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\011\307\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\023\uffed\026\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\045\uffed\056\uffed\057\uffed\001\002\000\066\002\ufff9" +
    "\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9" +
    "\026\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\045\ufff9\056\ufff9\057\ufff9\001\002" +
    "\000\066\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\023\ufffa\026\ufffa\030\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\045\ufffa\056\ufffa" +
    "\057\ufffa\001\002\000\066\002\ufffe\003\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\023\ufffe\026\ufffe\030\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\045\ufffe\056\ufffe\057\ufffe\001\002\000\066\002\uffff\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\023\uffff\026" +
    "\uffff\030\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\045\uffff\056\uffff\057\uffff\001\002\000" +
    "\066\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\023\ufffc\026\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\045\ufffc\056\ufffc\057" +
    "\ufffc\001\002\000\066\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\023\ufffd\026\ufffd\030\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\045" +
    "\ufffd\056\ufffd\057\ufffd\001\002\000\066\002\ufffb\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\023\ufffb\026\ufffb" +
    "\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\045\ufffb\056\ufffb\057\ufffb\001\002\000\004" +
    "\041\331\001\002\000\004\023\330\001\002\000\004\023" +
    "\uff78\001\002\000\066\002\uff81\003\uff81\004\uff81\005\uff81" +
    "\006\uff81\007\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016" +
    "\uff81\017\uff81\020\uff81\023\uff81\026\uff81\030\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\045" +
    "\uff81\056\uff81\057\uff81\001\002\000\026\004\027\005\052" +
    "\006\073\007\053\015\004\016\020\020\016\032\022\045" +
    "\011\056\043\001\002\000\040\024\061\027\062\031\076" +
    "\032\075\041\324\042\072\043\063\044\070\046\066\047" +
    "\064\050\055\051\057\052\067\053\056\054\065\001\002" +
    "\000\054\003\025\004\027\005\052\006\037\007\053\012" +
    "\023\013\012\014\015\015\004\016\020\017\026\020\016" +
    "\026\005\030\040\032\022\033\006\034\021\035\030\045" +
    "\011\056\043\057\031\001\002\000\014\003\uff7e\023\uff7e" +
    "\036\uff7e\037\326\040\uff7e\001\002\000\004\011\327\001" +
    "\002\000\012\003\uff7f\023\uff7f\036\uff7f\040\uff7f\001\002" +
    "\000\066\002\uff80\003\uff80\004\uff80\005\uff80\006\uff80\007" +
    "\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80" +
    "\020\uff80\023\uff80\026\uff80\030\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\045\uff80\056\uff80" +
    "\057\uff80\001\002\000\054\003\025\004\027\005\052\006" +
    "\037\007\053\012\023\013\012\014\015\015\004\016\020" +
    "\017\026\020\016\026\005\030\040\032\022\033\006\034" +
    "\021\035\030\045\011\056\043\057\031\001\002\000\004" +
    "\023\uff79\001\002\000\030\003\336\004\027\005\052\006" +
    "\073\007\053\015\004\016\020\020\016\032\022\045\011" +
    "\056\043\001\002\000\040\021\uffa6\024\uffad\027\uffad\031" +
    "\uffad\032\uffad\042\uffad\043\uffad\044\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\001\002\000" +
    "\040\021\uffa7\024\uffae\027\uffae\031\uffae\032\uffae\042\uffae" +
    "\043\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\001\002\000\004\021\uffa5\001\002" +
    "\000\004\021\340\001\002\000\004\022\341\001\002\000" +
    "\054\003\167\004\027\005\052\006\172\007\053\012\023" +
    "\013\012\014\015\015\004\016\020\017\026\020\016\026" +
    "\005\030\040\032\022\033\006\034\021\035\030\037\161" +
    "\045\011\056\043\001\002\000\056\003\167\004\027\005" +
    "\052\006\172\007\053\012\023\013\012\014\015\015\004" +
    "\016\020\017\026\020\016\023\344\026\005\030\040\032" +
    "\022\033\006\034\021\035\030\037\161\045\011\056\043" +
    "\001\002\000\056\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\023\uff9c\026\uff9c\030\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\037\uff9c\045\uff9c\056\uff9c\001\002\000\070" +
    "\002\uffab\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\023\uffab\025\350\026\uffab\030\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\045\uffab\056\uffab" +
    "\057\uffab\001\002\000\056\003\uff9d\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\023\uff9d\026\uff9d\030\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\037\uff9d\045\uff9d\056\uff9d\001\002" +
    "\000\066\002\uffaa\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\023\uffaa\026\uffaa\030\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\045\uffaa\056\uffaa" +
    "\057\uffaa\001\002\000\070\002\uffa9\003\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\023\uffa9\025\350\026\uffa9\030" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\045\uffa9\056\uffa9\057\uffa9\001\002\000\006\017" +
    "\353\022\352\001\002\000\070\002\uff96\003\uff96\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\023\uff96\025\uff96\026\uff96" +
    "\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\045\uff96\056\uff96\057\uff96\001\002\000\054" +
    "\003\167\004\027\005\052\006\172\007\053\012\023\013" +
    "\012\014\015\015\004\016\020\017\026\020\016\026\005" +
    "\030\040\032\022\033\006\034\021\035\030\037\161\045" +
    "\011\056\043\001\002\000\004\020\354\001\002\000\030" +
    "\003\336\004\027\005\052\006\073\007\053\015\004\016" +
    "\020\020\016\032\022\045\011\056\043\001\002\000\004" +
    "\021\356\001\002\000\004\022\357\001\002\000\054\003" +
    "\167\004\027\005\052\006\172\007\053\012\023\013\012" +
    "\014\015\015\004\016\020\017\026\020\016\026\005\030" +
    "\040\032\022\033\006\034\021\035\030\037\161\045\011" +
    "\056\043\001\002\000\056\003\167\004\027\005\052\006" +
    "\172\007\053\012\023\013\012\014\015\015\004\016\020" +
    "\017\026\020\016\023\361\026\005\030\040\032\022\033" +
    "\006\034\021\035\030\037\161\045\011\056\043\001\002" +
    "\000\070\002\uff95\003\uff95\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\023\uff95\025\uff95\026\uff95\030\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\045\uff95" +
    "\056\uff95\057\uff95\001\002\000\056\003\167\004\027\005" +
    "\052\006\172\007\053\012\023\013\012\014\015\015\004" +
    "\016\020\017\026\020\016\023\364\026\005\030\040\032" +
    "\022\033\006\034\021\035\030\037\161\045\011\056\043" +
    "\001\002\000\056\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\023\uff99\026\uff99\030\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\037\uff99\045\uff99\056\uff99\001\002\000\066" +
    "\002\uff9b\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\023\uff9b\026\uff9b\030\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\045\uff9b\056\uff9b\057\uff9b" +
    "\001\002\000\056\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\023\uff9a\026\uff9a\030\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\037\uff9a\045\uff9a\056\uff9a\001\002\000\066" +
    "\002\uffa8\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\023\uffa8\026\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\045\uffa8\056\uffa8\057\uffa8" +
    "\001\002\000\070\002\uff97\003\uff97\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\uff97\023\uff97\025\uff97\026\uff97\030\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\045\uff97\056\uff97\057\uff97\001\002\000\054\003\167\004" +
    "\027\005\052\006\172\007\053\012\023\013\012\014\015" +
    "\015\004\016\020\017\026\020\016\026\005\030\040\032" +
    "\022\033\006\034\021\035\030\037\161\045\011\056\043" +
    "\001\002\000\056\003\167\004\027\005\052\006\172\007" +
    "\053\012\023\013\012\014\015\015\004\016\020\017\026" +
    "\020\016\023\373\026\005\030\040\032\022\033\006\034" +
    "\021\035\030\037\161\045\011\056\043\001\002\000\056" +
    "\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\012\uff84\013" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\023\uff84" +
    "\026\uff84\030\uff84\032\uff84\033\uff84\034\uff84\035\uff84\037" +
    "\uff84\045\uff84\056\uff84\001\002\000\004\033\375\001\002" +
    "\000\056\003\uff85\004\uff85\005\uff85\006\uff85\007\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\023\uff85\026\uff85\030\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\037\uff85\045\uff85\056\uff85\001\002\000\004\020\376" +
    "\001\002\000\026\004\027\005\052\006\073\007\053\015" +
    "\004\016\020\020\016\032\022\045\011\056\043\001\002" +
    "\000\040\021\u0102\024\uffad\027\uffad\031\uffad\032\uffad\042" +
    "\uffad\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\001\002\000\040\021\u0101\024" +
    "\uffae\027\uffae\031\uffae\032\uffae\042\uffae\043\uffae\044\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\001\002\000\070\002\uff83\003\uff83\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\023\uff83\026\uff83\030\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\045\uff83\056\uff83\057\uff83\001\002\000\070\002\uff82" +
    "\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\011\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\023\uff82\026\uff82\030\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\045\uff82\056\uff82\057\uff82" +
    "\001\002\000\040\021\u0104\024\061\027\062\031\076\032" +
    "\075\042\072\043\063\044\070\046\066\047\064\050\055" +
    "\051\057\052\067\053\056\054\065\001\002\000\130\002" +
    "\uffaf\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002\000\066\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8" +
    "\026\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\045\uffe8\056\uffe8\057\uffe8\001\002" +
    "\000\130\002\uff75\003\uff75\004\uff75\005\uff75\006\uff75\007" +
    "\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\020\uff75\021\uff75\023\uff75\024\061\026\uff75\027" +
    "\062\030\uff75\031\076\032\075\033\uff75\034\uff75\035\uff75" +
    "\036\uff75\037\uff75\040\uff75\041\uff75\042\072\043\uff75\044" +
    "\uff75\045\uff75\046\066\047\064\050\055\051\057\052\067" +
    "\053\056\054\065\055\uff75\056\uff75\057\uff75\001\002\000" +
    "\026\004\027\005\052\006\073\007\053\015\004\016\020" +
    "\020\016\032\022\045\011\056\043\001\002\000\040\021" +
    "\u010e\024\uffad\027\uffad\031\uffad\032\uffad\042\uffad\043\uffad" +
    "\044\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\001\002\000\040\021\u010a\024\uffae\027\uffae" +
    "\031\uffae\032\uffae\042\uffae\043\uffae\044\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\001\002" +
    "\000\004\022\u010b\001\002\000\054\003\167\004\027\005" +
    "\052\006\172\007\053\012\023\013\012\014\015\015\004" +
    "\016\020\017\026\020\016\026\005\030\040\032\022\033" +
    "\006\034\021\035\030\037\161\045\011\056\043\001\002" +
    "\000\056\003\167\004\027\005\052\006\172\007\053\012" +
    "\023\013\012\014\015\015\004\016\020\017\026\020\016" +
    "\023\u010d\026\005\030\040\032\022\033\006\034\021\035" +
    "\030\037\161\045\011\056\043\001\002\000\066\002\uff87" +
    "\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\023\uff87" +
    "\026\uff87\030\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\045\uff87\056\uff87\057\uff87\001\002" +
    "\000\004\022\u010f\001\002\000\054\003\167\004\027\005" +
    "\052\006\172\007\053\012\023\013\012\014\015\015\004" +
    "\016\020\017\026\020\016\026\005\030\040\032\022\033" +
    "\006\034\021\035\030\037\161\045\011\056\043\001\002" +
    "\000\056\003\167\004\027\005\052\006\172\007\053\012" +
    "\023\013\012\014\015\015\004\016\020\017\026\020\016" +
    "\023\u0111\026\005\030\040\032\022\033\006\034\021\035" +
    "\030\037\161\045\011\056\043\001\002\000\066\002\uff86" +
    "\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\012\uff86\013" +
    "\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\023\uff86" +
    "\026\uff86\030\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\045\uff86\056\uff86\057\uff86\001\002" +
    "\000\026\004\027\005\052\006\073\007\053\015\004\016" +
    "\020\020\016\032\022\045\011\056\043\001\002\000\040" +
    "\021\u0114\024\061\027\062\031\076\032\075\042\072\043" +
    "\063\044\070\046\066\047\064\050\055\051\057\052\067" +
    "\053\056\054\065\001\002\000\070\002\uff98\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\023\uff98\026" +
    "\uff98\030\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\045\uff98\056\uff98\057\uff98\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\050\002\045\003\006\004\047\005\041\006" +
    "\035\010\016\013\023\016\044\021\007\026\032\027\043" +
    "\030\040\032\033\036\031\040\013\041\046\042\050\045" +
    "\034\046\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\047\005\301\006\035\010" +
    "\275\013\023\016\303\021\272\026\276\027\302\030\300" +
    "\032\277\036\031\040\274\041\304\042\305\045\034\046" +
    "\273\001\001\000\002\001\001\000\012\004\u0105\013\023" +
    "\036\031\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\u0102" +
    "\013\023\036\031\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\114\013\023" +
    "\036\031\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\117\013\023\036" +
    "\031\045\034\001\001\000\012\004\116\013\023\036\031" +
    "\045\034\001\001\000\012\004\115\013\023\036\031\045" +
    "\034\001\001\000\012\004\077\013\023\036\031\045\034" +
    "\001\001\000\012\004\112\013\023\036\031\045\034\001" +
    "\001\000\012\004\111\013\023\036\031\045\034\001\001" +
    "\000\012\004\110\013\023\036\031\045\034\001\001\000" +
    "\012\004\107\013\023\036\031\045\034\001\001\000\012" +
    "\004\104\013\023\036\031\045\034\001\001\000\012\004" +
    "\103\013\023\036\031\045\034\001\001\000\012\004\102" +
    "\013\023\036\031\045\034\001\001\000\012\004\101\013" +
    "\023\036\031\045\034\001\001\000\012\004\076\013\023" +
    "\036\031\045\034\001\001\000\012\004\073\013\023\036" +
    "\031\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\077\013\023\036\031\045\034\001\001\000" +
    "\012\004\076\013\023\036\031\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\106\013\023\036\031\045\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\114\013\023\036" +
    "\031\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\132\006\035\022\135\024\136\026\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\141\013\140\036\031\045\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\047\013\023" +
    "\025\147\026\144\036\031\040\143\041\146\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\155\013" +
    "\023\036\031\045\034\001\001\000\012\004\154\013\023" +
    "\036\031\045\034\001\001\000\012\004\153\013\023\036" +
    "\031\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\047\005" +
    "\173\006\035\010\164\013\023\016\176\021\162\023\165" +
    "\026\167\027\174\030\172\032\170\036\031\037\175\040" +
    "\163\041\177\042\200\045\034\050\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\047\005\173\006\035" +
    "\010\164\013\023\016\176\021\162\026\167\027\174\030" +
    "\172\032\170\036\031\037\233\040\163\041\177\042\200" +
    "\045\034\050\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\212\013\023\036\031" +
    "\043\207\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\213\001\001\000\002" +
    "\001\001\000\012\004\215\013\023\036\031\045\034\001" +
    "\001\000\002\001\001\000\012\004\217\013\023\036\031" +
    "\045\034\001\001\000\002\001\001\000\050\004\047\005" +
    "\173\006\035\010\164\013\023\016\176\021\162\026\167" +
    "\027\174\030\172\032\170\036\031\037\222\040\163\041" +
    "\177\042\200\045\034\050\161\051\221\001\001\000\046" +
    "\004\047\005\173\006\035\010\164\013\023\016\176\021" +
    "\162\026\167\027\174\030\172\032\170\036\031\037\224" +
    "\040\163\041\177\042\200\045\034\050\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\004\047\005\173\006\035\010\164\013" +
    "\023\016\176\021\162\026\167\027\174\030\172\032\170" +
    "\036\031\037\222\040\163\041\177\042\200\045\034\050" +
    "\161\051\227\001\001\000\046\004\047\005\173\006\035" +
    "\010\164\013\023\016\176\021\162\026\167\027\174\030" +
    "\172\032\170\036\031\037\224\040\163\041\177\042\200" +
    "\045\034\050\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\212\013" +
    "\023\036\031\043\240\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\245\013\023\036\031\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\047\005\173\006\035\010\164\013\023\016\176\021\162" +
    "\026\167\027\174\030\172\032\170\036\031\037\252\040" +
    "\163\041\177\042\200\045\034\047\251\050\161\001\001" +
    "\000\046\004\047\005\173\006\035\010\164\013\023\016" +
    "\176\021\162\026\167\027\174\030\172\032\170\036\031" +
    "\037\254\040\163\041\177\042\200\045\034\050\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\262\001\001\000\002\001\001\000\004\034\316" +
    "\001\001\000\012\004\264\013\023\036\031\045\034\001" +
    "\001\000\002\001\001\000\050\003\266\004\047\005\041" +
    "\006\035\010\016\013\023\016\044\021\007\026\032\027" +
    "\043\030\040\032\033\035\267\036\031\040\013\041\046" +
    "\042\050\045\034\046\012\001\001\000\044\004\047\005" +
    "\301\006\035\010\275\013\023\016\303\021\272\026\276" +
    "\027\302\030\300\032\277\036\031\040\274\041\304\042" +
    "\305\045\034\046\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\322\013\023" +
    "\036\031\045\034\001\001\000\002\001\001\000\050\003" +
    "\266\004\047\005\041\006\035\010\016\013\023\016\044" +
    "\021\007\026\032\027\043\030\040\032\033\035\324\036" +
    "\031\040\013\041\046\042\050\045\034\046\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\266\004\047\005\041\006\035" +
    "\010\016\013\023\016\044\021\007\026\032\027\043\030" +
    "\040\032\033\035\331\036\031\040\013\041\046\042\050" +
    "\045\034\046\012\001\001\000\002\001\001\000\014\004" +
    "\141\011\336\013\334\036\333\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\004\047\005\173\006\035" +
    "\010\164\012\341\013\023\016\176\021\162\026\167\027" +
    "\174\030\172\032\170\036\031\037\342\040\163\041\177" +
    "\042\200\045\034\050\161\001\001\000\046\004\047\005" +
    "\173\006\035\010\164\013\023\016\176\021\162\026\167" +
    "\027\174\030\172\032\170\036\031\037\344\040\163\041" +
    "\177\042\200\045\034\050\161\001\001\000\002\001\001" +
    "\000\010\014\345\017\346\020\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\365\020\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\047\005" +
    "\173\006\035\010\164\013\023\015\361\016\176\021\162" +
    "\026\167\027\174\030\172\032\170\036\031\037\362\040" +
    "\163\041\177\042\200\045\034\050\161\001\001\000\002" +
    "\001\001\000\014\004\141\011\354\013\334\036\333\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\047\005\173\006\035\010\164\012\357\013\023\016" +
    "\176\021\162\026\167\027\174\030\172\032\170\036\031" +
    "\037\342\040\163\041\177\042\200\045\034\050\161\001" +
    "\001\000\046\004\047\005\173\006\035\010\164\013\023" +
    "\016\176\021\162\026\167\027\174\030\172\032\170\036" +
    "\031\037\344\040\163\041\177\042\200\045\034\050\161" +
    "\001\001\000\002\001\001\000\046\004\047\005\173\006" +
    "\035\010\164\013\023\016\176\021\162\026\167\027\174" +
    "\030\172\032\170\036\031\037\364\040\163\041\177\042" +
    "\200\045\034\050\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\004\047\005\173\006\035\010\164\013\023" +
    "\016\176\021\162\026\167\027\174\030\172\031\370\032" +
    "\170\036\031\037\371\040\163\041\177\042\200\045\034" +
    "\050\161\001\001\000\046\004\047\005\173\006\035\010" +
    "\164\013\023\016\176\021\162\026\167\027\174\030\172" +
    "\032\170\036\031\037\373\040\163\041\177\042\200\045" +
    "\034\050\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\141\013" +
    "\377\036\376\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\141\013\u0108\036\u0107\045\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\047\005\173\006\035\010\164\013\023\016\176\021" +
    "\162\026\167\027\174\030\172\031\u010b\032\170\036\031" +
    "\037\371\040\163\041\177\042\200\045\034\050\161\001" +
    "\001\000\046\004\047\005\173\006\035\010\164\013\023" +
    "\016\176\021\162\026\167\027\174\030\172\032\170\036" +
    "\031\037\373\040\163\041\177\042\200\045\034\050\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\047\005\173\006\035\010\164\013\023\016\176\021\162" +
    "\026\167\027\174\030\172\031\u010f\032\170\036\031\037" +
    "\371\040\163\041\177\042\200\045\034\050\161\001\001" +
    "\000\046\004\047\005\173\006\035\010\164\013\023\016" +
    "\176\021\162\026\167\027\174\030\172\032\170\036\031" +
    "\037\373\040\163\041\177\042\200\045\034\050\161\001" +
    "\001\000\002\001\001\000\012\004\u0112\013\023\036\031" +
    "\045\034\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }

    /*public void Addclase(String clase, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        clasesJS nuevov= new clasesJS(clase, archivo);
        
            for(int i=0;i<proyecto.Interfaz.clasestemp.size();i++){
                if(proyecto.Interfaz.clasestemp.get(i).equals(clase)){
                    if(proyecto.Interfaz.totallclase == proyecto.Interfaz.claseslineastemp.get(i)){
                        proyecto.Interfaz.listaclasesjs.add(nuevov);
                    }        
                    i = proyecto.Interfaz.clasestemp.size();
                }
            }

        }*/
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        if(proyecto.Interfaz.archivoa == true){
            Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1, "ProyectoA/" +proyecto.Interfaz.nombrearchivojs);
            proyecto.Interfaz.listaErrores.add(nuevoE);
        }else{
            Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1, "ProyectoB/" +proyecto.Interfaz.nombrearchivojs);
            proyecto.Interfaz.listaErrores.add(nuevoE);
        }
        //proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        
        if(proyecto.Interfaz.archivoa == true){
            Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1, "ProyectoA/" +proyecto.Interfaz.nombrearchivojs);
            proyecto.Interfaz.listaErrores.add(nuevoE);
        }else{
            Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1, "ProyectoB/" +proyecto.Interfaz.nombrearchivojs);
            proyecto.Interfaz.listaErrores.add(nuevoE);
        }

        //Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1, proyecto.Interfaz.nombrearchivojs);
        //proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION INC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INSTRUCCION DEC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= INSTRUCCION CALLM puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INSTRUCCION VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTRUCCION IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INSTRUCCION FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INSTRUCCION WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INSTRUCCION SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INSTRUCCION CLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= INSTRUCCION PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= INSTRUCCION ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= INSTRUCCION DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= INSTRUCCION INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= INSTRUCCION DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= INSTRUCCION CALLM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= INC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= DEC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= CALLM puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= CLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= CALLM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCIONL ::= VARIABLES puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCIONL ::= PRINTCONSOLE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCIONL ::= ASIGNACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCIONL ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCIONL ::= breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCIONL ::= INC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCIONL ::= DEC puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCIONL ::= CALLM puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCIONL ::= METODO puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCIONL ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCIONL ::= IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCIONL ::= FOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCIONL ::= WHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCIONL ::= SWITCH 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCIONL ::= PRINTCONSOLE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCIONL ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCIONL ::= DOWHILE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCIONL ::= INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONL ::= DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCIONL ::= CALLM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCIONL ::= METODO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUCCIONL ::= breakpr 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRUCCIONL ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= PRVARIABLES id igual EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablesg++;
        proyecto.Interfaz.variablesl++;
    }else{
        proyecto.Interfaz.variablesgB++;
        proyecto.Interfaz.variableslB++;
    }
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= PRVARIABLES id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablesg++;
        proyecto.Interfaz.variablesl++;
    }else{
        proyecto.Interfaz.variablesgB++;
        proyecto.Interfaz.variableslB++;
    }
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRVARIABLES ::= var 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRVARIABLES ::= let 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRVARIABLES ::= constvar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRVARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= decimal 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= truevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= falsevar 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION porcentaje EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= menos EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= LOGICO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= IMPORT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= RELACIONAL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= LOGICO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELACIONAL ::= EXPRESION digual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RELACIONAL ::= EXPRESION menorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RELACIONAL ::= EXPRESION mayorq EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RELACIONAL ::= EXPRESION digual igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPOIF ::= CUERPOIF INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPOIF ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELSE ::= elsepr llaveiz CUERPOELSE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPOELSE ::= CUERPOELSE INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPOELSE ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PRINTCONSOLE ::= imprimir pariz EXPRESION parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCONSOLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELSEIF ::= ELSEIF CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELSEIF ::= CUERPOELSEIF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOELSEIF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETTINGFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SETTINGFOR ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETTINGFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INICIOFOR ::= VARIABLES 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INICIOFOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIOFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNACION ::= id igual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIGNACION ::= id masigual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ASIGNACION ::= id menigual EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INCFOR ::= INC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INCFOR ::= DEC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INCFOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPOFOR ::= CUERPOFOR INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CUERPOFOR ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WHILE ::= whilepr pariz LOGICO parder llaveiz CUERPOWHILE llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPOWHILE ::= CUERPOWHILE INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPOWHILE ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz LOGICO parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH FINALSWITCH llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CUERPOSWITCH ::= casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CUERPOSWITCH ::= casepr EXPRESION dpuntos CUERPOCASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CUERPOSWITCH ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CUERPOCASE ::= INSTRUCCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FINALSWITCH ::= defaultpr dpuntos CUERPOCASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FINALSWITCH ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LOGICO ::= EXPRESION andpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LOGICO ::= EXPRESION orpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LOGICO ::= notpr EXPRESION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INC ::= EXPRESION mas mas 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DEC ::= EXPRESION menos menos 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CALLM ::= id pariz parder 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numparametros = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALLM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CALLM ::= id pariz CUERPOMETODO parder 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numparametros = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALLM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CUERPOMETODO ::= EXPRESION 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numparametros++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPOMETODO ::= EXPRESION CUERPOMETODO2 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numparametros++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CUERPOMETODO ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CUERPOMETODO2 ::= CUERPOMETODO2 coma EXPRESION 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numparametros++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CUERPOMETODO2 ::= coma EXPRESION 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numparametros++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IMPORT ::= requirepr pariz cadena parder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CLASS ::= classpr id llaveiz CUERPOCLASE llaveder 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		//System.out.println("Variables");
        if(proyecto.Interfaz.archivoa == true){
            proyecto.Interfaz.clasesg++;
            proyecto.Interfaz.clasesl++;
        } else{
            proyecto.Interfaz.clasesgB++;
            proyecto.Interfaz.claseslB++;
        }
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.clasestempA.add(a);
        proyecto.Interfaz.claseslineastempA.add(proyecto.Interfaz.numlineasc);
        proyecto.Interfaz.numlineasc = 0;
        proyecto.Interfaz.clasesmetodostempA.add(proyecto.Interfaz.metodosc);
        proyecto.Interfaz.metodosc = "";
        proyecto.Interfaz.archivoclasesA.add(proyecto.Interfaz.nombrearchivojs);

        //System.out.println("Archivo A");
    } else {
        proyecto.Interfaz.clasestempB.add(a);
        proyecto.Interfaz.claseslineastempB.add(proyecto.Interfaz.numlineasc);
        proyecto.Interfaz.numlineasc = 0;
        proyecto.Interfaz.clasesmetodostempB.add(proyecto.Interfaz.metodosc);
        proyecto.Interfaz.metodosc = "";
        proyecto.Interfaz.archivoclasesB.add(proyecto.Interfaz.nombrearchivojs);
        //Addclase(a,proyecto.Interfaz.nombrearchivojs);
        //System.out.println("Archivo B");
        
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CUERPOCLASE ::= CUERPOCLASE INSTRUCCIONL 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numlineasc++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CUERPOCLASE ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numlineasc++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // METODO ::= id pariz parder llaveiz METODOBODY llaveder 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		//System.out.println("Metodos");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.metodosg++;
        proyecto.Interfaz.metodosl++;
    } else{
        proyecto.Interfaz.metodosgB++;
        proyecto.Interfaz.metodoslB++;
    }
    proyecto.Interfaz.metodosc = proyecto.Interfaz.metodosc + "-" + a;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.metodostempA.add(a);
        proyecto.Interfaz.metodosparamtempA.add(0);
        proyecto.Interfaz.metodoslineastempA.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosA.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo A");
    } else {
        proyecto.Interfaz.metodostempB.add(a);
        proyecto.Interfaz.metodosparamtempB.add(0);
        proyecto.Interfaz.metodoslineastempB.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosB.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // METODO ::= id pariz CUERPOMETODO parder llaveiz METODOBODY llaveder 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		//System.out.println("Metodos");
        if(proyecto.Interfaz.archivoa == true){
            proyecto.Interfaz.metodosg++;
            proyecto.Interfaz.metodosl++;
        } else{
            proyecto.Interfaz.metodosgB++;
            proyecto.Interfaz.metodoslB++;
        }
        proyecto.Interfaz.metodosc = proyecto.Interfaz.metodosc + "-" +  a;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.metodostempA.add(a);
        proyecto.Interfaz.metodosparamtempA.add(proyecto.Interfaz.numparametros);
        proyecto.Interfaz.metodoslineastempA.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosA.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo A");
    } else {
        proyecto.Interfaz.metodostempB.add(a);
        proyecto.Interfaz.metodosparamtempB.add(proyecto.Interfaz.numparametros);
        proyecto.Interfaz.metodoslineastempB.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosB.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo B");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // METODOBODY ::= METODOBODY INSTRUCCIONL 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numlineas++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOBODY",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // METODOBODY ::= INSTRUCCIONL 
            {
              Nodo RESULT =null;
		proyecto.Interfaz.numlineas++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOBODY",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
