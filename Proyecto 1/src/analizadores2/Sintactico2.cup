package analizadores2;
import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;

//Importaciones Jfreechart
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;

parser code
{:  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String entero, decimal, id, cadena, igual, puntocoma, var, let, constvar, truevar, falsevar, ifpr, pariz, parder, llaveiz, llaveder, menorq, elsepr, imprimir, diferente, forpr, mas, menos, whilepr, dopr, switchpr, casepr, breakpr, defaultpr, dpuntos, mayorq, andpr, orpr, notpr, por, pot, div, porcentaje;

// no terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, INSTRUCCION, EXPRESION, VARIABLES, PRVARIABLES, VALOR, IF, CONDICION, CUERPOIF, RELACIONAL, ELSE, CUERPOELSE, PRINTCONSOLE, ELSEIF, CUERPOELSEIF, FOR, SETTINGFOR, CUERPOFOR, INICIOFOR, INCFOR, ASIGNACION, WHILE, DOWHILE, CUERPOWHILE, SWITCH, CUERPOSWITCH, FINALSWITCH, CUERPOCASE, LOGICO;

//precedence left or;
//precedence left conc;
//precedence left suma, mult, inter;

//precedence left or;
precedence left mas, menos, porcentaje;
precedence left por, div;
precedence left pot;


start with INICIO;

INICIO::= INSTRUCCION;

INSTRUCCION ::= INSTRUCCION EXPRESION puntocoma
            | INSTRUCCION VARIABLES puntocoma
            | INSTRUCCION PRINTCONSOLE puntocoma
            | INSTRUCCION ASIGNACION puntocoma
            | INSTRUCCION DOWHILE puntocoma
            | INSTRUCCION EXPRESION 
            | INSTRUCCION VARIABLES
            | INSTRUCCION IF
            | INSTRUCCION FOR
            | INSTRUCCION WHILE
            | INSTRUCCION SWITCH
            | INSTRUCCION PRINTCONSOLE
            | INSTRUCCION ASIGNACION
            | INSTRUCCION DOWHILE
            | VARIABLES puntocoma
            | EXPRESION puntocoma
            | PRINTCONSOLE puntocoma
            | ASIGNACION puntocoma
            | DOWHILE puntocoma
            | VARIABLES 
            | EXPRESION
            | IF
            | FOR
            | WHILE
            | SWITCH
            | PRINTCONSOLE
            | ASIGNACION
            | DOWHILE;

VARIABLES ::= PRVARIABLES id:a igual VALOR{://System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }
:}
    |PRVARIABLES id:a {://System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }
:};

PRVARIABLES ::= var
            | let
            | constvar;

VALOR ::= entero
        | decimal
        | cadena
        | truevar
        | falsevar;

EXPRESION ::= cadena
            | id
            | entero
            | decimal
            | truevar
            | falsevar
            | EXPRESION mas EXPRESION
            | EXPRESION menos EXPRESION
            | EXPRESION por EXPRESION
            | EXPRESION div EXPRESION
            | EXPRESION pot EXPRESION
            | EXPRESION porcentaje EXPRESION
            | menos EXPRESION
            | pariz EXPRESION parder;

IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder
    | ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE
    | ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF
    | ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE;

CONDICION ::= RELACIONAL
            | LOGICO;

RELACIONAL ::= EXPRESION igual igual EXPRESION
        | EXPRESION diferente EXPRESION
        | EXPRESION menorq EXPRESION
        | EXPRESION menorq igual EXPRESION
        | EXPRESION mayorq EXPRESION
        | EXPRESION mayorq igual EXPRESION;

CUERPOIF ::= INSTRUCCION;

ELSE ::= elsepr llaveiz CUERPOELSE llaveder;

CUERPOELSE ::= INSTRUCCION;

PRINTCONSOLE ::= imprimir pariz EXPRESION parder;

ELSEIF ::= ELSEIF CUERPOELSEIF
        | CUERPOELSEIF;

CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder; 

FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder;

SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR;

INICIOFOR ::= VARIABLES
        | ASIGNACION;

ASIGNACION ::= id igual EXPRESION;

INCFOR ::= id mas mas
        | id menos menos;

CUERPOFOR ::= INSTRUCCION;

WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder
        | whilepr pariz LOGICO parder llaveiz CUERPOWHILE llaveder;

CUERPOWHILE ::= INSTRUCCION;

DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder
        | dopr llaveiz CUERPOWHILE llaveder whilepr pariz LOGICO parder;

SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH FINALSWITCH llaveder;

CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma
        | casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma;

CUERPOCASE ::= INSTRUCCION;

FINALSWITCH ::= defaultpr dpuntos CUERPOCASE;

LOGICO ::= EXPRESION andpr EXPRESION
        | EXPRESION orpr EXPRESION
        | notpr EXPRESION
        | RELACIONAL andpr RELACIONAL
        | RELACIONAL orpr RELACIONAL
        | notpr RELACIONAL;
