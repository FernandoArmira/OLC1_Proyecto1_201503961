package analizadores2;
import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;

//Importaciones Jfreechart
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;

parser code
{:  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String entero, decimal, id, cadena, igual, puntocoma, var, let, constvar, truevar, falsevar;

// no terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, INSTRUCCION, EXPRESION, VARIABLES, PRVARIABLES, VALOR;

//precedence left or;
//precedence left conc;
//precedence left suma, mult, inter;

start with INICIO;

INICIO::= INSTRUCCION;

INSTRUCCION ::= INSTRUCCION EXPRESION puntocoma
            | INSTRUCCION VARIABLES puntocoma
            | INSTRUCCION EXPRESION 
            | INSTRUCCION VARIABLES
            | VARIABLES puntocoma
            | EXPRESION puntocoma
            | VARIABLES 
            | EXPRESION;

VARIABLES ::= PRVARIABLES id:a igual VALOR{://System.out.println("Variables");
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }
:};

PRVARIABLES ::= var
            | let
            | constvar;

VALOR ::= entero
        | decimal
        | cadena
        | truevar
        | falsevar;

EXPRESION ::= cadena
            | id
            | decimal;

