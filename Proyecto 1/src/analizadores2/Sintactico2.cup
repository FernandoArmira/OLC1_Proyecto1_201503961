package analizadores2;
import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;

//Importaciones Jfreechart
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;

parser code
{:  
    

// Variables lenguaje JS
    public void Addvariable(String variable, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        variablesJS nuevov= new variablesJS(variable, archivo);
        
            for(int i=0;i<proyecto.Interfaz.variablestemp.size();i++){
                if(proyecto.Interfaz.variablestemp.get(i).equals(variable)){
                    proyecto.Interfaz.listavariablesjs.add(nuevov);
                    i = proyecto.Interfaz.variablestemp.size();
                }
            }

        }

    /*public void Addclase(String clase, String archivo){
        //variablesJS nuevov= new variablesJS(variable, archivo);
        clasesJS nuevov= new clasesJS(clase, archivo);
        
            for(int i=0;i<proyecto.Interfaz.clasestemp.size();i++){
                if(proyecto.Interfaz.clasestemp.get(i).equals(clase)){
                    if(proyecto.Interfaz.totallclase == proyecto.Interfaz.claseslineastemp.get(i)){
                        proyecto.Interfaz.listaclasesjs.add(nuevov);
                    }        
                    i = proyecto.Interfaz.clasestemp.size();
                }
            }

        }*/
        

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        proyecto.Interfaz.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String entero, decimal, id, cadena, igual, puntocoma, var, let, constvar, truevar, falsevar, ifpr, pariz, parder, llaveiz, llaveder, menorq, elsepr, imprimir, diferente, forpr, mas, menos, whilepr, dopr, switchpr, casepr, breakpr, defaultpr, dpuntos, mayorq, andpr, orpr, notpr, por, pot, div, porcentaje, menorigual, mayorigual, digual, coma, requirepr, classpr;

// no terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, INSTRUCCION, EXPRESION, VARIABLES, PRVARIABLES, VALOR, IF, CONDICION, CUERPOIF, RELACIONAL, ELSE, CUERPOELSE, PRINTCONSOLE, ELSEIF, CUERPOELSEIF, FOR, SETTINGFOR, CUERPOFOR, INICIOFOR, INCFOR, ASIGNACION, WHILE, DOWHILE, CUERPOWHILE, SWITCH, CUERPOSWITCH, FINALSWITCH, CUERPOCASE, LOGICO, INSTRUCCIONL, INC, DEC, CALLM, CUERPOMETODO, CUERPOMETODO2, IMPORT, CLASS, CUERPOCLASE, METODO, METODOBODY;

//precedence left or;
//precedence left conc;
//precedence left suma, mult, inter;

//precedence left or;
precedence left orpr;
precedence left andpr;
precedence right notpr;
precedence left digual, diferente, menorq, menorigual, mayorq, mayorigual;
precedence left mas, menos, porcentaje;
precedence left por, div;
precedence left pot;


start with INICIO;

INICIO::= INSTRUCCION;

INSTRUCCION ::= INSTRUCCION VARIABLES puntocoma
            | INSTRUCCION PRINTCONSOLE puntocoma
            | INSTRUCCION ASIGNACION puntocoma
            | INSTRUCCION DOWHILE puntocoma
            | INSTRUCCION INC puntocoma
            | INSTRUCCION DEC puntocoma
            | INSTRUCCION CALLM puntocoma
            | INSTRUCCION VARIABLES
            | INSTRUCCION IF
            | INSTRUCCION FOR
            | INSTRUCCION WHILE
            | INSTRUCCION SWITCH
            | INSTRUCCION CLASS
            | INSTRUCCION PRINTCONSOLE
            | INSTRUCCION ASIGNACION
            | INSTRUCCION DOWHILE
            | INSTRUCCION INC
            | INSTRUCCION DEC
            | INSTRUCCION CALLM
            | VARIABLES puntocoma
            | PRINTCONSOLE puntocoma
            | ASIGNACION puntocoma
            | DOWHILE puntocoma
            | INC puntocoma
            | DEC puntocoma
            | CALLM puntocoma
            | VARIABLES 
            | IF
            | FOR
            | WHILE
            | SWITCH
            | CLASS
            | PRINTCONSOLE
            | ASIGNACION
            | DOWHILE
            | INC
            | DEC
            | CALLM;

INSTRUCCIONL ::= VARIABLES puntocoma
            | PRINTCONSOLE puntocoma
            | ASIGNACION puntocoma
            | DOWHILE puntocoma
            | breakpr puntocoma
            | INC puntocoma
            | DEC puntocoma
            | CALLM puntocoma
            | METODO puntocoma
            | VARIABLES 
            | IF
            | FOR
            | WHILE
            | SWITCH
            | PRINTCONSOLE
            | ASIGNACION
            | DOWHILE
            | INC
            | DEC
            | CALLM
            | METODO
            | breakpr;

VARIABLES ::= PRVARIABLES id:a igual VALOR{://System.out.println("Variables");
    proyecto.Interfaz.variablesg++;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }
:}
    |PRVARIABLES id:a {://System.out.println("Variables");
    proyecto.Interfaz.variablesg++;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.variablestemp.add(a);
        System.out.println("Archivo A");
    } else {

        Addvariable(a,proyecto.Interfaz.nombrearchivojs);
        System.out.println("Archivo B");

    }
:};

PRVARIABLES ::= var
            | let
            | constvar;

VALOR ::= entero
        | decimal
        | cadena
        | truevar
        | falsevar
        | IMPORT;

EXPRESION ::= cadena
            | id
            | entero
            | decimal
            | truevar
            | falsevar
            | EXPRESION mas EXPRESION
            | EXPRESION menos EXPRESION
            | EXPRESION por EXPRESION
            | EXPRESION div EXPRESION
            | EXPRESION pot EXPRESION
            | EXPRESION porcentaje EXPRESION
            | menos EXPRESION
            | pariz EXPRESION parder
            | RELACIONAL
            | LOGICO;

IF ::= ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder
    | ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSE
    | ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF
    | ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder ELSEIF ELSE;

CONDICION ::= RELACIONAL
            | LOGICO;

RELACIONAL ::= EXPRESION digual EXPRESION
        | EXPRESION diferente EXPRESION
        | EXPRESION menorq EXPRESION
        | EXPRESION menorigual EXPRESION
        | EXPRESION mayorq EXPRESION
        | EXPRESION mayorigual EXPRESION;

CUERPOIF ::= CUERPOIF INSTRUCCIONL
        | INSTRUCCIONL;

ELSE ::= elsepr llaveiz CUERPOELSE llaveder;

CUERPOELSE ::= CUERPOELSE INSTRUCCIONL
           | INSTRUCCIONL;

PRINTCONSOLE ::= imprimir pariz EXPRESION parder;

ELSEIF ::= ELSEIF CUERPOELSEIF
        | CUERPOELSEIF;

CUERPOELSEIF ::= elsepr ifpr pariz CONDICION parder llaveiz CUERPOIF llaveder; 

FOR ::= forpr pariz SETTINGFOR parder llaveiz CUERPOFOR llaveder;

SETTINGFOR ::= INICIOFOR puntocoma RELACIONAL puntocoma INCFOR;

INICIOFOR ::= VARIABLES
        | ASIGNACION;

ASIGNACION ::= id igual EXPRESION;

INCFOR ::= id mas mas
        | id menos menos;

CUERPOFOR ::= CUERPOFOR INSTRUCCIONL
            | INSTRUCCIONL;

WHILE ::= whilepr pariz RELACIONAL parder llaveiz CUERPOWHILE llaveder
        | whilepr pariz LOGICO parder llaveiz CUERPOWHILE llaveder;

CUERPOWHILE ::= CUERPOWHILE INSTRUCCIONL
            | INSTRUCCIONL;

DOWHILE ::= dopr llaveiz CUERPOWHILE llaveder whilepr pariz RELACIONAL parder
        | dopr llaveiz CUERPOWHILE llaveder whilepr pariz LOGICO parder;

SWITCH ::= switchpr pariz id parder llaveiz CUERPOSWITCH FINALSWITCH llaveder;

CUERPOSWITCH ::= CUERPOSWITCH casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma
        | casepr EXPRESION dpuntos CUERPOCASE breakpr puntocoma;

CUERPOCASE ::= INSTRUCCION;

FINALSWITCH ::= defaultpr dpuntos CUERPOCASE;

LOGICO ::= EXPRESION andpr EXPRESION
        | EXPRESION orpr EXPRESION
        | notpr EXPRESION;

INC ::= EXPRESION mas mas;

DEC ::= EXPRESION menos menos;

CALLM ::= id pariz parder {:proyecto.Interfaz.numparametros = 0;:}
        | id pariz CUERPOMETODO parder{:proyecto.Interfaz.numparametros = 0;:};

CUERPOMETODO ::= EXPRESION{:proyecto.Interfaz.numparametros++;:}
            | EXPRESION CUERPOMETODO2{:proyecto.Interfaz.numparametros++;:};

CUERPOMETODO2 ::= CUERPOMETODO2 coma EXPRESION{:proyecto.Interfaz.numparametros++;:}
                | coma EXPRESION{:proyecto.Interfaz.numparametros++;:};

IMPORT ::= requirepr pariz cadena parder;

CLASS ::= classpr id:a pariz parder llaveiz CUERPOCLASE  llaveder{://System.out.println("Variables");
    proyecto.Interfaz.clasesg++;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.clasestempA.add(a);
        proyecto.Interfaz.claseslineastempA.add(proyecto.Interfaz.numlineasc);
        proyecto.Interfaz.numlineasc = 0;
        proyecto.Interfaz.clasesmetodostempA.add(proyecto.Interfaz.metodosc);
        proyecto.Interfaz.metodosc = "";
        proyecto.Interfaz.archivoclasesA.add(proyecto.Interfaz.nombrearchivojs);

        //System.out.println("Archivo A");
    } else {
        proyecto.Interfaz.clasestempB.add(a);
        proyecto.Interfaz.claseslineastempB.add(proyecto.Interfaz.numlineasc);
        proyecto.Interfaz.numlineasc = 0;
        proyecto.Interfaz.clasesmetodostempB.add(proyecto.Interfaz.metodosc);
        proyecto.Interfaz.metodosc = "";
        proyecto.Interfaz.archivoclasesB.add(proyecto.Interfaz.nombrearchivojs);
        //Addclase(a,proyecto.Interfaz.nombrearchivojs);
        //System.out.println("Archivo B");
        
    }
:};

CUERPOCLASE ::= CUERPOCLASE INSTRUCCIONL{:proyecto.Interfaz.numlineasc++;:}
            | INSTRUCCIONL{:proyecto.Interfaz.numlineasc++;:};

METODO ::= id:a pariz parder llaveiz METODOBODY llaveder{://System.out.println("Metodos");
    proyecto.Interfaz.metodosg++;
    proyecto.Interfaz.metodosc = proyecto.Interfaz.metodosc + "-" + a;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.metodostempA.add(a);
        proyecto.Interfaz.metodosparamtempA.add(0);
        proyecto.Interfaz.metodoslineastempA.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosA.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo A");
    } else {
        proyecto.Interfaz.metodostempB.add(a);
        proyecto.Interfaz.metodosparamtempB.add(0);
        proyecto.Interfaz.metodoslineastempB.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosB.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo B");

    }
:}
        | id:a pariz CUERPOMETODO parder llaveiz METODOBODY llaveder{://System.out.println("Metodos");
        proyecto.Interfaz.metodosg++;
        proyecto.Interfaz.metodosc = proyecto.Interfaz.metodosc + "-" +  a;
    if(proyecto.Interfaz.archivoa == true){
        proyecto.Interfaz.metodostempA.add(a);
        proyecto.Interfaz.metodosparamtempA.add(proyecto.Interfaz.numparametros);
        proyecto.Interfaz.metodoslineastempA.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosA.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo A");
    } else {
        proyecto.Interfaz.metodostempB.add(a);
        proyecto.Interfaz.metodosparamtempB.add(proyecto.Interfaz.numparametros);
        proyecto.Interfaz.metodoslineastempB.add(proyecto.Interfaz.numlineas);
        proyecto.Interfaz.archivometodosB.add(proyecto.Interfaz.nombrearchivojs);
        proyecto.Interfaz.numparametros = 0;
        proyecto.Interfaz.numlineas = 0;
        //System.out.println("Archivo B");

    }
:};

METODOBODY ::= METODOBODY INSTRUCCIONL {:proyecto.Interfaz.numlineas++;:}
            | INSTRUCCIONL {:proyecto.Interfaz.numlineas++;:};

